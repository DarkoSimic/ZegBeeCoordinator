///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               03/May/2017  16:53:07
// Copyright 2004-2016 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c
//    Command line       =  
//        -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c" -D
//        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\circular_buffer.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME circular_buffer

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET

        PUBLIC `??array2circular::?relay`
        FUNCTION `??array2circular::?relay`,0203H
        PUBLIC `??circular2array::?relay`
        FUNCTION `??circular2array::?relay`,0203H
        PUBLIC `??circularEmptyBuffer::?relay`
        FUNCTION `??circularEmptyBuffer::?relay`,0203H
        PUBLIC `??circularGet::?relay`
        FUNCTION `??circularGet::?relay`,0203H
        PUBLIC `??circularInit::?relay`
        FUNCTION `??circularInit::?relay`,0203H
        PUBLIC `??circularIsEmpty::?relay`
        FUNCTION `??circularIsEmpty::?relay`,0203H
        PUBLIC `??circularIsFull::?relay`
        FUNCTION `??circularIsFull::?relay`,0203H
        PUBLIC `??circularPut::?relay`
        FUNCTION `??circularPut::?relay`,0203H
        PUBLIC `??circularSize::?relay`
        FUNCTION `??circularSize::?relay`,0203H
        PUBLIC array2circular
        FUNCTION array2circular,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC circular2array
        FUNCTION circular2array,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC circularEmptyBuffer
        FUNCTION circularEmptyBuffer,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC circularGet
        FUNCTION circularGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC circularInit
        FUNCTION circularInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC circularIsEmpty
        FUNCTION circularIsEmpty,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC circularIsFull
        FUNCTION circularIsFull,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        PUBLIC circularPut
        FUNCTION circularPut,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC circularSize
        FUNCTION circularSize,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
array2circular      SYMBOL "array2circular"
`??array2circular::?relay` SYMBOL "?relay", array2circular
circular2array      SYMBOL "circular2array"
`??circular2array::?relay` SYMBOL "?relay", circular2array
circularEmptyBuffer SYMBOL "circularEmptyBuffer"
`??circularEmptyBuffer::?relay` SYMBOL "?relay", circularEmptyBuffer
circularGet         SYMBOL "circularGet"
`??circularGet::?relay` SYMBOL "?relay", circularGet
circularInit        SYMBOL "circularInit"
`??circularInit::?relay` SYMBOL "?relay", circularInit
circularIsEmpty     SYMBOL "circularIsEmpty"
`??circularIsEmpty::?relay` SYMBOL "?relay", circularIsEmpty
circularIsFull      SYMBOL "circularIsFull"
`??circularIsFull::?relay` SYMBOL "?relay", circularIsFull
circularPut         SYMBOL "circularPut"
`??circularPut::?relay` SYMBOL "?relay", circularPut
circularSize        SYMBOL "circularSize"
`??circularSize::?relay` SYMBOL "?relay", circularSize

// C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c
//    1 #include "includes/circular_buffer.h"
//    2 
//    3 //*****************************************************************************
//    4 //
//    5 // Initialization of circular buffer
//    6 //
//    7 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//    8 uint8 circularInit(CircularBuffer_t *buff)
circularInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function circularInit
        CODE
//    9 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   10 	if (buff != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??circularInit_0
//   11 	{
//   12 		buff->head = buff->buffer;
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   13 		buff->tail = buff->buffer;
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   14 		return 1;
        MOV     R1,#0x1
        SJMP    ??circularInit_1
//   15 	}
//   16 	return 0;
??circularInit_0:
        MOV     R1,#0x0
??circularInit_1:
        LJMP    ?Subroutine0 & 0xFFFF
//   17 }
          CFI EndBlock cfiBlock0
//   18 
//   19 //*****************************************************************************
//   20 //
//   21 // Function checks if a circular buffer is full
//   22 // returns 1 if CB is full or 0 if it is not
//   23 //
//   24 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   25 uint8 circularIsFull(CircularBuffer_t *buff)
circularIsFull:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function circularIsFull
        CODE
//   26 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   27 	if(buff->head == buff->buffer && buff->tail == (buff->buffer + CAPACITY - 1))
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_24:
        XRL     A,R0
        JNZ     ??circularIsFull_0
        MOV     A,R3
        XRL     A,R1
??circularIsFull_0:
        JNZ     ??circularIsFull_1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        ADD     A,#-0x1
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??circularIsFull_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??circularIsFull_2:
        JZ      ??circularIsFull_3
//   28 		return 1;
//   29 	else if ((buff->head - buff->tail) == 1)
??circularIsFull_1:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        PUSH    DPL
          CFI CFA_SP SP+-6
        PUSH    DPH
          CFI CFA_SP SP+-7
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-6
        POP     DPL
          CFI CFA_SP SP+-5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#0x1
        XRL     A,R0
        ORL     A,R1
        JNZ     ??circularIsFull_4
//   30 		return 1;
??circularIsFull_3:
        MOV     R1,#0x1
        SJMP    ??circularIsFull_5
//   31 	else return 0;
??circularIsFull_4:
        MOV     R1,#0x0
??circularIsFull_5:
        SJMP    ?Subroutine0
//   32 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function circularInit
          CFI Conditional ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function circularIsFull
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-7
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function circularInit
          CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function circularIsFull
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_11
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-9
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function circularSize
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_6
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-4
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function circular2array
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_7
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-4
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV     A,R2
        ADD     A,#0x0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function circularInit
          CFI Conditional ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function circularIsFull
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond11) CFA_SP SP+-7
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,R2
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,R2
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function circularIsFull
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function circularPut
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV     A,R2
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function circularIsEmpty
          CFI Conditional ??CrossCallReturnLabel_16
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function circularIsFull
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond17) CFA_SP SP+-9
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function circularPut
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function circularIsFull
          CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-11
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function circularPut
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_18
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function circularIsEmpty
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
          CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond22) CFA_SP SP+-9
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function circularSize
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-4
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function circular2array
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function circularInit
          CFI Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function circularIsFull
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9
          CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond27) CFA_SP SP+-9
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function circularIsFull
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
          CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond28) CFA_SP SP+-13
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function circularPut
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_18
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-6
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function circularIsEmpty
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-11
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function circularSize
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-6
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function circular2array
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-6
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        ADD     A,#0x2
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function circularIsFull
          CFI Conditional ??CrossCallReturnLabel_24
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function circularIsEmpty
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond35) CFA_SP SP+-7
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV     A,R2
        ADD     A,#0x0
        MOV     DPL,A
        MOV     A,R3
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function circularGet
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function circularIsFull
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond38) CFA_SP SP+-7
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function circularIsEmpty
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond39) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond39) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond39) CFA_SP SP+-7
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        ADDC    A,#0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//   33 
//   34 //*****************************************************************************
//   35 //
//   36 // Function checks if a CB  is empty
//   37 // returns 1 if CB is empty or 0 if it is not
//   38 //
//   39 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   40 uint8 circularIsEmpty(CircularBuffer_t *buff)
circularIsEmpty:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function circularIsEmpty
        CODE
//   41 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   42 	if (buff->head == buff->tail)
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_16:
        XRL     A,R0
        JNZ     ??circularIsEmpty_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??circularIsEmpty_0:
        JNZ     ??circularIsEmpty_1
//   43 		return 1;
        MOV     R1,#0x1
        SJMP    ??circularIsEmpty_2
//   44 	return 0;
??circularIsEmpty_1:
        MOV     R1,#0x0
??circularIsEmpty_2:
          CFI EndBlock cfiBlock41
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   45 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock42
//   46 
//   47 //*****************************************************************************
//   48 //
//   49 // Function put a new element in CB (at end)
//   50 //
//   51 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   52 void circularPut(CircularBuffer_t *buff, uint8 el)
circularPut:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function circularPut
        CODE
//   53 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   54 	if ( ((buff->buffer + CAPACITY - 1) - buff->tail) == 0 )
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        CLR     C
        SUBB    A,R4
        MOV     R4,A
        MOV     A,R7
        SUBB    A,R5
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??circularPut_0
//   55 	{
//   56 		*(buff->tail) = el;
        LCALL   ?Subroutine4 & 0xFFFF
//   57 		buff->tail = buff->buffer;
//   58 	}
??CrossCallReturnLabel_2:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   59 	*(buff->tail) = el;
??circularPut_0:
        LCALL   ?Subroutine4 & 0xFFFF
//   60 	buff->tail++;
??CrossCallReturnLabel_3:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   61 }
          CFI EndBlock cfiBlock43
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function circularPut
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function circularPut
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//   62 
//   63 //*****************************************************************************
//   64 //
//   65 // Function gets a element from CB 
//   66 //
//   67 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   68 uint8 circularGet(CircularBuffer_t *buff, uint8 *el)
circularGet:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function circularGet
        CODE
//   69 {
        FUNCALL circularGet, circularIsEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//   70 	if (circularIsEmpty(buff))
        ; Setup parameters for call to function circularIsEmpty
        LCALL   `??circularIsEmpty::?relay`; Banked call to: circularIsEmpty
        MOV     A,R1
        JZ      ??circularGet_0
//   71 	{
//   72 		return 0;
        MOV     R1,#0x0
        SJMP    ??circularGet_1
//   73 	}
//   74 	else if ( ((buff->buffer + CAPACITY - 1) - buff->head) == 0 )
??circularGet_0:
        MOV     A,R6
        ADD     A,#-0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_23:
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??circularGet_2
//   75 	{
//   76 		*el = *(buff->head);
        LCALL   ?Subroutine3 & 0xFFFF
//   77 		buff->head = buff->buffer;
//   78 		return 1;
//   79 	}
??CrossCallReturnLabel_0:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        SJMP    ??circularGet_3
//   80 	else 
//   81 	{
//   82 		*el = *(buff->head);
??circularGet_2:
        LCALL   ?Subroutine3 & 0xFFFF
//   83 		buff->head++;
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
??circularGet_3:
        MOVX    @DPTR,A
//   84 		return 1;
        MOV     R1,#0x1
//   85 	}
??circularGet_1:
          CFI EndBlock cfiBlock48
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//   86 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function circularPut
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function circularGet
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function circularGet
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function circularGet
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV     A,R6
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOVX    A,@DPTR
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
//   87 
//   88 //*****************************************************************************
//   89 //
//   90 // Function that clears a CB
//   91 //
//   92 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   93 void circularEmptyBuffer(CircularBuffer_t *buff)
circularEmptyBuffer:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function circularEmptyBuffer
        CODE
//   94 {
        FUNCALL circularEmptyBuffer, circularInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   95 	circularInit(buff);
        ; Setup parameters for call to function circularInit
        LCALL   `??circularInit::?relay`; Banked call to: circularInit
//   96 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock56
//   97 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   98 uint8 circularSize(CircularBuffer_t *buff)
circularSize:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function circularSize
        CODE
//   99 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  100 	uint8 *tmp = buff->head;
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  101 	uint8 cnt = 0;
        MOV     R1,#0x0
        SJMP    ??circularSize_0
//  102 	while(tmp != buff->tail)
//  103 	{
//  104 		if ( ((buff->buffer + CAPACITY - 1) - tmp) == 0 )
??circularSize_1:
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        MOV     A,R6
        CLR     C
        SUBB    A,R4
        MOV     R6,A
        MOV     A,R7
        SUBB    A,R5
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JNZ     ??circularSize_2
//  105 		{
//  106 			cnt++;
        INC     R1
//  107 			tmp = buff->buffer;
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  108 		}
//  109 		cnt++;
??circularSize_2:
        INC     R1
//  110 		tmp++;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  111 	}
??circularSize_0:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,R4
        XRL     A,R6
        JNZ     ??circularSize_3
        MOV     A,R5
        XRL     A,R7
??circularSize_3:
        JNZ     ??circularSize_1
//  112 	return cnt;	
        LJMP    ?Subroutine1 & 0xFFFF
//  113 }
          CFI EndBlock cfiBlock57
//  114 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  115 int circular2array(CircularBuffer_t *c_buff, uint8 *uc_array)
circular2array:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function circular2array
        CODE
//  116 {	
        FUNCALL circular2array, circularSize
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  117 	unsigned char *tmp = c_buff->head;
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  118 	int i = 0;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        SJMP    ??circular2array_0
//  119 	while(tmp != c_buff->tail)
//  120 	{
//  121 		*(uc_array + i) = *(tmp);
??circular2array_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        ADD     A,?V0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  122 		tmp++;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
//  123 		i++;
        INC     ?V0
        MOV     A,?V0
        JNZ     ??circular2array_0
        INC     ?V1
//  124 	}
??circular2array_0:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,R0
        XRL     A,R6
        JNZ     ??circular2array_2
        MOV     A,R1
        XRL     A,R7
??circular2array_2:
        JNZ     ??circular2array_1
//  125 	return circularSize(c_buff);
        ; Setup parameters for call to function circularSize
        LCALL   `??circularSize::?relay`; Banked call to: circularSize
        MOV     A,R1
        MOV     R2,A
        MOV     R3,#0x0
        LJMP    ?Subroutine2 & 0xFFFF
//  126 }
          CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function circularSize
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function circular2array
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function circularSize
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function circular2array
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOV     A,R2
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64
//  127 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  128 uint8 array2circular(CircularBuffer_t *c_buff, uint8 *uc_array, uint8 size)
array2circular:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function array2circular
        CODE
//  129 {
        FUNCALL array2circular, circularIsEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL array2circular, circularPut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V4,R1
//  130 	int i;
//  131 	if (circularIsEmpty(c_buff))// && (size < CAPACITY))
        ; Setup parameters for call to function circularIsEmpty
        LCALL   `??circularIsEmpty::?relay`; Banked call to: circularIsEmpty
        MOV     A,R1
        JZ      ??array2circular_0
//  132 	{
//  133 		for (i = 0; i < size; i++)
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        SJMP    ??array2circular_1
//  134 		{
//  135 			circularPut(c_buff, *(uc_array + i));
??array2circular_2:
        ; Setup parameters for call to function circularPut
        MOV     A,?V0
        ADD     A,?V2
        MOV     DPL,A
        MOV     A,?V1
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??circularPut::?relay`; Banked call to: circularPut
//  136 		}
        INC     ?V2
        MOV     A,?V2
        JNZ     ??array2circular_1
        INC     ?V3
??array2circular_1:
        MOV     R0,?V4
        CLR     C
        MOV     A,?V2
        SUBB    A,R0
        MOV     A,?V3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??array2circular_2
//  137 		return 1;
        MOV     R1,#0x1
        SJMP    ??array2circular_3
//  138 	}
//  139 	else
//  140 	{
//  141 		return 0;
??array2circular_0:
        MOV     R1,#0x0
??array2circular_3:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
//  142 	}
//  143 }
          CFI EndBlock cfiBlock65

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularIsFull::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularIsFull

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularIsEmpty::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularIsEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularPut::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularPut

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularEmptyBuffer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularEmptyBuffer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circularSize::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circularSize

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??circular2array::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    circular2array

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??array2circular::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    array2circular

        END
//  144 	
// 
// 652 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
// 
//  54 bytes of CODE     memory
// 652 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
