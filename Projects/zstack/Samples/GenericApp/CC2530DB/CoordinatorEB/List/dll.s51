///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               05/May/2017  16:07:51
// Copyright 2004-2016 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\dll.c
//    Command line       =  
//        -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\dll.c" -D ZTOOL_P1 -D
//        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
//        "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\dll.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME dll

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X
        EXTERN ?XLOAD_R4567
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R2345
        EXTERN ?XSTORE_R4567
        EXTERN __INIT_XDATA_Z

        PUBLIC `??CallBackRegister::?relay`
        FUNCTION `??CallBackRegister::?relay`,0203H
        PUBLIC `??dllDataRequest::?relay`
        FUNCTION `??dllDataRequest::?relay`,0203H
        PUBLIC `??dllInit::?relay`
        FUNCTION `??dllInit::?relay`,0203H
        PUBLIC `??getSignalAddress::?relay`
        FUNCTION `??getSignalAddress::?relay`,0203H
        FUNCTION `??packFrameToStell::?relay`,0203H
        PUBLIC `??processFrame::?relay`
        FUNCTION `??processFrame::?relay`,0203H
        PUBLIC CallBackRegister
        FUNCTION CallBackRegister,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC cTxBufferCC2530
        PUBLIC dllDataRequest
        FUNCTION dllDataRequest,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC dllInit
        FUNCTION dllInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC emFlagCC2530
        PUBLIC getSignalAddress
        FUNCTION getSignalAddress,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION packFrameToStell,080203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC processFrame
        FUNCTION processFrame,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 79, STACK
        PUBLIC recPack
        PUBLIC rxBufferCC2530
        PUBLIC rxBufferCC2530Index
        PUBLIC rxBufferPC
        PUBLIC stateCC2530
        PUBLIC tmpCC2530
        PUBLIC txBufferCC2530Index
        PUBLIC uiRxBufferCC2530
        PUBLIC uiTxBufferCC2530
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
atoi                SYMBOL "atoi"
`??atoi::?relay`    SYMBOL "?relay", atoi
atol                SYMBOL "atol"
`??atol::?relay`    SYMBOL "?relay", atol
circularInit        SYMBOL "circularInit"
`??circularInit::?relay` SYMBOL "?relay", circularInit
CallBackRegister    SYMBOL "CallBackRegister"
`??CallBackRegister::?relay` SYMBOL "?relay", CallBackRegister
dllDataRequest      SYMBOL "dllDataRequest"
`??dllDataRequest::?relay` SYMBOL "?relay", dllDataRequest
dllInit             SYMBOL "dllInit"
`??dllInit::?relay` SYMBOL "?relay", dllInit
getSignalAddress    SYMBOL "getSignalAddress"
`??getSignalAddress::?relay` SYMBOL "?relay", getSignalAddress
processFrame        SYMBOL "processFrame"
`??processFrame::?relay` SYMBOL "?relay", processFrame

        EXTERN `??atoi::?relay`
        FUNCTION `??atoi::?relay`,00H
        EXTERN `??atol::?relay`
        FUNCTION `??atol::?relay`,00H
        EXTERN `??circularInit::?relay`
        FUNCTION `??circularInit::?relay`,00H
        EXTERN atoi
        FUNCTION atoi,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atol
        FUNCTION atol,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN circularInit
        FUNCTION circularInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\dll\src\dll.c
//    1 #include "includes/dll.h"
//    2 //#include "hal/includes/hal_gpio.h"
//    3 #include "includes/defines.h"
//    4 #include "hal_uart.h"
//    5 #include "includes/circular_buffer.h"
//    6 
//    7 #include "hal_lcd.h"
//    8 #include "OnBoard.h"
//    9 #include <stdlib.h>
//   10 //#include "stdlib.h"
//   11 //#include "cmsis_os.h"
//   12 
//   13 #include <stdio.h>
//   14 //#include <stdint.h>
//   15 //#include <stdlib.h>
//   16 #include "hal_types.h"
//   17 //*****************************************************************************
//   18 //
//   19 // A mapping of devices IDs to signal_id number.
//   20 //
//   21 //*****************************************************************************
//   22 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   23 static const uint16 signalID[] = {
signalID:
        DATA16
        DW 12884
        DW 4370
        DW 12880
        DW 4372
        DW 12872
        DW 4374
        DW 4375
        DW 4376
        DW 4377
//   24                                   TEMP_SENSOR_INSIDE,
//   25                                   TEMP_SENSOR_OUTSIDE,
//   26                                   PRESSURE_SENSOR_INSIDE,
//   27                                   PRESSURE_SENSOR_OUTSIDE,
//   28                                   HUMIDITY_SENSOR_INSIDE,
//   29                                   HUMIDITY_SENSOR_OUTSIDE,
//   30                                   DOOR,
//   31                                   WINDOW,
//   32                                   MOTION_SENSOR
//   33                                   };
//   34 
//   35 
//   36 
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 // Internal/local functions
//   41 // \just defining functionality/
//   42 //
//   43 //*****************************************************************************
//   44 static uint8 getSignalID(const uint16 devicesAddress);
//   45 static uint8 checksum(DLLPacket_t *frame);
//   46 
//   47 //static uint8 processFrameRx(uint8 *frame, uint8 len, uint16 Address);
//   48 //static uint8 devAddressSupport(uint16 devAddress);
//   49 
//   50 
//   51 //static uint8 halUARTWrite(CircularBuffer_t *txBuffer, uint8 len);
//   52 static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket);
//   53 //*****************************************************************************
//   54 //
//   55 // CMSIS-RTOS tread definition and tread  function declaration
//   56 //
//   57 //*****************************************************************************
//   58 /*
//   59 void communicationThread(void const *arg);
//   60 osThreadId tID_PC_Communication;
//   61 osThreadId tID_CC2530_Communication;
//   62 */
//   63 
//   64 //*****************************************************************************
//   65 //
//   66 // Extern variables
//   67 //
//   68 // treba promijeniti naziv ova dva bafera u circularBuffer.h
//   69 //
//   70 //*****************************************************************************

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   71 CircularBuffer_t rxBufferPC;
rxBufferPC:
        DS 260
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 CircularBuffer_t rxBufferCC2530;
rxBufferCC2530:
        DS 260
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 //halUARTCfg_t uartConfig;
//   75 //*****************************************************************************
//   76 //
//   77 // Local variables
//   78 //
//   79 //*****************************************************************************
//   80 //DLLState_t statePC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 DLLState_t stateCC2530;
stateCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   82 //uint8 emFlagPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 uint8 emFlagCC2530;
emFlagCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   84 
//   85 //char uiTxBufferPC[MAX_BUFFER_LENGHT];
//   86 //uint8 uiRxBufferPC[MAX_BUFFER_LENGHT];
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 char uiTxBufferCC2530[MAX_BUFFER_LENGHT];
uiTxBufferCC2530:
        DS 256
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 uint8 uiRxBufferCC2530[MAX_BUFFER_LENGHT];
uiRxBufferCC2530:
        DS 256
        REQUIRE __INIT_XDATA_Z
//   90 
//   91 //uint8 rxBufferPCIndex;
//   92 //uint8 txBufferPCIndex;
//   93 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 rxBufferCC2530Index;
rxBufferCC2530Index:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   95 uint8 txBufferCC2530Index;
txBufferCC2530Index:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 //uint8 tmpPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 uint8 tmpCC2530;
tmpCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   99 
//  100 //CircularBuffer_t cTxBufferPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 CircularBuffer_t cTxBufferCC2530;
cTxBufferCC2530:
        DS 260
        REQUIRE __INIT_XDATA_Z
//  102 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 DLLPacket_t recPack;
recPack:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 static CallBack_t callBack;
callBack:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  106 
//  107 //*****************************************************************************
//  108 //
//  109 // Function definition
//  110 //
//  111 //*****************************************************************************
//  112 
//  113 //*****************************************************************************
//  114 //
//  115 //! Data link layer initialization function
//  116 //!
//  117 //! This function initializes states and indexes,
//  118 //! configures communication ports, one of \b PC or \b CC2530 and their
//  119 //! baudrates, one of \b BAUDRATE_PC \b BAUDRATE_CC2530. Creates two threads
//  120 //! for communication wia UART interface.
//  121 //!
//  122 //! \return None.
//  123 //
//  124 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  125 void dllInit(void)
dllInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function dllInit
        CODE
//  126 {
        FUNCALL dllInit, circularInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  127 
//  128 	stateCC2530 = IDLE;
        MOV     DPTR,#stateCC2530
        CLR     A
        MOVX    @DPTR,A
//  129 
//  130 	rxBufferCC2530Index = 0;
        MOV     DPTR,#rxBufferCC2530Index
        MOVX    @DPTR,A
//  131 	txBufferCC2530Index = 0;
        MOV     DPTR,#txBufferCC2530Index
        MOVX    @DPTR,A
//  132 
//  133 	//circularInit(&cTxBufferPC);
//  134 	circularInit(&cTxBufferCC2530);
        ; Setup parameters for call to function circularInit
        MOV     R2,#cTxBufferCC2530 & 0xff
        MOV     R3,#(cTxBufferCC2530 >> 8) & 0xff
        LCALL   `??circularInit::?relay`; Banked call to: circularInit
//  135         
//  136       
//  137 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  138 
//  139 //*****************************************************************************
//  140 //
//  141 //! Register callback function.
//  142 //!
//  143 //! \param cb is pointer on the function.
//  144 //!
//  145 //! \return None.
//  146 //
//  147 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  148 void CallBackRegister(CallBack_t cb)
CallBackRegister:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function CallBackRegister
        CODE
//  149 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  150 	callBack = cb;
        MOV     DPTR,#callBack
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  151 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock2
//  152 
//  153 
//  154 //*****************************************************************************
//  155 //
//  156 //! Get the signal ID.
//  157 //!
//  158 //! \param deviceAddress is device address.
//  159 //!
//  160 //! For given a device address, this function returns the corresponding
//  161 //! signal ID.
//  162 //!
//  163 //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
//  164 //
//  165 //*****************************************************************************
//  166 uint8 getSignalID(const uint16 deviceAddress)
//  167 {
//  168 	uint8 i;
//  169         
//  170 	uint8 retVal = 255;
//  171 	for (i = 0; i < sizeof(signalID); i+=2)
//  172 	{
//  173             
//  174 		if (deviceAddress == signalID[i])
//  175 		{
//  176 			retVal = i;
//  177                         
//  178                         
//  179 		}
//  180                
//  181 	}
//  182 	return retVal;
//  183 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  184 uint16 getSignalAddress(const uint16 ID)
getSignalAddress:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function getSignalAddress
        CODE
//  185 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  186   uint8 i;
//  187         
//  188 	uint16 retVal = 0;
        MOV     R4,#0x0
        MOV     R5,#0x0
//  189 	for (i = 0; i < sizeof(signalID); i+=2)
        MOV     R6,#0x0
//  190 	{
//  191             
//  192 		if (ID == i)
??getSignalAddress_0:
        MOV     A,R6
        XRL     A,R2
        ORL     A,R3
        JNZ     ??getSignalAddress_1
//  193 		{
//  194 			retVal = signalID[i];
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#signalID & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(signalID >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  195                         
//  196                         
//  197 		}
//  198                
//  199 	}
??getSignalAddress_1:
        MOV     A,#0x2
        ADD     A,R6
        MOV     R6,A
        CLR     C
        SUBB    A,#0x12
        JC      ??getSignalAddress_0
//  200 	return retVal;
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  201 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  202 //*****************************************************************************
//  203 //
//  204 //! Process received data.
//  205 //!
//  206 //! \param frame is pointer on the received frame.
//  207 //! \param len is lenght of received frame.
//  208 //! \param port is number of port.
//  209 //!
//  210 //! Function process received frame, converts, checks checksum and validation
//  211 //! of signal ID (supported devices)
//  212 //!
//  213 //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
//  214 //
//  215 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  216 uint16 processFrame(uint8 *buff)
processFrame:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function processFrame
        CODE
//  217 {
        FUNCALL processFrame, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processFrame, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processFrame, atol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processFrame, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processFrame, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 70
        MOV     A,#-0x46
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 79)
//  218 	uint8 i = 0;
        MOV     R7,#0x0
//  219 	uint8 j = 0;
        MOV     R4,#0x0
//  220         uint8 k = 0;
        MOV     R6,#0x0
        SJMP    ??processFrame_0
//  221 	
//  222         Data_t *cbData;
//  223         
//  224         // pomocne promjenljive
//  225         char cID[10];
//  226         char cPackNum[10];
//  227         char cCmd[10];
//  228         char cTimeStamp[10];
//  229         char cCheckSum[10];
//  230         
//  231         char dID[10];
//  232         char dCmd[10];
//  233           
//  234         //uint8 newLine = 0x0A;
//  235 
//  236         //uint16 broj = 0;
//  237         
//  238 	while(*(buff +  i) != 0x3E)//'>')
//  239 	{
//  240 		i++;
??processFrame_1:
        INC     R7
//  241 	}
??processFrame_0:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        XRL     A,#0x3e
        JNZ     ??processFrame_1
//  242 	if(*(buff + i) ==  0x3E)//'>')
        MOVX    A,@DPTR
        XRL     A,#0x3e
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  243 	{
//  244 		i++;
        LCALL   ?Subroutine7 & 0xFFFF
//  245 		if(*(buff + i) ==  0x23)//'#')
??CrossCallReturnLabel_13:
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  246 		{
//  247 			i++;
        SJMP    ??processFrame_3
//  248      			while(*(buff + i) !=  0x2C)//',')
//  249 			{
//  250 				cID[j]=  *(buff + i);
??processFrame_4:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  251                                 j++;
        INC     R4
//  252 				i++;
??processFrame_3:
        INC     R7
//  253 			}
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_40:
        JNZ     ??processFrame_4
//  254                         cID[j]= '\0';
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  255 		}
//  256                 else
//  257                 {
//  258                   return 0;
//  259                 }
//  260 		if(*(buff + i) == 0x2C)//',')
??CrossCallReturnLabel_18:
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  261 		{
//  262 			i++;
        LCALL   ?Subroutine7 & 0xFFFF
//  263                         if(*(buff + i) == 0x23)//'#')
??CrossCallReturnLabel_14:
        JNZ     ??CrossCallReturnLabel_19
//  264                         {
//  265                           i++;
        INC     R7
//  266                           j = 0;
        MOV     R4,#0x0
        SJMP    ??processFrame_5
//  267                           while(*(buff + i) != 0x2C)//',')
//  268                           {
//  269                                 cPackNum[j]=  *(buff + i);
??processFrame_6:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  270 				i++;
        INC     R7
//  271 				j++;
        INC     R4
//  272                           }
??processFrame_5:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_41:
        JNZ     ??processFrame_6
//  273                           cPackNum[j]= '\0';
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  274                         }
//  275                         
//  276 		}
//  277                 else
//  278                 {
//  279                   return 0;
//  280                 }
//  281 		if(*(buff + i) == 0x2C)//',')
??CrossCallReturnLabel_19:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  282 		{
//  283 			i++;
        LCALL   ?Subroutine7 & 0xFFFF
//  284                         if(*(buff + i) == 0x23)//'#')
??CrossCallReturnLabel_15:
        JNZ     ??CrossCallReturnLabel_20
//  285                         {
//  286                           i++;
        INC     R7
//  287                           j = 0;
        MOV     R4,#0x0
        SJMP    ??processFrame_7
//  288                           while(*(buff + i) != 0x2C)//',')
//  289                           {
//  290 				cCmd[j]=  *(buff + i);
??processFrame_8:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  291 				i++;
        INC     R7
//  292 				j++;
        INC     R4
//  293                           }
??processFrame_7:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_43:
        JNZ     ??processFrame_8
//  294                           cCmd[j]= '\0';
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  295                         }
//  296 		}
//  297                 else
//  298                 {
//  299                   return 0;
//  300                 }
//  301                 if(*(buff + i) == 0x2C)//',')
??CrossCallReturnLabel_20:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_44:
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  302 		{
//  303 			i++;
        LCALL   ?Subroutine7 & 0xFFFF
//  304                         if(*(buff + i) == 0x23)//'#')
??CrossCallReturnLabel_16:
        JNZ     ??CrossCallReturnLabel_21
//  305                         {
//  306                           i++;
        INC     R7
//  307                           j = 0;
        MOV     R4,#0x0
        SJMP    ??processFrame_9
//  308                           while(*(buff + i) != 0x2C)//',')
//  309                           {
//  310 				cTimeStamp[j]=  *(buff + i);
??processFrame_10:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  311 				i++;
        INC     R7
//  312 				j++;
        INC     R4
//  313                           }
??processFrame_9:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_45:
        JNZ     ??processFrame_10
//  314                           cTimeStamp[j]= '\0';
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  315                         }
//  316 		}
//  317                 else
//  318                 {
//  319                   return 0;
//  320                 }
//  321                 if(*(buff + i) == 0x2C)//',')
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_46:
        JZ      $+5
        LJMP    ??processFrame_2 & 0xFFFF
//  322 		{
//  323 			i++;
        LCALL   ?Subroutine7 & 0xFFFF
//  324                         if(*(buff + i) == 0x23)//'#')
??CrossCallReturnLabel_17:
        JNZ     ??CrossCallReturnLabel_22
//  325                         {
//  326                           i++;
        INC     R7
//  327                           j = 0;
        MOV     R4,#0x0
        SJMP    ??processFrame_11
//  328                           while(*(buff + i) != 0x3C)//'<')
//  329                           {
//  330 				cCheckSum[j]=  *(buff + i);
??processFrame_12:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  331 				i++;
        INC     R7
//  332 				j++;
        INC     R4
//  333                           }
??processFrame_11:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        XRL     A,#0x3c
        JNZ     ??processFrame_12
//  334                           cCheckSum[j]= '\0';
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  335                         }
//  336 		}
//  337                 else
//  338                 {
//  339                   return 0;
//  340                 }
//  341 		
//  342 	}
//  343         else
//  344         {
//  345           return 0;
//  346         }
//  347 	
//  348         
//  349         
//  350         for(k = 0; k < 2; k++)
//  351         {
//  352           dID[k] = cID[1-k];
??CrossCallReturnLabel_22:
        MOV     A,R6
        MOV     R0,A
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  353           
//  354         }
??CrossCallReturnLabel_26:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        JC      ??CrossCallReturnLabel_22
//  355         dID[2] = '\0';
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  356         
//  357         for(k = 0; k < 4; k++)
        MOV     R6,#0x0
//  358         {
//  359           dCmd[k] = cCmd[3-k];
??processFrame_13:
        MOV     A,R6
        MOV     R0,A
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  360           
//  361         }
??CrossCallReturnLabel_27:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??processFrame_13
//  362         dCmd[4] = '\0';
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  363         
//  364         
//  365         recPack.appData.devID = (uint16)atoi(dID);
        ; Setup parameters for call to function atoi
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        MOV     DPTR,#recPack
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  366 	recPack.appData.packNum = (uint8)atoi(cPackNum);
        ; Setup parameters for call to function atoi
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        MOV     A,R2
        MOV     DPTR,#recPack + 2
        MOVX    @DPTR,A
//  367         recPack.appData.data = (uint32)atol(dCmd);
        ; Setup parameters for call to function atol
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     DPTR,#recPack + 3
        LCALL   ?XSTORE_R2345
//  368         //recPack.appData.devID = (uint16)atoi(cID);
//  369 	//recPack.appData.packNum = (uint8)atoi(cPackNum);
//  370        // recPack.appData.data = (uint32)atol(cCmd);
//  371 	recPack.timeStamp = (uint8)atoi(cTimeStamp);
        ; Setup parameters for call to function atoi
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        MOV     A,R2
        MOV     DPTR,#recPack + 7
        MOVX    @DPTR,A
//  372 	recPack.checkSum = (uint8)atoi(cCheckSum);
        ; Setup parameters for call to function atoi
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        MOV     A,R2
        MOV     DPTR,#recPack + 8
        MOVX    @DPTR,A
//  373         
//  374        
//  375         
//  376         
//  377         
//  378         cbData = (struct sData *)(&recPack);
//  379         callBack(cbData);
        ; Setup parameters for indirect call
        MOV     R2,#recPack & 0xff
        MOV     R3,#(recPack >> 8) & 0xff
        MOV     DPTR,#callBack
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  380 /*
//  381         _itoa(recPack.appData.data, (uint8 *)dCmd, 10);
//  382         for(k = 0; k < 4; k++)
//  383         {
//  384           cCmd[k] = dCmd[3-k];
//  385           
//  386         }
//  387         cCmd[4] = '\0';
//  388        
//  389        HalUARTWrite(HAL_UART_PORT_1, "ID", 2);
//  390        HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
//  391        //HalUARTWrite(HAL_UART_PORT_1, (uint8 *)cCmd, k+1);
//  392        HalUARTWrite(HAL_UART_PORT_1, (uint8 *)cCmd, 5);
//  393        HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
//  394        HalUARTWrite(HAL_UART_PORT_1, "ID", 2);
//  395        HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
//  396 */
//  397         return recPack.appData.devID;
        MOV     DPTR,#recPack
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
??processFrame_14:
        MOV     A,#0x46
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 79)
??processFrame_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??processFrame_14
//  398         
//  399         
//  400 }
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function processFrame
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_35:
        INC     DPTR
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function processFrame
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function processFrame
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function processFrame
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function processFrame
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV     A,DPL
        ADD     A,R4
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function processFrame
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function processFrame
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function processFrame
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function processFrame
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        INC     R7
        MOV     A,R2
        ADD     A,R7
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x23
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function processFrame
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV     A,R7
        MOV     R0,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function processFrame
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_12
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-4
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function processFrame
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_40
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-4
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function processFrame
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_41
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-4
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function processFrame
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_42
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function processFrame
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_43
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function processFrame
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function processFrame
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_45
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function processFrame
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_46
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function processFrame
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function processFrame
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function processFrame
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function processFrame
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function processFrame
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function processFrame
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function processFrame
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function processFrame
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function processFrame
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function processFrame
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function processFrame
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function processFrame
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function processFrame
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV     A,R7
        MOV     R0,A
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function processFrame
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function processFrame
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function processFrame
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function processFrame
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function processFrame
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function processFrame
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function processFrame
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_48:
        XRL     A,#0x2c
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59
//  401 //*****************************************************************************
//  402 //
//  403 //! Calculating checksum.
//  404 //!
//  405 //! \param frame is pointer on frame on which one is needed to calculated.
//  406 //!
//  407 //! Function caluculates checksum executing XOR operation on evert member of
//  408 //! \b frame.
//  409 //!
//  410 //! \return Returns result of sumary operation.
//  411 //
//  412 //*****************************************************************************
//  413 static uint8 checksum(DLLPacket_t *frame)
//  414 {
//  415 	uint8 sum  = 0x00;
//  416 	uint8 *ptr = (uint8 *)(frame);
//  417 	uint8 *end = &frame->checkSum;
//  418 	while(ptr != end)
//  419 	{
//  420 		sum ^= *ptr;
//  421 		ptr++;
//  422 	}
//  423 
//  424 	return sum;
//  425 
//  426 }
//  427 
//  428 //*****************************************************************************
//  429 //
//  430 //! Checks a devices address.
//  431 //!
//  432 //! \param devAddress is device address.
//  433 //!
//  434 //! This function determines if a device address is supported.
//  435 //!
//  436 //! \return Returns \b true if address is supported, or \b false otherwise.
//  437 //
//  438 //*****************************************************************************
//  439 /*
//  440 static uint8 devAddressSupport(uint16 devAddress)
//  441 {
//  442 	return( (devAddress == TEMP_SENSOR_INSIDE) ||
//  443 					(devAddress == TEMP_SENSOR_OUTSIDE) ||
//  444 					(devAddress == PRESSURE_SENSOR_INSIDE) ||
//  445  					(devAddress == PRESSURE_SENSOR_OUTSIDE) ||
//  446 					(devAddress == HUMIDITY_SENSOR_INSIDE) ||
//  447 					(devAddress == HUMIDITY_SENSOR_OUTSIDE) ||
//  448 					(devAddress == DOOR) ||
//  449 					(devAddress == WINDOW) ||
//  450 					(devAddress == MOTION_SENSOR)
//  451 					);
//  452 }
//  453 */
//  454 //*****************************************************************************
//  455 //
//  456 //! Function that handles data services.
//  457 //!
//  458 //! \param aData is pointer on data structure.
//  459 //! \param port indicates port number.
//  460 //!
//  461 //! This function prepare data to be ready to send and sets state flag to
//  462 //! signals the thread to perform an action.
//  463 //!
//  464 //! \return None.
//  465 //
//  466 //*****************************************************************************
//  467 
//  468 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  469 static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket)
packFrameToStell:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function packFrameToStell
        CODE
//  470 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  471   
//  472   
//  473   //uint32 da;
//  474   
//  475   int i = 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  476   int j = 0;
        MOV     ?V2,R2
        MOV     ?V3,R2
//  477   int k = 0;
//  478   uint8 *pBuf = buff;
//  479  
//  480   uint32 pom = emPacket.appData.data;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
//  481   
//  482   
//  483   char dat[4] = {'0','0','0','0'};
        MOV     DPTR,#`?<Constant {48, 48, 48, 48}>`
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  484   char daaat[4] = {'0','0','0','0'};
        MOV     DPTR,#`?<Constant {48, 48, 48, 48}>_1`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        SJMP    ??packFrameToStell_0
//  485  // char *id; //= dat;
//  486   
//  487  
//  488     while(pom)
//  489     {
//  490       dat[i] = (pom % 16) + '0';
??packFrameToStell_1:
        MOV     ?V0,?V4
        MOV     A,?V0
        ANL     A,#0xf
        ADD     A,#0x30
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_34:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  491       pom/=256;
        CLR     A
        XCH     A,?V7
        XCH     A,?V6
        XCH     A,?V5
        MOV     ?V4,A
//  492       i++;
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_0
        INC     R3
//  493     }
??packFrameToStell_0:
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??packFrameToStell_1
//  494   
//  495     k = 4 - i;
        MOV     A,#0x4
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        CLR     A
        SUBB    A,R3
        MOV     R1,A
//  496     for(j = 0; j < k; j++)
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      ??packFrameToStell_2
//  497     {
//  498       daaat[j] = '0';
        MOV     R4,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??packFrameToStell_3:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        ORL     A,R2
        JNZ     ??packFrameToStell_3
//  499       
//  500     }
        MOV     ?V2,R2
        MOV     ?V3,R3
//  501     i = 0;
??packFrameToStell_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??packFrameToStell_4
//  502     for(; j < 4; j++)
//  503     {   
//  504       daaat[k] = dat[i];
??packFrameToStell_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_28:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  505       k++;
        INC     R0
        MOV     A,R0
        JNZ     ??packFrameToStell_6
        INC     R1
//  506       i++;
??packFrameToStell_6:
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_7
        INC     R3
//  507       
//  508     }
??packFrameToStell_7:
        INC     ?V2
        MOV     A,?V2
        JNZ     ??packFrameToStell_4
        INC     ?V3
??packFrameToStell_4:
        CLR     C
        MOV     A,?V2
        SUBB    A,#0x4
        MOV     A,?V3
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      ??packFrameToStell_5
//  509  
//  510       //uint8 len = 1 + 1 + 4 + 1 + 1;
//  511   *pBuf++ = 0x3E;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x3e
        MOVX    @DPTR,A
//  512   
//  513   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  514   
//  515   
//  516   *pBuf++ = getSignalID(emPacket.appData.devID) + 0x30;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R7,#-0x1
        MOV     R6,#0x0
??packFrameToStell_8:
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#signalID & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(signalID >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??packFrameToStell_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??packFrameToStell_9:
        JNZ     ??packFrameToStell_10
        MOV     A,R6
        MOV     R7,A
??packFrameToStell_10:
        MOV     A,#0x2
        ADD     A,R6
        MOV     R6,A
        CLR     C
        SUBB    A,#0x12
        JC      ??packFrameToStell_8
        MOV     A,#0x30
        ADD     A,R7
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  517   
//  518   *pBuf++ = 0x2C;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x2c
        MOVX    @DPTR,A
//  519   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  520   
//  521   
//  522   *pBuf++ = emPacket.appData.packNum + 0x30;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  523   
//  524   *pBuf++ = 0x2C;
//  525   *pBuf++ = 0x23;
??CrossCallReturnLabel_7:
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        JNC     ??packFrameToStell_11
        INC     R1
//  526   
//  527   
//  528   for(i = 0; i < 4; i++)
??packFrameToStell_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  529   {
//  530     *pBuf++ =daaat[i] ;
??packFrameToStell_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine11 & 0xFFFF
//  531      //uartSend(data[i]);//+'0');
//  532     //HalLcdWriteString((char *)data[i], 0);
//  533     //HalLcdWriteString("-----------Simic-----------", 0);
//  534   }
??CrossCallReturnLabel_29:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_13
        INC     R3
??packFrameToStell_13:
        CLR     C
        SUBB    A,#0x4
        MOV     A,R3
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        JC      ??packFrameToStell_12
//  535   
//  536   *pBuf++ = 0x2C;
        MOV     A,#0x2c
        MOVX    @DPTR,A
//  537   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  538   
//  539   
//  540   *pBuf++ = emPacket.timeStamp + 0x30;  
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  541   
//  542   *pBuf++ = 0x2C;
//  543   *pBuf++ = 0x23;
//  544   
//  545   
//  546   *pBuf++ = emPacket.checkSum + 0x30;
??CrossCallReturnLabel_8:
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_32:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
//  547   *pBuf++ = 0x3C;
??CrossCallReturnLabel_9:
        MOV     A,#0x3c
        LCALL   ?Subroutine5 & 0xFFFF
//  548   *pBuf++ = 0x00;
??CrossCallReturnLabel_10:
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  549   /*
//  550   da = emPacket.appData.data;
//  551   id = (char*)&da;
//  552   id[4] = '\0';
//  553   HalLcdWriteString("-----------------------------Paket----------------------",0);
//  554   HalLcdWriteString(id,0);
//  555   HalLcdWriteString("-----------------------------Paket----------------------",0);
//  556   */
//  557 } 
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function processFrame
          CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function processFrame
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_27
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function packFrameToStell
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function packFrameToStell
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_28
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function packFrameToStell
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_29
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV     A,DPL
        ADD     A,R2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function packFrameToStell
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function packFrameToStell
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function packFrameToStell
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function packFrameToStell
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function packFrameToStell
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV     A,#0x2c
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,#0x23
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function packFrameToStell
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_7
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function packFrameToStell
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_8
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function packFrameToStell
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_10
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function packFrameToStell
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_7
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function packFrameToStell
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_8
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        RET
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function packFrameToStell
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_8
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-4
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function packFrameToStell
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_9
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-6
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function packFrameToStell
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_10
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-6
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function packFrameToStell
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_7
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-6
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function packFrameToStell
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_8
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-6
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95
//  558 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  559 void dllDataRequest(Data_t *aData)
dllDataRequest:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function dllDataRequest
        CODE
//  560 {
        FUNCALL dllDataRequest, packFrameToStell
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  561      
//  562         
//  563 	DLLPacket_t emPacket;
//  564 
//  565         
//  566         emPacket.appData.devID = aData->devID;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  567         emPacket.appData.data = aData->data;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R4567
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R4567
//  568         emPacket.appData.packNum = aData->packNum;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  569         emPacket.timeStamp = 0;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  570 	emPacket.checkSum = checksum(&emPacket);
        MOV     R2,#0x0
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
??dllDataRequest_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XCH     A,R2
        XRL     A,R2
        MOV     R2,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??dllDataRequest_1
        MOV     A,DPH
        XRL     A,R1
??dllDataRequest_1:
        JNZ     ??dllDataRequest_0
        MOV     A,R2
        MOVX    @DPTR,A
//  571         
//  572        
//  573         packFrameToStell((uint8 *)uiTxBufferCC2530, emPacket);
        ; Setup parameters for call to function packFrameToStell
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x9
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R2,#uiTxBufferCC2530 & 0xff
        MOV     R3,#(uiTxBufferCC2530 >> 8) & 0xff
        LCALL   `??packFrameToStell::?relay`; Banked call to: packFrameToStell
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  574         //array2circular(cTxBuffer, txBuffer, *txIndex);
//  575         
//  576         /*HalLcdWriteString("Velicina je:",0);
//  577         uartSend(sizeof(uint32)+'0');
//  578         HalLcdWriteString("",0);
//  579         HalLcdWriteString("Velicina je:",0);
//  580         */
//  581         //halUARTWrite(cTxBuffer, 0);
//  582         //HalLcdWriteString("Miso----------------------",0); 
//  583         
//  584        // halUARTWrite(port, cTxBuffer, 0);
//  585         
//  586         //HalLcdWriteString(uiTxBufferCC2530, 0);
//  587         
//  588      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
//  589        //HalUARTWrite(HAL_UART_PORT_1, (uint8 *)uiTxBufferCC2530, 19);
//  590      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
//  591 
//  592         
//  593         //HalLcdWriteString(uiTxBufferCC2530, 0);
//  594         
//  595 	emFlagCC2530 = EMISSION_START;
        MOV     DPTR,#emFlagCC2530
        MOV     A,#0x1
        MOVX    @DPTR,A
//  596 	
//  597 	//idde = emPacket.appData.devID;//
//  598         
//  599         //idde = aData->devID;
//  600         
//  601         //idde = (uint16)getSignalID(emPacket.appData.devID);//+ 0x30;
//  602         
//  603         //idde = aData->devID;
//  604         //idde = aData.devID;
//  605         
//  606         //id = (char*)&emPacket.appData.data;
//  607         //id = (char*)&emPacket.appData.devID;
//  608         
//  609         //da = emPacket.appData.data;
//  610         
//  611         //num = emPacket.timeStamp + 0x30;
//  612        // num = emPacket.appData.packNum + 0x30;
//  613         //num = emPacket.checkSum + 0x30;
//  614         
//  615         //id = (char*)&idde;
//  616         //id = (char*)&da;
//  617         //id = (char*)&num;
//  618         
//  619         //id[0] += 0x30;
//  620         //id[1] += 0x30;
//  621         
//  622         //id[2] = '\0';
//  623         //id[1] = '\0';
//  624         //id[4] = '\0';
//  625         
//  626         //HalLcdWriteString("-----------------------------Borislav----------------------",0);
//  627         //HalLcdWriteString(id,0);
//  628         //uartSend(emPacket.checkSum+'0');
//  629         //HalLcdWriteString("", 0);
//  630         //HalLcdWriteString("-----------------------------Borislav----------------------",0);
//  631 
//  632 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock96

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dllInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dllInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CallBackRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CallBackRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??getSignalAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getSignalAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??processFrame::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packFrameToStell::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packFrameToStell

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dllDataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dllDataRequest

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {48, 48, 48, 48}>`:
        DATA8
        DB 48
        DB 48
        DB 48
        DB 48

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {48, 48, 48, 48}>_1`:
        DATA8
        DB 48
        DB 48
        DB 48
        DB 48

        END
// 
// 1 281 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//    26 bytes in segment XDATA_ROM_C
// 1 308 bytes in segment XDATA_Z
// 
//    36 bytes of CODE     memory
//    26 bytes of CONST    memory
// 1 281 bytes of HUGECODE memory
// 1 308 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
