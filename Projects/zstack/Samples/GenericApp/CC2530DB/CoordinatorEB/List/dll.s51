///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               04/May/2017  14:07:09
// Copyright 2004-2016 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\dll.c
//    Command line       =  
//        -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Components\dll\src\dll.c" -D ZTOOL_P1 -D
//        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
//        "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\ljuic\Desktop\New
//        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\dll.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME dll

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_read", "assign_suppressions,scansets"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R4567
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R4567
        EXTERN __INIT_XDATA_Z

        PUBLIC `??CallBackRegister::?relay`
        FUNCTION `??CallBackRegister::?relay`,0203H
        PUBLIC `??dllDataRequest::?relay`
        FUNCTION `??dllDataRequest::?relay`,0203H
        PUBLIC `??dllInit::?relay`
        FUNCTION `??dllInit::?relay`,0203H
        FUNCTION `??packFrameToStell::?relay`,0203H
        PUBLIC `??processFrameRx::?relay`
        FUNCTION `??processFrameRx::?relay`,0203H
        PUBLIC CallBackRegister
        FUNCTION CallBackRegister,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC cTxBufferCC2530
        PUBLIC dllDataRequest
        FUNCTION dllDataRequest,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC dllInit
        FUNCTION dllInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC emFlagCC2530
        FUNCTION packFrameToStell,080203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC processFrameRx
        FUNCTION processFrameRx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC recPack
        PUBLIC rxBufferCC2530
        PUBLIC rxBufferCC2530Index
        PUBLIC rxBufferPC
        PUBLIC stateCC2530
        PUBLIC tmpCC2530
        PUBLIC txBufferCC2530Index
        PUBLIC uiRxBufferCC2530
        PUBLIC uiTxBufferCC2530
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
circularInit        SYMBOL "circularInit"
`??circularInit::?relay` SYMBOL "?relay", circularInit
sscanf              SYMBOL "sscanf"
`??sscanf::?relay`  SYMBOL "?relay", sscanf
CallBackRegister    SYMBOL "CallBackRegister"
`??CallBackRegister::?relay` SYMBOL "?relay", CallBackRegister
dllDataRequest      SYMBOL "dllDataRequest"
`??dllDataRequest::?relay` SYMBOL "?relay", dllDataRequest
dllInit             SYMBOL "dllInit"
`??dllInit::?relay` SYMBOL "?relay", dllInit
processFrameRx      SYMBOL "processFrameRx"
`??processFrameRx::?relay` SYMBOL "?relay", processFrameRx

        EXTERN `??circularInit::?relay`
        FUNCTION `??circularInit::?relay`,00H
        EXTERN `??sscanf::?relay`
        FUNCTION `??sscanf::?relay`,00H
        EXTERN circularInit
        FUNCTION circularInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sscanf
        FUNCTION sscanf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\dll\src\dll.c
//    1 #include "includes/dll.h"
//    2 //#include "hal/includes/hal_gpio.h"
//    3 #include "includes/defines.h"
//    4 #include "hal_uart.h"
//    5 #include "includes/circular_buffer.h"
//    6 
//    7 #include "hal_lcd.h"
//    8 #include "OnBoard.h"
//    9 //#include <stdlib.h>
//   10 //#include "stdlib.h"
//   11 //#include "cmsis_os.h"
//   12 
//   13 #include <stdio.h>
//   14 //#include <stdint.h>
//   15 //#include <stdlib.h>
//   16 #include "hal_types.h"
//   17 //*****************************************************************************
//   18 //
//   19 // A mapping of devices IDs to signal_id number.
//   20 //
//   21 //*****************************************************************************

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   22 static const uint16 signalID[] = {
signalID:
        DATA16
        DW 12884
        DW 4370
        DW 12880
        DW 4372
        DW 12872
        DW 4374
        DW 4375
        DW 4376
        DW 4377
//   23                                   TEMP_SENSOR_INSIDE,
//   24                                   TEMP_SENSOR_OUTSIDE,
//   25                                   PRESSURE_SENSOR_INSIDE,
//   26                                   PRESSURE_SENSOR_OUTSIDE,
//   27                                   HUMIDITY_SENSOR_INSIDE,
//   28                                   HUMIDITY_SENSOR_OUTSIDE,
//   29                                   DOOR,
//   30                                   WINDOW,
//   31                                   MOTION_SENSOR
//   32                                   };
//   33 
//   34 
//   35 
//   36 
//   37 //*****************************************************************************
//   38 //
//   39 // Internal/local functions
//   40 // \just defining functionality/
//   41 //
//   42 //*****************************************************************************
//   43 static uint8 getSignalID(const uint16 devicesAddress);
//   44 static uint8 checksum(DLLPacket_t *frame);
//   45 
//   46 //static uint8 processFrameRx(uint8 *frame, uint8 len, uint16 Address);
//   47 //static uint8 devAddressSupport(uint16 devAddress);
//   48 
//   49 
//   50 //static uint8 halUARTWrite(CircularBuffer_t *txBuffer, uint8 len);
//   51 static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket);
//   52 //*****************************************************************************
//   53 //
//   54 // CMSIS-RTOS tread definition and tread  function declaration
//   55 //
//   56 //*****************************************************************************
//   57 /*
//   58 void communicationThread(void const *arg);
//   59 osThreadId tID_PC_Communication;
//   60 osThreadId tID_CC2530_Communication;
//   61 */
//   62 
//   63 //*****************************************************************************
//   64 //
//   65 // Extern variables
//   66 //
//   67 // treba promijeniti naziv ova dva bafera u circularBuffer.h
//   68 //
//   69 //*****************************************************************************

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 CircularBuffer_t rxBufferPC;
rxBufferPC:
        DS 260
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   71 CircularBuffer_t rxBufferCC2530;
rxBufferCC2530:
        DS 260
        REQUIRE __INIT_XDATA_Z
//   72 
//   73 //halUARTCfg_t uartConfig;
//   74 //*****************************************************************************
//   75 //
//   76 // Local variables
//   77 //
//   78 //*****************************************************************************
//   79 //DLLState_t statePC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 DLLState_t stateCC2530;
stateCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   81 //uint8 emFlagPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 uint8 emFlagCC2530;
emFlagCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   83 
//   84 //char uiTxBufferPC[MAX_BUFFER_LENGHT];
//   85 //uint8 uiRxBufferPC[MAX_BUFFER_LENGHT];
//   86 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   87 char uiTxBufferCC2530[MAX_BUFFER_LENGHT];
uiTxBufferCC2530:
        DS 256
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 uint8 uiRxBufferCC2530[MAX_BUFFER_LENGHT];
uiRxBufferCC2530:
        DS 256
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 //uint8 rxBufferPCIndex;
//   91 //uint8 txBufferPCIndex;
//   92 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   93 uint8 rxBufferCC2530Index;
rxBufferCC2530Index:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 txBufferCC2530Index;
txBufferCC2530Index:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   95 
//   96 //uint8 tmpPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 uint8 tmpCC2530;
tmpCC2530:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   98 
//   99 //CircularBuffer_t cTxBufferPC;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 CircularBuffer_t cTxBufferCC2530;
cTxBufferCC2530:
        DS 260
        REQUIRE __INIT_XDATA_Z
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 DLLPacket_t recPack;
recPack:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  103 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  104 static CallBack_t callBack;
callBack:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  105 
//  106 //*****************************************************************************
//  107 //
//  108 // Function definition
//  109 //
//  110 //*****************************************************************************
//  111 
//  112 //*****************************************************************************
//  113 //
//  114 //! Data link layer initialization function
//  115 //!
//  116 //! This function initializes states and indexes,
//  117 //! configures communication ports, one of \b PC or \b CC2530 and their
//  118 //! baudrates, one of \b BAUDRATE_PC \b BAUDRATE_CC2530. Creates two threads
//  119 //! for communication wia UART interface.
//  120 //!
//  121 //! \return None.
//  122 //
//  123 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  124 void dllInit(void)
dllInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function dllInit
        CODE
//  125 {
        FUNCALL dllInit, circularInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  126 	//osThreadDef(communicationThread, osPriorityHigh, 2, 0);
//  127 
//  128 	//uint8 portPC = PC;
//  129 	//uint8 portCC2530 = CC2530;
//  130 
//  131 	//statePC = IDLE;
//  132 	stateCC2530 = IDLE;
        MOV     DPTR,#stateCC2530
        CLR     A
        MOVX    @DPTR,A
//  133 	//rxBufferPCIndex = 0;
//  134 	//txBufferPCIndex = 0;
//  135 	rxBufferCC2530Index = 0;
        MOV     DPTR,#rxBufferCC2530Index
        MOVX    @DPTR,A
//  136 	txBufferCC2530Index = 0;
        MOV     DPTR,#txBufferCC2530Index
        MOVX    @DPTR,A
//  137 
//  138 	//circularInit(&cTxBufferPC);
//  139 	circularInit(&cTxBufferCC2530);
        ; Setup parameters for call to function circularInit
        MOV     R2,#cTxBufferCC2530 & 0xff
        MOV     R3,#(cTxBufferCC2530 >> 8) & 0xff
        LCALL   `??circularInit::?relay`; Banked call to: circularInit
//  140         
//  141        // HalUARTClose(HAL_UART_PORT_1);
//  142         //HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
//  143         
//  144         /*CircularBuffer_t *cRxBuffer;
//  145 	CircularBuffer_t *cTxBuffer;
//  146         cRxBuffer = &rxBufferCC2530;
//  147         cTxBuffer = &cTxBufferCC2530;
//  148         */
//  149      /*   
//  150         
//  151         uint8 port  = *(uint8 *)(arg);
//  152 	uint8 *tmp;
//  153 	uint8 *rxBuffer;
//  154         uint8 *txBuffer;
//  155 	uint8 *txIndex;
//  156 	uint8 *rxIndex;
//  157 	uint8 *emFlag;
//  158 	DLLState_t *state;
//  159 	CircularBuffer_t *cRxBuffer;
//  160 	CircularBuffer_t *cTxBuffer;
//  161         
//  162         tmp = &tmpCC2530;
//  163         state = &stateCC2530;
//  164         txBuffer = (uint8 *)uiTxBufferCC2530;
//  165         rxBuffer = uiRxBufferCC2530;
//  166         txIndex = &txBufferCC2530Index;
//  167         rxIndex = &rxBufferCC2530Index;
//  168         emFlag = &emFlagCC2530;
//  169         cRxBuffer = &rxBufferCC2530;
//  170         cTxBuffer = &cTxBufferCC2530;
//  171 */
//  172 	//halUARTOpenPort(PC, BAUDRATE_PC , 1, 0);
//  173 	//halUARTOpenPort(CC2530, BAUDRATE_CC2530, 1, 0);
//  174         
//  175         
//  176         ////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  177         // Ovdje treba initUart
//  178         ////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  179 
//  180 	//tID_PC_Communication = osThreadCreate( osThread(communicationThread), (void *)(&portPC));
//  181 	//tID_CC2530_Communication = osThreadCreate( osThread(communicationThread), (void *)(&portCC2530));
//  182 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  183 
//  184 //*****************************************************************************
//  185 //
//  186 //! Register callback function.
//  187 //!
//  188 //! \param cb is pointer on the function.
//  189 //!
//  190 //! \return None.
//  191 //
//  192 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  193 void CallBackRegister(CallBack_t cb)
CallBackRegister:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function CallBackRegister
        CODE
//  194 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  195 	callBack = cb;
        MOV     DPTR,#callBack
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  196 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock2
//  197 
//  198 //*****************************************************************************
//  199 //
//  200 //! Function handles comminucation. Handles RX or TX on active ports.
//  201 //!
//  202 //! \param arg is pointer on port.
//  203 //!
//  204 //! This function sends data from app layer forward and delivers data to app
//  205 //! layer.
//  206 //!
//  207 //! \return None.
//  208 //
//  209 //*****************************************************************************
//  210 /*
//  211 void communicationThread(void const *arg)
//  212 {
//  213 	uint8 port  = *(uint8 *)(arg);
//  214 	uint8 *tmp;
//  215 	uint8 *rxBuffer;
//  216         uint8 *txBuffer;
//  217 	uint8 *txIndex;
//  218 	uint8 *rxIndex;
//  219 	uint8 *emFlag;
//  220 	DLLState_t *state;
//  221 	CircularBuffer_t *cRxBuffer;
//  222 	CircularBuffer_t *cTxBuffer;
//  223 
//  224 	if (PC == port)
//  225 	{
//  226 		tmp = &tmpPC;
//  227 		state = &statePC;
//  228 		txBuffer = (uint8 *)uiTxBufferPC;
//  229 		rxBuffer = uiRxBufferPC;
//  230 		txIndex = &txBufferPCIndex;
//  231 		rxIndex = &rxBufferPCIndex;
//  232 		emFlag = &emFlagPC;
//  233 		cRxBuffer = &rxBufferPC;
//  234 		cTxBuffer = &cTxBufferPC;
//  235 	}
//  236 	else if (CC2530 == port)
//  237 	{
//  238   	tmp = &tmpCC2530;
//  239 		state = &stateCC2530;
//  240 		txBuffer = (uint8 *)uiTxBufferCC2530;
//  241 		rxBuffer = uiRxBufferCC2530;
//  242 		txIndex = &txBufferCC2530Index;
//  243 		rxIndex = &rxBufferCC2530Index;
//  244 		emFlag = &emFlagCC2530;
//  245 		cRxBuffer = &rxBufferCC2530;
//  246 		cTxBuffer = &cTxBufferCC2530;
//  247 	}
//  248 
//  249 	while (1)
//  250 	{
//  251 		osDelay(10);
//  252 		switch ((*state))
//  253 		{
//  254 			case IDLE:
//  255 				if (circularGet(cRxBuffer, tmp))	//zastita!!!
//  256 				{
//  257 					if (START_DELIMITER == (*tmp))
//  258 					{
//  259 						*rxIndex = 0;
//  260 						*state = RECEPTION;
//  261 					}
//  262 					else
//  263 					{
//  264 						*state = IDLE;
//  265 
//  266 					}
//  267 				}
//  268 				else if (EMISSION_START == (*emFlag))
//  269 				{
//  270 					*state = EMISSION;
//  271 				}
//  272 
//  273 				else
//  274 				{
//  275 					*state = IDLE;
//  276 
//  277 				}
//  278 				break;
//  279 			case RECEPTION:
//  280 				do
//  281 				{
//  282 					if (circularGet(cRxBuffer, tmp)) // zastita!!!
//  283 					{
//  284 						if (START_DELIMITER == (*tmp))
//  285 						{
//  286 							*rxIndex = 0;
//  287 						}
//  288 						else
//  289 						{
//  290 							rxBuffer[(*rxIndex)++] = *tmp;
//  291 						}
//  292 					}
//  293 				} while(STOP_DELIMITER != *tmp);
//  294 				*state = IDLE;				//
//  295 				processFrameRx(rxBuffer, *rxIndex, port);
//  296 			break;
//  297 			case EMISSION:
//  298 				array2circular(cTxBuffer, txBuffer, *txIndex);
//  299 				halUARTWrite(port, cTxBuffer, 0);
//  300 				*txIndex = 0;
//  301 				*state = IDLE;
//  302 			break;
//  303 			default:
//  304 				// error state!!!
//  305 			break;
//  306 		}
//  307 	}
//  308 }
//  309 */
//  310 //*****************************************************************************
//  311 //
//  312 //! Get the signal ID.
//  313 //!
//  314 //! \param deviceAddress is device address.
//  315 //!
//  316 //! For given a device address, this function returns the corresponding
//  317 //! signal ID.
//  318 //!
//  319 //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
//  320 //
//  321 //*****************************************************************************
//  322 static uint8 getSignalID(const uint16 deviceAddress)
//  323 {
//  324 	uint8 i;
//  325         //uint8 j;
//  326         char *id;
//  327         //char idde;
//  328         uint16 idde;
//  329         
//  330 	uint8 retVal = 255;
//  331 	for (i = 0; i < sizeof(signalID); i+=2)
//  332 	{
//  333             
//  334 		if (deviceAddress == signalID[i])
//  335 		{
//  336 			retVal = i;
//  337                         
//  338                         
//  339 		}
//  340                 //idde = deviceAddress;//i + 0x30;//signalID[i];
//  341                 idde = signalID[i];//i + 0x30;//signalID[i];
//  342                 id = (char*)&idde;
//  343                 //id[0] = idde;
//  344                // id[1] = '\0';
//  345                 id[2] = '\0';
//  346                 //HalLcdWriteString("-----------------------------SignalID----------------------",0);
//  347                // HalLcdWriteString(id,0);
//  348                 /*for(j=0;j<3;j++)
//  349                 {
//  350                   uartSend(*(id + j));
//  351                   
//  352                 }*/
//  353                 //HalLcdWriteString("-----------------------------SignalID----------------------",0);
//  354                 idde = deviceAddress;//i + 0x30;
//  355                 //signalID[i];id = (char*)&idde;
//  356                 //HalLcdWriteString("-----------------------------deviceAddress----------------------",0);
//  357                 //HalLcdWriteString(id,0);
//  358                 /*for(j=0;j<3;j++)
//  359                 {
//  360                   uartSend(*(id + j));
//  361                   
//  362                 }*/
//  363                 //HalLcdWriteString("-----------------------------deviceAddress----------------------",0);
//  364 	}
//  365 	return retVal;
//  366 }
//  367 
//  368 //*****************************************************************************
//  369 //
//  370 //! Process received data.
//  371 //!
//  372 //! \param frame is pointer on the received frame.
//  373 //! \param len is lenght of received frame.
//  374 //! \param port is number of port.
//  375 //!
//  376 //! Function process received frame, converts, checks checksum and validation
//  377 //! of signal ID (supported devices)
//  378 //!
//  379 //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
//  380 //
//  381 //*****************************************************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  382 uint16 processFrameRx(uint8 *frame)
processFrameRx:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function processFrameRx
        CODE
//  383 {
        FUNCALL processFrameRx, sscanf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  384 	Data_t *cbData;
//  385 	int iSignalID;
//  386 	int iData;
//  387 	int iPackNum;
//  388 	int iTimeStamp;
//  389 	int iCheckSum;
//  390 	sscanf((char *)frame, 
//  391                "%*[^0123456789]%d%*[^0123456789]%d%*[^0123456789]%d%*[^0123456789]%d%*[^0123456789]%d",
//  392                        &iSignalID,
//  393                        &iPackNum,
//  394                        &iData,
//  395                        &iTimeStamp,
//  396                        &iCheckSum
//  397                        );
        ; Setup parameters for call to function sscanf
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#`?<Constant "%*[^0123456789]%d%*[^...">` & 0xff
        MOV     R5,#(`?<Constant "%*[^0123456789]%d%*[^...">` >> 8) & 0xff
        LCALL   `??sscanf::?relay`   ; Banked call to: sscanf
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  398 	recPack.appData.devID = signalID[iSignalID];
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ADD     A,R0
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#signalID & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(signalID >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#recPack
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  399 	recPack.appData.packNum = (uint32)iPackNum & 0xff;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#recPack + 2
        MOVX    @DPTR,A
//  400 	recPack.appData.data = (uint32)iData & 0xffffffff;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R6,A
        MOV     DPTR,#recPack + 3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  401 	recPack.timeStamp = (uint32)iTimeStamp & 0xff;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#recPack + 7
        MOVX    @DPTR,A
//  402 	recPack.checkSum = (uint32)iCheckSum & 0xff;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#recPack + 8
        MOVX    @DPTR,A
//  403 
//  404 	cbData = (struct sData *)(&recPack);
//  405 
//  406 
//  407 //if (checksum(recPack) == recPack->checkSum)
//  408 //{
//  409 //	if (devAddressSupport(recPack->appData.devID))
//  410 //	{
//  411 			callBack(cbData);
        ; Setup parameters for indirect call
        MOV     R2,#recPack & 0xff
        MOV     R3,#(recPack >> 8) & 0xff
        MOV     DPTR,#callBack
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  412 
//  413 //	}
//  414 		//return 1;
//  415                 return recPack.appData.devID;
        MOV     DPTR,#recPack
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xa
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  416 //}
//  417 //else
//  418 //{
//  419 //	error_checkSum();
//  420 //	recPack = NULL;
//  421 //	return 0;
//  422 //}
//  423 
//  424 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  425 
//  426 
//  427 //*****************************************************************************
//  428 //
//  429 //! Calculating checksum.
//  430 //!
//  431 //! \param frame is pointer on frame on which one is needed to calculated.
//  432 //!
//  433 //! Function caluculates checksum executing XOR operation on evert member of
//  434 //! \b frame.
//  435 //!
//  436 //! \return Returns result of sumary operation.
//  437 //
//  438 //*****************************************************************************
//  439 static uint8 checksum(DLLPacket_t *frame)
//  440 {
//  441 	uint8 sum  = 0x00;
//  442 	uint8 *ptr = (uint8 *)(frame);
//  443 	uint8 *end = &frame->checkSum;
//  444 	while(ptr != end)
//  445 	{
//  446 		sum ^= *ptr;
//  447 		ptr++;
//  448 	}
//  449 
//  450 	return sum;
//  451 
//  452 }
//  453 
//  454 //*****************************************************************************
//  455 //
//  456 //! Checks a devices address.
//  457 //!
//  458 //! \param devAddress is device address.
//  459 //!
//  460 //! This function determines if a device address is supported.
//  461 //!
//  462 //! \return Returns \b true if address is supported, or \b false otherwise.
//  463 //
//  464 //*****************************************************************************
//  465 /*
//  466 static uint8 devAddressSupport(uint16 devAddress)
//  467 {
//  468 	return( (devAddress == TEMP_SENSOR_INSIDE) ||
//  469 					(devAddress == TEMP_SENSOR_OUTSIDE) ||
//  470 					(devAddress == PRESSURE_SENSOR_INSIDE) ||
//  471  					(devAddress == PRESSURE_SENSOR_OUTSIDE) ||
//  472 					(devAddress == HUMIDITY_SENSOR_INSIDE) ||
//  473 					(devAddress == HUMIDITY_SENSOR_OUTSIDE) ||
//  474 					(devAddress == DOOR) ||
//  475 					(devAddress == WINDOW) ||
//  476 					(devAddress == MOTION_SENSOR)
//  477 					);
//  478 }
//  479 */
//  480 //*****************************************************************************
//  481 //
//  482 //! Function that handles data services.
//  483 //!
//  484 //! \param aData is pointer on data structure.
//  485 //! \param port indicates port number.
//  486 //!
//  487 //! This function prepare data to be ready to send and sets state flag to
//  488 //! signals the thread to perform an action.
//  489 //!
//  490 //! \return None.
//  491 //
//  492 //*****************************************************************************
//  493 /*
//  494 static uint8 halUARTWrite(CircularBuffer_t *txBuffer, uint8 len)
//  495 {
//  496 	uint8 cnt = 0;
//  497 	uint8 i;
//  498 	uint8 data;
//  499 
//  500 	if (0 == len)
//  501 	{
//  502 		while(!circularIsEmpty(txBuffer))
//  503 		{
//  504 			circularGet(txBuffer, &data);
//  505                         uartSend(data);
//  506 			cnt++;
//  507 
//  508 		}// end while
//  509 	}// end if
//  510 
//  511 	else if (len < circularSize(txBuffer))
//  512 	{
//  513 		for (i = 0; i < len; i++)
//  514 		{
//  515 			circularGet(txBuffer, &data);
//  516 			uartSend(data);
//  517 		}// end for
//  518 		cnt = i;
//  519 
//  520 	}// end else if
//  521 
//  522 	else
//  523 	{
//  524 		// error_uart();
//  525 
//  526 	}// end else
//  527 
//  528 	return cnt;
//  529 }
//  530 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  531 static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket)
packFrameToStell:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function packFrameToStell
        CODE
//  532 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  533   
//  534   
//  535   //uint32 da;
//  536   
//  537   int i = 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  538   int j = 0;
        MOV     ?V2,R2
        MOV     ?V3,R2
//  539   int k = 0;
//  540   uint8 *pBuf = buff;
//  541  
//  542   uint32 pom = emPacket.appData.data;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
//  543   
//  544   
//  545   char dat[4] = {'0','0','0','0'};
        MOV     DPTR,#`?<Constant {48, 48, 48, 48}>`
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  546   char daaat[4] = {'0','0','0','0'};
        MOV     DPTR,#`?<Constant {48, 48, 48, 48}>_1`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        SJMP    ??packFrameToStell_0
//  547  // char *id; //= dat;
//  548   
//  549  
//  550     while(pom)
//  551     {
//  552       dat[i] = (pom % 16) + '0';
??packFrameToStell_1:
        MOV     ?V0,?V4
        MOV     A,?V0
        ANL     A,#0xf
        ADD     A,#0x30
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  553       pom/=256;
        CLR     A
        XCH     A,?V7
        XCH     A,?V6
        XCH     A,?V5
        MOV     ?V4,A
//  554       i++;
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_0
        INC     R3
//  555     }
??packFrameToStell_0:
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??packFrameToStell_1
//  556   
//  557     k = 4 - i;
        MOV     A,#0x4
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        CLR     A
        SUBB    A,R3
        MOV     R1,A
//  558     for(j = 0; j < k; j++)
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JC      ??packFrameToStell_2
//  559     {
//  560       daaat[j] = '0';
        MOV     R4,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??packFrameToStell_3:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        ORL     A,R2
        JNZ     ??packFrameToStell_3
//  561       
//  562     }
        MOV     ?V2,R2
        MOV     ?V3,R3
//  563     i = 0;
??packFrameToStell_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??packFrameToStell_4
//  564     for(; j < 4; j++)
//  565     {   
//  566       daaat[k] = dat[i];
??packFrameToStell_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  567       k++;
        INC     R0
        MOV     A,R0
        JNZ     ??packFrameToStell_6
        INC     R1
//  568       i++;
??packFrameToStell_6:
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_7
        INC     R3
//  569       
//  570     }
??packFrameToStell_7:
        INC     ?V2
        MOV     A,?V2
        JNZ     ??packFrameToStell_4
        INC     ?V3
??packFrameToStell_4:
        CLR     C
        MOV     A,?V2
        SUBB    A,#0x4
        MOV     A,?V3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        JC      ??packFrameToStell_5
//  571  
//  572       //uint8 len = 1 + 1 + 4 + 1 + 1;
//  573   *pBuf++ = 0x3E;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x3e
        MOVX    @DPTR,A
//  574   
//  575   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  576   
//  577   
//  578   *pBuf++ = getSignalID(emPacket.appData.devID) + 0x30;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R7,#-0x1
        MOV     R6,#0x0
??packFrameToStell_8:
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#signalID & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(signalID >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??packFrameToStell_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??packFrameToStell_9:
        JNZ     ??packFrameToStell_10
        MOV     A,R6
        MOV     R7,A
??packFrameToStell_10:
        MOV     A,#0x2
        ADD     A,R6
        MOV     R6,A
        CLR     C
        SUBB    A,#0x12
        JC      ??packFrameToStell_8
        MOV     A,#0x30
        ADD     A,R7
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  579   
//  580   *pBuf++ = 0x2C;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x2c
        MOVX    @DPTR,A
//  581   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  582   
//  583   
//  584   *pBuf++ = emPacket.appData.packNum + 0x30;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  585   
//  586   *pBuf++ = 0x2C;
//  587   *pBuf++ = 0x23;
??CrossCallReturnLabel_0:
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        JNC     ??packFrameToStell_11
        INC     R1
//  588   
//  589   
//  590   for(i = 0; i < 4; i++)
??packFrameToStell_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  591   {
//  592     *pBuf++ =daaat[i] ;
??packFrameToStell_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine5 & 0xFFFF
//  593      //uartSend(data[i]);//+'0');
//  594     //HalLcdWriteString((char *)data[i], 0);
//  595     //HalLcdWriteString("-----------Simic-----------", 0);
//  596   }
??CrossCallReturnLabel_8:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        INC     R2
        MOV     A,R2
        JNZ     ??packFrameToStell_13
        INC     R3
??packFrameToStell_13:
        CLR     C
        SUBB    A,#0x4
        MOV     A,R3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      ??packFrameToStell_12
//  597   
//  598   *pBuf++ = 0x2C;
        MOV     A,#0x2c
        MOVX    @DPTR,A
//  599   *pBuf++ = 0x23;
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  600   
//  601   
//  602   *pBuf++ = emPacket.timeStamp + 0x30;  
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  603   
//  604   *pBuf++ = 0x2C;
//  605   *pBuf++ = 0x23;
//  606   
//  607   
//  608   *pBuf++ = emPacket.checkSum + 0x30;
??CrossCallReturnLabel_1:
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
//  609   *pBuf++ = 0x3C;
??CrossCallReturnLabel_2:
        MOV     A,#0x3c
        LCALL   ?Subroutine3 & 0xFFFF
//  610   *pBuf++ = 0x00;
??CrossCallReturnLabel_3:
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  611   /*
//  612   da = emPacket.appData.data;
//  613   id = (char*)&da;
//  614   id[4] = '\0';
//  615   HalLcdWriteString("-----------------------------Paket----------------------",0);
//  616   HalLcdWriteString(id,0);
//  617   HalLcdWriteString("-----------------------------Paket----------------------",0);
//  618   */
//  619 } 
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function packFrameToStell
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function packFrameToStell
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_7
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function packFrameToStell
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_8
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,DPL
        ADD     A,R2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function packFrameToStell
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function packFrameToStell
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function packFrameToStell
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function packFrameToStell
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#0x2c
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,#0x23
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function packFrameToStell
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_0
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function packFrameToStell
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_1
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-4
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function packFrameToStell
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_3
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function packFrameToStell
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_0
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function packFrameToStell
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_1
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     DPTR
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function packFrameToStell
          CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function packFrameToStell
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function packFrameToStell
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_2
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-6
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function packFrameToStell
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_3
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-6
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function packFrameToStell
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_0
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-6
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function packFrameToStell
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_1
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-6
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
//  620 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  621 void dllDataRequest(Data_t *aData)
dllDataRequest:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function dllDataRequest
        CODE
//  622 {
        FUNCALL dllDataRequest, packFrameToStell
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  623         //char *id;
//  624         //uint16 idde;
//  625         //uint8 num;
//  626         //uint32 da;
//  627         /*
//  628         int iSignalID;
//  629 	int iData;
//  630 	int iPackNum;
//  631 	int iTimeStamp;
//  632 	int iCheckSum;
//  633         */
//  634         //uint8 *txBuffer;
//  635         //uint8 *txIndex;
//  636         //CircularBuffer_t *cTxBuffer;
//  637         
//  638 	DLLPacket_t emPacket;
//  639 	//emPacket.appData = *aData;
//  640         //emPacket.appData = aData;
//  641         
//  642         emPacket.appData.devID = aData->devID;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  643         emPacket.appData.data = aData->data;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R4567
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R4567
//  644         emPacket.appData.packNum = aData->packNum;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  645         emPacket.timeStamp = 0;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  646 	emPacket.checkSum = checksum(&emPacket);
        MOV     R2,#0x0
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
??dllDataRequest_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XCH     A,R2
        XRL     A,R2
        MOV     R2,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??dllDataRequest_1
        MOV     A,DPH
        XRL     A,R1
??dllDataRequest_1:
        JNZ     ??dllDataRequest_0
        MOV     A,R2
        MOVX    @DPTR,A
//  647         
//  648         //txBuffer = (uint8 *)uiTxBufferCC2530;
//  649         //cTxBuffer = &cTxBufferCC2530;
//  650         //txBuffer = (uint8 *)uiTxBufferCC2530;
//  651         //txIndex = &txBufferCC2530Index;
//  652 	// ako bude bilo potrebe za slanjem vremenskog trenutka
//  653 	// radi iscrtavanja grafa obezbjedicemo mehanizam, inace
//  654 	// timeStamp = 0
//  655 	/*
//  656         iSignalID = (int)getSignalID(emPacket.appData.devID);
//  657 	iData = (int)emPacket.appData.data;
//  658 	iPackNum = (int)emPacket.appData.packNum;
//  659 	iTimeStamp = (int)emPacket.timeStamp;
//  660 	iCheckSum = (int)emPacket.checkSum;
//  661         */
//  662         /*
//  663         iSignalID = (unsigned)getSignalID(emPacket.appData.devID);
//  664 	iData = (unsigned)emPacket.appData.data;
//  665 	iPackNum = (unsigned)emPacket.appData.packNum;
//  666 	iTimeStamp = (unsigned)emPacket.timeStamp;
//  667 	iCheckSum = (unsigned)emPacket.checkSum;
//  668         */
//  669         
//  670 	 //HalLcdWriteString("Miso----------------------",0);
//  671         /*
//  672         txBufferCC2530Index = sprintf(uiTxBufferCC2530,
//  673                                       ">#%d,#%c,#%l,#%c,#%c",
//  674                                       getSignalID(emPacket.appData.devID),
//  675                                       emPacket.appData.packNum,
//  676                                       emPacket.appData.data,
//  677                                       emPacket.timeStamp,
//  678                                       emPacket.checkSum
//  679                                       );
//  680         */
//  681         /*
//  682         txBufferCC2530Index = sprintf(uiTxBufferCC2530,
//  683                                       ">#%d,#%d,#%d,#%d,#%d",
//  684                                       iSignalID,
//  685                                       iPackNum,
//  686                                       iData,
//  687                                       iTimeStamp,
//  688                                       iCheckSum
//  689                                       );
//  690         */
//  691         packFrameToStell((uint8 *)uiTxBufferCC2530, emPacket);
        ; Setup parameters for call to function packFrameToStell
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x9
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R2,#uiTxBufferCC2530 & 0xff
        MOV     R3,#(uiTxBufferCC2530 >> 8) & 0xff
        LCALL   `??packFrameToStell::?relay`; Banked call to: packFrameToStell
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  692         //array2circular(cTxBuffer, txBuffer, *txIndex);
//  693         
//  694         /*HalLcdWriteString("Velicina je:",0);
//  695         uartSend(sizeof(uint32)+'0');
//  696         HalLcdWriteString("",0);
//  697         HalLcdWriteString("Velicina je:",0);
//  698         */
//  699         //halUARTWrite(cTxBuffer, 0);
//  700         //HalLcdWriteString("Miso----------------------",0); 
//  701         
//  702        // halUARTWrite(port, cTxBuffer, 0);
//  703         
//  704        // HalLcdWriteString(uiTxBufferCC2530, 0);
//  705         
//  706         
//  707         //HalUARTWrite(HAL_UART_PORT_1, (uint8 *)uiTxBufferCC2530, 19);
//  708         
//  709         //HalLcdWriteString(uiTxBufferCC2530, 0);
//  710         
//  711 	emFlagCC2530 = EMISSION_START;
        MOV     DPTR,#emFlagCC2530
        MOV     A,#0x1
        MOVX    @DPTR,A
//  712 	
//  713 	//idde = emPacket.appData.devID;//
//  714         
//  715         //idde = aData->devID;
//  716         
//  717         //idde = (uint16)getSignalID(emPacket.appData.devID);//+ 0x30;
//  718         
//  719         //idde = aData->devID;
//  720         //idde = aData.devID;
//  721         
//  722         //id = (char*)&emPacket.appData.data;
//  723         //id = (char*)&emPacket.appData.devID;
//  724         
//  725         //da = emPacket.appData.data;
//  726         
//  727         //num = emPacket.timeStamp + 0x30;
//  728        // num = emPacket.appData.packNum + 0x30;
//  729         //num = emPacket.checkSum + 0x30;
//  730         
//  731         //id = (char*)&idde;
//  732         //id = (char*)&da;
//  733         //id = (char*)&num;
//  734         
//  735         //id[0] += 0x30;
//  736         //id[1] += 0x30;
//  737         
//  738         //id[2] = '\0';
//  739         //id[1] = '\0';
//  740         //id[4] = '\0';
//  741         
//  742         //HalLcdWriteString("-----------------------------Borislav----------------------",0);
//  743         //HalLcdWriteString(id,0);
//  744         //uartSend(emPacket.checkSum+'0');
//  745         //HalLcdWriteString("", 0);
//  746         //HalLcdWriteString("-----------------------------Borislav----------------------",0);
//  747 
//  748 }
        MOV     A,#0x9
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock39

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dllInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dllInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CallBackRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CallBackRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??processFrameRx::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processFrameRx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packFrameToStell::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packFrameToStell

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dllDataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dllDataRequest

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%*[^0123456789]%d%*[^...">`:
        DB 25H, 2AH, 5BH, 5EH, 30H, 31H, 32H, 33H
        DB 34H, 35H, 36H, 37H, 38H, 39H, 5DH, 25H
        DB 64H, 25H, 2AH, 5BH, 5EH, 30H, 31H, 32H
        DB 33H, 34H, 35H, 36H, 37H, 38H, 39H, 5DH
        DB 25H, 64H, 25H, 2AH, 5BH, 5EH, 30H, 31H
        DB 32H, 33H, 34H, 35H, 36H, 37H, 38H, 39H
        DB 5DH, 25H, 64H, 25H, 2AH, 5BH, 5EH, 30H
        DB 31H, 32H, 33H, 34H, 35H, 36H, 37H, 38H
        DB 39H, 5DH, 25H, 64H, 25H, 2AH, 5BH, 5EH
        DB 30H, 31H, 32H, 33H, 34H, 35H, 36H, 37H
        DB 38H, 39H, 5DH, 25H, 64H, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {48, 48, 48, 48}>`:
        DATA8
        DB 48
        DB 48
        DB 48
        DB 48

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {48, 48, 48, 48}>_1`:
        DATA8
        DB 48
        DB 48
        DB 48
        DB 48

        END
// 
//   902 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//   112 bytes in segment XDATA_ROM_C
// 1 308 bytes in segment XDATA_Z
// 
//    30 bytes of CODE     memory
//   112 bytes of CONST    memory
//   902 bytes of HUGECODE memory
// 1 308 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
