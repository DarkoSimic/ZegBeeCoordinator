###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                03/May/2017  16:53:08
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\hal\target\CC2530EB\hal_uart.c" -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\hal_uart.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\hal_uart.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          ////////////////////////////////////////////////////////////////////////////////////// 
     44          //#include "hal_drivers.h"
     45          #include "GenericApp.h"
     46          #include "OSAL.h"
     47          ////////////////////////////////////////////////////////////////////////////////////// 
     48          
     49          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     50          #include "hal_defs.h"
     51          #include "hal_types.h"
     52          #include "hal_uart.h"
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * GLOBAL VARIABLES
     68           */
     69          extern halUARTCfg_t uartConfig;
     70          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          uint8 TX_BUFFER[128];
   \                     TX_BUFFER:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          uint8 RX_BUFFER[128];
   \                     RX_BUFFER:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
     73          
     74          
     75          /*********************************************************************
     76           * GLOBAL FUNCTIONS
     77           */
     78          
     79          /*********************************************************************
     80           * LOCAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          
     87          #if HAL_UART_DMA
     88          #include "_hal_uart_dma.c"
     89          #endif
     90          #if HAL_UART_ISR
     91          #include "_hal_uart_isr.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartISRCfg_t isrCfg
   \                     isrCfg:
   \   000000                DS 265
   \   000109                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTReadISR(uint8 *, uint16)
   \                     HalUARTReadISR:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   802E         SJMP    ??HalUARTReadISR_0
   \                     ??HalUARTReadISR_1:
   \   00000B   74..         MOV     A,#isrCfg & 0xff
   \   00000D   2E           ADD     A,R6
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   90....       MOV     DPTR,#isrCfg + 128
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   04           INC     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   C3           CLR     C
   \   00002B   9480         SUBB    A,#-0x80
   \   00002D   4005         JC      ??HalUARTReadISR_2
   \   00002F   90....       MOV     DPTR,#isrCfg + 128
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadISR_2:
   \   000034   08           INC     R0
   \   000035   E8           MOV     A,R0
   \   000036   7001         JNZ     ??HalUARTReadISR_0
   \   000038   09           INC     R1
   \                     ??HalUARTReadISR_0:
   \   000039   90....       MOV     DPTR,#isrCfg + 128
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FE           MOV     R6,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6E           XRL     A,R6
   \   000041   6007         JZ      ??HalUARTReadISR_3
   \   000043   C3           CLR     C
   \   000044   E8           MOV     A,R0
   \   000045   9C           SUBB    A,R4
   \   000046   E9           MOV     A,R1
   \   000047   9D           SUBB    A,R5
   \   000048   40C1         JC      ??HalUARTReadISR_1
   \                     ??HalUARTReadISR_3:
   \   00004A   E8           MOV     A,R0
   \   00004B   FA           MOV     R2,A
   \   00004C   E9           MOV     A,R1
   \   00004D   FB           MOV     R3,A
   \   00004E                REQUIRE ?Subroutine0
   \   00004E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTWriteISR(uint8 *, uint16)
   \                     HalUARTWriteISR:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   75..00       MOV     ?V4,#0x0
   \   000010   90....       MOV     DPTR,#isrCfg + 260
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   98           SUBB    A,R0
   \   000019   90....       MOV     DPTR,#isrCfg + 260
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   EA           MOV     A,R2
   \   000022   5010         JNC     ??HalUARTWriteISR_0
   \   000024   C3           CLR     C
   \   000025   98           SUBB    A,R0
   \   000026   F8           MOV     R0,A
   \   000027   95E0         SUBB    A,0xE0 /* A   */
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   24FF         ADD     A,#-0x1
   \   00002D   18           DEC     R0
   \   00002E   E9           MOV     A,R1
   \   00002F   34FF         ADDC    A,#-0x1
   \   000031   F9           MOV     R1,A
   \   000032   800D         SJMP    ??HalUARTWriteISR_1
   \                     ??HalUARTWriteISR_0:
   \   000034   C3           CLR     C
   \   000035   98           SUBB    A,R0
   \   000036   F8           MOV     R0,A
   \   000037   95E0         SUBB    A,0xE0 /* A   */
   \   000039   F9           MOV     R1,A
   \   00003A   E8           MOV     A,R0
   \   00003B   247F         ADD     A,#0x7f
   \   00003D   F8           MOV     R0,A
   \   00003E   5001         JNC     ??HalUARTWriteISR_1
   \   000040   09           INC     R1
   \                     ??HalUARTWriteISR_1:
   \   000041   C3           CLR     C
   \   000042   E8           MOV     A,R0
   \   000043   95..         SUBB    A,?V0
   \   000045   E9           MOV     A,R1
   \   000046   95..         SUBB    A,?V1
   \   000048   500F         JNC     ??HalUARTWriteISR_2
   \   00004A                ; Setup parameters for call to function HalLcdWriteString
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   7A..         MOV     R2,#`?<Constant "Miso-----------------...">` & 0xff
   \   00004E   7B..         MOV     R3,#(`?<Constant "Miso-----------------...">` >> 8) & 0xff
   \   000050   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B00         MOV     R3,#0x0
   \   000057   8077         SJMP    ??HalUARTWriteISR_3
   \                     ??HalUARTWriteISR_2:
   \   000059   75..00       MOV     ?V2,#0x0
   \   00005C   75..00       MOV     ?V3,#0x0
   \   00005F   8014         SJMP    ??HalUARTWriteISR_4
   \                     ??HalUARTWriteISR_5:
   \   000061   E0           MOVX    A,@DPTR
   \   000062   04           INC     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064                ; Setup parameters for call to function HalLcdWriteString
   \   000064   7900         MOV     R1,#0x0
   \   000066   7A..         MOV     R2,#`?<Constant "Savan----------------...">` & 0xff
   \   000068   7B..         MOV     R3,#(`?<Constant "Savan----------------...">` >> 8) & 0xff
   \                     ??HalUARTWriteISR_6:
   \   00006A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00006D   05..         INC     ?V2
   \   00006F   E5..         MOV     A,?V2
   \   000071   7002         JNZ     ??HalUARTWriteISR_4
   \   000073   05..         INC     ?V3
   \                     ??HalUARTWriteISR_4:
   \   000075   C3           CLR     C
   \   000076   E5..         MOV     A,?V2
   \   000078   95..         SUBB    A,?V0
   \   00007A   E5..         MOV     A,?V3
   \   00007C   95..         SUBB    A,?V1
   \   00007E   5042         JNC     ??HalUARTWriteISR_7
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   90....       MOV     DPTR,#isrCfg + 261
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   00008E   28           ADD     A,R0
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   000094   F583         MOV     DPH,A
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   A3           INC     DPTR
   \   00009E   AE82         MOV     R6,DPL
   \   0000A0   AF83         MOV     R7,DPH
   \   0000A2   90....       MOV     DPTR,#isrCfg + 262
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   90....       MOV     DPTR,#isrCfg + 261
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   C3           CLR     C
   \   0000AC   947F         SUBB    A,#0x7f
   \   0000AE   40B1         JC      ??HalUARTWriteISR_5
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2                ; Setup parameters for call to function HalLcdWriteString
   \   0000B2   F9           MOV     R1,A
   \   0000B3   7A..         MOV     R2,#`?<Constant "Simic----------------...">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "Simic----------------...">` >> 8) & 0xff
   \   0000B7   80B1         SJMP    ??HalUARTWriteISR_6
   \                     ??HalUARTWriteISR_8:
   \   0000B9   75F931       MOV     0xf9,#0x31
   \                     ??HalUARTWriteISR_9:
   \   0000BC   A2F8         MOV     C,0xf8.0
   \   0000BE   40FC         JC      ??HalUARTWriteISR_9
   \   0000C0   05..         INC     ?V4
   \                     ??HalUARTWriteISR_7:
   \   0000C2   C3           CLR     C
   \   0000C3   E5..         MOV     A,?V4
   \   0000C5   95..         SUBB    A,?V0
   \   0000C7   E4           CLR     A
   \   0000C8   95..         SUBB    A,?V1
   \   0000CA   40ED         JC      ??HalUARTWriteISR_8
   \   0000CC   AA..         MOV     R2,?V2
   \   0000CE   AB..         MOV     R3,?V3
   \                     ??HalUARTWriteISR_3:
   \   0000D0   7F05         MOV     R7,#0x5
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000D5                REQUIRE U1DBUF
   \   0000D5                REQUIRE _A_U1CSR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart1RxIsr(void)
   \                     halUart1RxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
   \   000007   A8F9         MOV     R0,0xf9+0x0
   \   000009   E8           MOV     A,R0
   \   00000A   C0E0         PUSH    A
   \   00000C   90....       MOV     DPTR,#isrCfg + 129
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   74..         MOV     A,#isrCfg & 0xff
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000019   F583         MOV     DPH,A
   \   00001B   D0E0         POP     A
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   90....       MOV     DPTR,#isrCfg + 128
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   68           XRL     A,R0
   \   000026   7006         JNZ     ??halUart1RxIsr_0
   \   000028   E595         MOV     A,0x95
   \   00002A   90....       MOV     DPTR,#isrCfg + 131
   \   00002D   F0           MOVX    @DPTR,A
   \                     ??halUart1RxIsr_0:
   \   00002E   90....       MOV     DPTR,#isrCfg + 129
   \   000031   E0           MOVX    A,@DPTR
   \   000032   04           INC     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   C3           CLR     C
   \   000035   9480         SUBB    A,#-0x80
   \   000037   4002         JC      ??halUart1RxIsr_1
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \                     ??halUart1RxIsr_1:
   \   00003B   A3           INC     DPTR
   \   00003C   74C6         MOV     A,#-0x3a
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F                ; Setup parameters for call to function halProcessUartInterrupt
   \   00003F   12....       LCALL   `??halProcessUartInterrupt::?relay`; Banked call to: halProcessUartInterrupt
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000047                REQUIRE U1DBUF
   \   000047                REQUIRE ST0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart1TxIsr(void)
   \                     halUart1TxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   90....       MOV     DPTR,#isrCfg + 260
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   68           XRL     A,R0
   \   000016   7008         JNZ     ??halUart1TxIsr_0
   \   000018   539AF7       ANL     0x9a,#0xf7
   \   00001B   A3           INC     DPTR
   \   00001C   7401         MOV     A,#0x1
   \   00001E   8022         SJMP    ??halUart1TxIsr_1
   \                     ??halUart1TxIsr_0:
   \   000020   C2EA         CLR     0xe8.2
   \   000022   90....       MOV     DPTR,#isrCfg + 260
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7401         MOV     A,#0x1
   \   000029   28           ADD     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   00002D   28           ADD     A,R0
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5F9         MOV     0xf9,A
   \   000038   90....       MOV     DPTR,#isrCfg + 260
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C3           CLR     C
   \   00003D   9480         SUBB    A,#-0x80
   \   00003F   4002         JC      ??halUart1TxIsr_2
   \   000041   E4           CLR     A
   \                     ??halUart1TxIsr_1:
   \   000042   F0           MOVX    @DPTR,A
   \                     ??halUart1TxIsr_2:
   \   000043   D083         POP     DPH
   \   000045   D082         POP     DPL
   \   000047   D0E0         POP     A
   \   000049   F9           MOV     R1,A
   \   00004A   D0E0         POP     A
   \   00004C   F8           MOV     R0,A
   \   00004D   D0D0         POP     PSW
   \   00004F   D0E0         POP     A
   \   000051   32           RETI
   \   000052                REQUIRE IEN2
   \   000052                REQUIRE _A_IRCON2
   \   000052                REQUIRE U1DBUF
     92          #endif
     93          #if HAL_UART_USB
     94          #include "_hal_uart_usb.c"
     95          #endif
     96          
     97          /******************************************************************************
     98           * @fn      HalUARTInit
     99           *
    100           * @brief   Initialize the UART
    101           *
    102           * @param   none
    103           *
    104           * @return  none
    105           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void HalUARTInit(void)
   \                     HalUARTInit:
    107          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    108            /*
    109          #if HAL_UART_DMA
    110            HalUARTInitDMA();
    111          #endif
    112            */
    113          //#if HAL_UART_ISR
    114           // HalUARTInitISR();
    115            
    116            
    117              CLKCONCMD =0x00;                                                            //Podesavanje clocka na 32MHz
   \   000004   75C600       MOV     0xc6,#0x0
    118              P2INP = 0x60;
   \   000007   75F760       MOV     0xf7,#0x60
    119            /*
    120              PERCFG = 0x02;
    121              //PERCFG = 0x00;                                                              //Podesavanje primarnih funkcija modula 
    122              P0SEL = 0x0C;                                                               //Podesavanje osnovne ili periferne funkcije odredjenog pina(0-osnovna ; 1-periferna)
    123              
    124            
    125              U0CSR = 0xC0;                                                               //Prvi bit 1 je UART mode
    126              U0GCR = 0x08;                                                               //Poslednjih 5 bita odredjuje baud rate exponent vrijednost
    127           
    128              
    129              U0BAUD = 0x3A;  
    130            */
    131           // halUARTCfg_t uartConfig;
    132          	
    133            // initialize structure for uart config
    134            
    135            //P2INP = 0x40;
    136            //CLKCONCMD =0x00; 
    137          
    138            uartConfig.configured = TRUE;
   \   00000A   90....       MOV     DPTR,#uartConfig
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    139            uartConfig.baudRate = HAL_UART_BR_9600;
   \   000010   A3           INC     DPTR
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
    140            uartConfig.flowControl = FALSE;
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
    141            
    142            uartConfig.idleTimeout = HAL_UART_ISR_IDLE;
   \   000015   90....       MOV     DPTR,#uartConfig + 5
   \   000018   74C6         MOV     A,#-0x3a
   \   00001A   F0           MOVX    @DPTR,A
    143            uartConfig.intEnable = TRUE;
   \   00001B   90....       MOV     DPTR,#uartConfig + 22
   \   00001E   7401         MOV     A,#0x1
   \   000020   F0           MOVX    @DPTR,A
    144            uartConfig.callBackFunc = NULL;
   \   000021   90....       MOV     DPTR,#uartConfig + 27
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
    145          	
    146            //config tx options
    147            uartConfig.tx.maxBufSize = HAL_UART_ISR_TX_MAX;
   \   000028   90....       MOV     DPTR,#uartConfig + 18
   \   00002B   7480         MOV     A,#-0x80
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
    148            uartConfig.tx.pBuffer = TX_BUFFER;
   \   000031   A3           INC     DPTR
   \   000032   74..         MOV     A,#TX_BUFFER & 0xff
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#(TX_BUFFER >> 8) & 0xff
   \   000038   F0           MOVX    @DPTR,A
    149            
    150            //config rx options
    151            uartConfig.rx.maxBufSize = HAL_UART_ISR_RX_MAX;
   \   000039   90....       MOV     DPTR,#uartConfig + 10
   \   00003C   7480         MOV     A,#-0x80
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    152            uartConfig.rx.pBuffer = RX_BUFFER;
   \   000042   A3           INC     DPTR
   \   000043   74..         MOV     A,#RX_BUFFER & 0xff
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   74..         MOV     A,#(RX_BUFFER >> 8) & 0xff
   \   000049   F0           MOVX    @DPTR,A
    153            
    154              HalUARTInitISR();
   \   00004A   53FF3F       ANL     0xff,#0x3f
   \   00004D   85FFFF       MOV     0xff,0xff
   \   000050   75F102       MOV     0xf1,#0x2
   \   000053   75F30C       MOV     0xf3,#0xc
   \   000056   7586C0       MOV     0x86,#-0x40
   \   000059   75C508       MOV     0xc5,#0x8
   \   00005C   75C23A       MOV     0xc2,#0x3a
   \   00005F   75F4C0       MOV     0xf4,#-0x40
   \   000062   75F8C0       MOV     0xf8,#-0x40
   \   000065   75FC08       MOV     0xfc,#0x8
   \   000068   75FA3A       MOV     0xfa,#0x3a
    155          
    156            
    157          //#endif
    158            /*
    159          #if HAL_UART_USB
    160            HalUARTInitUSB();
    161          #endif
    162            */
    163          }
   \   00006B                REQUIRE ?Subroutine1
   \   00006B                REQUIRE CLKCONCMD
   \   00006B                REQUIRE P2INP
   \   00006B                REQUIRE P2DIR
   \   00006B                REQUIRE PERCFG
   \   00006B                REQUIRE P0SEL
   \   00006B                REQUIRE U0CSR
   \   00006B                REQUIRE U0GCR
   \   00006B                REQUIRE U0BAUD
   \   00006B                REQUIRE P1SEL
   \   00006B                REQUIRE _A_U1CSR
   \   00006B                REQUIRE U1GCR
   \   00006B                REQUIRE U1BAUD
   \   00006B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    164          
    165          /******************************************************************************
    166           * @fn      HalUARTOpen
    167           *
    168           * @brief   Open a port according tp the configuration specified by parameter.
    169           *
    170           * @param   port   - UART port
    171           *          config - contains configuration information
    172           *
    173           * @return  Status of the function call
    174           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    176          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    177            (void)port;
    178            (void)config;
    179          /*
    180          #if (HAL_UART_DMA == 1)
    181            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
    182          #endif
    183          #if (HAL_UART_DMA == 2)
    184            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    185          #endif
    186            
    187          #if (HAL_UART_ISR == 1)
    188            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    189          #endif
    190            
    191            */
    192          #if (HAL_UART_ISR == 2)
    193            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
   \   000006   7401         MOV     A,#0x1
   \   000008   6C           XRL     A,R4
   \   000009   706F         JNZ     ??HalUARTOpen_0
   \   00000B   EA           MOV     A,R2
   \   00000C   241B         ADD     A,#0x1b
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   3B           ADDC    A,R3
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   90....       MOV     DPTR,#isrCfg + 263
   \   00001C   E8           MOV     A,R0
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   E9           MOV     A,R1
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6403         XRL     A,#0x3
   \   000029   600F         JZ      ??HalUARTOpen_1
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6404         XRL     A,#0x4
   \   000033   6005         JZ      ??HalUARTOpen_1
   \   000035   75FA3B       MOV     0xfa,#0x3b
   \   000038   8003         SJMP    ??HalUARTOpen_2
   \                     ??HalUARTOpen_1:
   \   00003A   75FAD8       MOV     0xfa,#-0x28
   \                     ??HalUARTOpen_2:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6013         JZ      ??HalUARTOpen_3
   \   000045   14           DEC     A
   \   000046   600B         JZ      ??HalUARTOpen_4
   \   000048   14           DEC     A
   \   000049   6003         JZ      ??HalUARTOpen_5
   \   00004B   14           DEC     A
   \   00004C   700F         JNZ     ??HalUARTOpen_6
   \                     ??HalUARTOpen_5:
   \   00004E   75FC0A       MOV     0xfc,#0xa
   \   000051   800D         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_4:
   \   000053   75FC09       MOV     0xfc,#0x9
   \   000056   8008         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_3:
   \   000058   75FC08       MOV     0xfc,#0x8
   \   00005B   8003         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_6:
   \   00005D   75FC0B       MOV     0xfc,#0xb
   \                     ??HalUARTOpen_7:
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6008         JZ      ??HalUARTOpen_8
   \   000069   75FB42       MOV     0xfb,#0x42
   \   00006C   43F430       ORL     0xf4,#0x30
   \   00006F   8003         SJMP    ??HalUARTOpen_9
   \                     ??HalUARTOpen_8:
   \   000071   75FB02       MOV     0xfb,#0x2
   \                     ??HalUARTOpen_9:
   \   000074   D2FE         SETB    0xf8.6
   \   000076   D2AB         SETB    0xa8.3
   \   000078   D2EA         SETB    0xe8.2
    194          #endif
    195            /*
    196          #if (HAL_UART_USB)
    197            HalUARTOpenUSB(config);
    198          #endif
    199            */
    200            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   00007F                REQUIRE U1BAUD
   \   00007F                REQUIRE U1GCR
   \   00007F                REQUIRE U1UCR
   \   00007F                REQUIRE P1SEL
   \   00007F                REQUIRE _A_U1CSR
   \   00007F                REQUIRE _A_IEN0
   \   00007F                REQUIRE _A_IRCON2
    201          }
    202          
    203          /*****************************************************************************
    204           * @fn      HalUARTRead
    205           *
    206           * @brief   Read a buffer from the UART
    207           *
    208           * @param   port - USART module designation
    209           *          buf  - valid data buffer at least 'len' bytes in size
    210           *          len  - max length number of bytes to copy to 'buf'
    211           *
    212           * @return  length of buffer that was read
    213           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    215          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    216            (void)port;
    217            (void)buf;
    218            (void)len;
    219          
    220          #if (HAL_UART_DMA == 1)
    221            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
    222          #endif
    223          #if (HAL_UART_DMA == 2)
    224            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    225          #endif
    226            
    227          #if (HAL_UART_ISR == 1)
    228            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    229          #endif
    230            
    231            
    232          #if (HAL_UART_ISR == 2)
    233            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7005         JNZ     ??HalUARTRead_0
   \   00000C                ; Setup parameters for call to function HalUARTReadISR
   \   00000C   12....       LCALL   `??HalUARTReadISR::?relay`; Banked call to: HalUARTReadISR
   \   00000F   8004         SJMP    ??HalUARTRead_1
    234          #endif
    235          
    236          #if HAL_UART_USB
    237            return HalUARTRx(buf, len);
    238          #else
    239            
    240          #endif
    241          
    242            return 0;
   \                     ??HalUARTRead_0:
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000015   02....       LJMP    ?Subroutine0 & 0xFFFF
    243          }
    244          
    245          /******************************************************************************
    246           * @fn      HalUARTWrite
    247           *
    248           * @brief   Write a buffer to the UART.
    249           *
    250           * @param   port - UART port
    251           *          buf  - pointer to the buffer that will be written, not freed
    252           *          len  - length of
    253           *
    254           * @return  length of the buffer that was sent
    255           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    257          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
    258            (void)port;
    259            (void)buf;
    260            (void)len;
    261          /*  uint8 i;
    262            
    263            for(i=0;i<len;i++)
    264            {
    265             U0DBUF = *(buf + i);
    266              
    267              while((U0CSR & 0x01) == 0x01)
    268              {
    269              }
    270            }
    271           */
    272          #if (HAL_UART_DMA == 1)
    273            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
    274          #endif
    275          #if (HAL_UART_DMA == 2)
    276            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    277          #endif
    278          
    279          #if (HAL_UART_ISR == 1)
    280            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    281          #endif
    282          
    283          
    284          #if (HAL_UART_ISR == 2)
    285            
    286            if (port == HAL_UART_PORT_1) 
   \   00000F   7401         MOV     A,#0x1
   \   000011   65..         XRL     A,?V2
   \   000013   7016         JNZ     ??HalUARTWrite_0
    287            {
    288              HalLcdWriteString("Sico----------------------",0);
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7900         MOV     R1,#0x0
   \   000017   7A..         MOV     R2,#`?<Constant "Sico-----------------...">` & 0xff
   \   000019   7B..         MOV     R3,#(`?<Constant "Sico-----------------...">` >> 8) & 0xff
   \   00001B   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    289              return HalUARTWriteISR(buf, len);
   \   00001E                ; Setup parameters for call to function HalUARTWriteISR
   \   00001E   AC..         MOV     R4,?V0
   \   000020   AD..         MOV     R5,?V1
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   `??HalUARTWriteISR::?relay`; Banked call to: HalUARTWriteISR
   \   000029   8004         SJMP    ??HalUARTWrite_1
    290            }
    291            //return HalUARTWriteISR(buf, len);
    292          #endif
    293          
    294          #if HAL_UART_USB
    295            HalUARTTx(buf, len);
    296            return len;
    297          #else
    298            return 0;
   \                     ??HalUARTWrite_0:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   00002F   7F03         MOV     R7,#0x3
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
    299          #endif
    300          
    301            //return 0;
    302          }
    303          
    304          /******************************************************************************
    305           * @fn      HalUARTSuspend
    306           *
    307           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    308           *
    309           * @param   None
    310           *
    311           * @return  None
    312           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    314          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    315            
    316            /*
    317          #if HAL_UART_DMA
    318            HalUARTSuspendDMA();
    319          #endif
    320          #if HAL_UART_ISR
    321            HalUARTSuspendISR();
    322          #endif
    323          */
    324          }
   \   000000   02....       LJMP    ?BRET
    325          
    326          /******************************************************************************
    327           * @fn      HalUARTResume
    328           *
    329           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    330           *
    331           * @param   None
    332           *
    333           * @return  None
    334           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    335          void HalUARTResume( void )
   \                     HalUARTResume:
    336          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    337            
    338            /*
    339          #if HAL_UART_DMA
    340            HalUARTResumeDMA();
    341          #endif
    342          #if HAL_UART_ISR
    343            HalUARTResumeISR();
    344          #endif
    345            */
    346          }
   \   000000   02....       LJMP    ?BRET
    347          
    348          /***************************************************************************************************
    349           * @fn      HalUARTPoll
    350           *
    351           * @brief   Poll the UART.
    352           *
    353           * @param   none
    354           *
    355           * @return  none
    356           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void HalUARTPoll(void)
   \                     HalUARTPoll:
    358          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    359            /*
    360          #if HAL_UART_DMA
    361            HalUARTPollDMA();
    362          #endif
    363          #if HAL_UART_ISR
    364            HalUARTPollISR();
    365          #endif
    366          #if HAL_UART_USB
    367            HalUARTPollUSB();
    368          #endif
    369            */
    370          }
   \   000000   02....       LJMP    ?BRET
    371          
    372          /**************************************************************************************************
    373           * @fn      Hal_UART_RxBufLen()
    374           *
    375           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    376           *
    377           * @param   port - UART port
    378           *
    379           * @return  length of current Rx Buffer
    380           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    382          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    383            (void)port;
    384          
    385            
    386          #if (HAL_UART_DMA == 1)
    387            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
    388          #endif
    389          #if (HAL_UART_DMA == 2)
    390            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    391          #endif
    392          #if (HAL_UART_ISR == 1)
    393            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    394          #endif
    395          #if (HAL_UART_ISR == 2)
    396            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   7029         JNZ     ??Hal_UART_RxBufLen_0
   \   000009   90....       MOV     DPTR,#isrCfg + 129
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FA           MOV     R2,A
   \   00000E   90....       MOV     DPTR,#isrCfg + 128
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   EA           MOV     A,R2
   \   000014   C3           CLR     C
   \   000015   98           SUBB    A,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   4008         JC      ??Hal_UART_RxBufLen_1
   \   00001A   EA           MOV     A,R2
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   FA           MOV     R2,A
   \   00001E   95E0         SUBB    A,0xE0 /* A   */
   \   000020   800D         SJMP    ??Hal_UART_RxBufLen_2
   \                     ??Hal_UART_RxBufLen_1:
   \   000022   7480         MOV     A,#-0x80
   \   000024   C3           CLR     C
   \   000025   9C           SUBB    A,R4
   \   000026   FC           MOV     R4,A
   \   000027   95E0         SUBB    A,0xE0 /* A   */
   \   000029   FD           MOV     R5,A
   \   00002A   EC           MOV     A,R4
   \   00002B   2A           ADD     A,R2
   \   00002C   FA           MOV     R2,A
   \   00002D   E4           CLR     A
   \   00002E   3D           ADDC    A,R5
   \                     ??Hal_UART_RxBufLen_2:
   \   00002F   FB           MOV     R3,A
   \   000030   8004         SJMP    ??Hal_UART_RxBufLen_3
    397          #endif
    398          #if HAL_UART_USB
    399            return HalUARTRxAvailUSB();
    400          #else
    401            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_3:
   \   000036   02....       LJMP    ?Subroutine1 & 0xFFFF
    402          #endif
    403            
    404            
    405            //return 0;
    406          }
    407          ////////////////////////////////////////////////////////////////////////////////////// 
    408          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void halProcessUartInterrupt (void)
   \                     halProcessUartInterrupt:
    410          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    411            //osal_set_event(Hal_TaskID, HAL_UART_EVENT);
    412            //if(MIN_FRAME_SIZE <= HalUARTReadISR(RX_BUFFER, 128))
    413            if(HalUARTReadISR(RX_BUFFER, 128))    ////////////////////////////////////////////////////////////////// ovdje treba uporediti sa minimalnom velicinom bafera, definisati MIN_FRAME_SIZE
   \   000005                ; Setup parameters for call to function HalUARTReadISR
   \   000005   7C80         MOV     R4,#-0x80
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#RX_BUFFER & 0xff
   \   00000B   7B..         MOV     R3,#(RX_BUFFER >> 8) & 0xff
   \   00000D   12....       LCALL   `??HalUARTReadISR::?relay`; Banked call to: HalUARTReadISR
   \   000010   8B..         MOV     ?V1,R3
   \   000012   EA           MOV     A,R2
   \   000013   45..         ORL     A,?V1
   \   000015   600C         JZ      ??halProcessUartInterrupt_0
    414            {
    415              osal_set_event(GenericApp_TaskID, RX_PROCCESS_EVENT);
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B01         MOV     R3,#0x1
   \   00001B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    416            }
    417          }
   \                     ??halProcessUartInterrupt_0:
   \   000023   7F02         MOV     R7,#0x2
   \   000025   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment INTVEC, offset 0x1b, root
   \                     `??halUart1RxIsr::??INTVEC 27`:
   \   00001B   02....       LJMP       (halUart1RxIsr)

   \                                 In  segment INTVEC, offset 0x73, root
   \                     `??halUart1TxIsr::??INTVEC 115`:
   \   000073   02....       LJMP       (halUart1TxIsr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halProcessUartInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessUartInterrupt

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Miso-----------------...">`:
   \   000000   4D69736F     DB "Miso----------------------"
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Simic----------------...">`:
   \   000000   53696D69     DB "Simic----------------------"
   \            632D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Savan----------------...">`:
   \   000000   53617661     DB "Savan----------------------"
   \            6E2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sico-----------------...">`:
   \   000000   5369636F     DB "Sico----------------------"
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D00  
    418          ////////////////////////////////////////////////////////////////////////////////////// 
    419          /******************************************************************************
    420          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
      2      0   HalUARTOpen
      0      0   HalUARTPoll
      0      9   HalUARTRead
        0      9   -> HalUARTReadISR
      1     19   HalUARTReadISR
      0      0   HalUARTResume
      0      0   HalUARTSuspend
      0     11   HalUARTWrite
        0     11   -> HalLcdWriteString
        0     11   -> HalUARTWriteISR
      1     24   HalUARTWriteISR
        0     13   -> HalLcdWriteString
      2      0   Hal_UART_RxBufLen
      0     24   halProcessUartInterrupt
        0     10   -> HalUARTReadISR
        0     10   -> osal_set_event
      1     14   halUart1RxIsr
        0     14   -> halProcessUartInterrupt
      6      0   halUart1TxIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?<Constant "Miso-----------------...">
      28  ?<Constant "Savan----------------...">
      27  ?<Constant "Sico-----------------...">
      28  ?<Constant "Simic----------------...">
       5  ?Subroutine0
       7  ?Subroutine1
       1  CLKCONCMD
     107  HalUARTInit
       6  HalUARTInit::?relay
     127  HalUARTOpen
       6  HalUARTOpen::?relay
       3  HalUARTPoll
       6  HalUARTPoll::?relay
      24  HalUARTRead
       6  HalUARTRead::?relay
      78  HalUARTReadISR
       6  HalUARTReadISR::?relay
       3  HalUARTResume
       6  HalUARTResume::?relay
       3  HalUARTSuspend
       6  HalUARTSuspend::?relay
      52  HalUARTWrite
       6  HalUARTWrite::?relay
     213  HalUARTWriteISR
       6  HalUARTWriteISR::?relay
      57  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  IEN2
       1  P0SEL
       1  P1SEL
       1  P2DIR
       1  P2INP
       1  PERCFG
     128  RX_BUFFER
       1  ST0
     128  TX_BUFFER
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_IEN0
       1  _A_IRCON2
       1  _A_U1CSR
      40  halProcessUartInterrupt
       6  halProcessUartInterrupt::?relay
      71  halUart1RxIsr
       3  halUart1RxIsr::??INTVEC 27
      82  halUart1TxIsr
       3  halUart1TxIsr::??INTVEC 115
     265  isrCfg

 
 719 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
 153 bytes in segment NEAR_CODE
  18 bytes in segment SFR_AN
 110 bytes in segment XDATA_ROM_C
 521 bytes in segment XDATA_Z
 
 219 bytes of CODE     memory (+  6 bytes shared)
 110 bytes of CONST    memory
   0 bytes of DATA     memory (+ 18 bytes shared)
 719 bytes of HUGECODE memory
 521 bytes of XDATA    memory

Errors: none
Warnings: none
