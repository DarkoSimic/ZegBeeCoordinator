###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                05/May/2017  16:07:51
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c" -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\circular_buffer.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\circular_buffer.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\dll\src\circular_buffer.c
      1          #include "includes/circular_buffer.h"
      2          
      3          //*****************************************************************************
      4          //
      5          // Initialization of circular buffer
      6          //
      7          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      8          uint8 circularInit(CircularBuffer_t *buff)
   \                     circularInit:
      9          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     10          	if (buff != NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6013         JZ      ??circularInit_0
     11          	{
     12          		buff->head = buff->buffer;
   \   000008   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
     13          		buff->tail = buff->buffer;
   \   000010   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EB           MOV     A,R3
   \   000016   F0           MOVX    @DPTR,A
     14          		return 1;
   \   000017   7901         MOV     R1,#0x1
   \   000019   8002         SJMP    ??circularInit_1
     15          	}
     16          	return 0;
   \                     ??circularInit_0:
   \   00001B   7900         MOV     R1,#0x0
   \                     ??circularInit_1:
   \   00001D   02....       LJMP    ?Subroutine0 & 0xFFFF
     17          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EA           MOV     A,R2
   \   000001   2400         ADD     A,#0x0
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3401         ADDC    A,#0x1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   2402         ADD     A,#0x2
   \   000002   F582         MOV     DPL,A
   \   000004   EB           MOV     A,R3
   \   000005   3401         ADDC    A,#0x1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     18          
     19          //*****************************************************************************
     20          //
     21          // Function checks if a circular buffer is full
     22          // returns 1 if CB is full or 0 if it is not
     23          //
     24          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          uint8 circularIsFull(CircularBuffer_t *buff)
   \                     circularIsFull:
     26          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     27          	if(buff->head == buff->buffer && buff->tail == (buff->buffer + CAPACITY - 1))
   \   000004   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000007   68           XRL     A,R0
   \   000008   7002         JNZ     ??circularIsFull_0
   \   00000A   EB           MOV     A,R3
   \   00000B   69           XRL     A,R1
   \                     ??circularIsFull_0:
   \   00000C   7012         JNZ     ??circularIsFull_1
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000011   24FF         ADD     A,#-0x1
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   3B           ADDC    A,R3
   \   000016   F9           MOV     R1,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   68           XRL     A,R0
   \   000019   7003         JNZ     ??circularIsFull_2
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   69           XRL     A,R1
   \                     ??circularIsFull_2:
   \   00001E   6020         JZ      ??circularIsFull_3
     28          		return 1;
     29          	else if ((buff->head - buff->tail) == 1)
   \                     ??circularIsFull_1:
   \   000020   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000023   C082         PUSH    DPL
   \   000025   C083         PUSH    DPH
   \   000027   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C3           CLR     C
   \   000034   98           SUBB    A,R0
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   99           SUBB    A,R1
   \   000039   F9           MOV     R1,A
   \   00003A   7401         MOV     A,#0x1
   \   00003C   68           XRL     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   7004         JNZ     ??circularIsFull_4
     30          		return 1;
   \                     ??circularIsFull_3:
   \   000040   7901         MOV     R1,#0x1
   \   000042   8002         SJMP    ??circularIsFull_5
     31          	else return 0;
   \                     ??circularIsFull_4:
   \   000044   7900         MOV     R1,#0x0
   \                     ??circularIsFull_5:
   \   000046   80..         SJMP    ?Subroutine0
     32          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV     A,R2
   \   000001   2400         ADD     A,#0x0
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine16_0
   \   000006                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   3401         ADDC    A,#0x1
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET
     33          
     34          //*****************************************************************************
     35          //
     36          // Function checks if a CB  is empty
     37          // returns 1 if CB is empty or 0 if it is not
     38          //
     39          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          uint8 circularIsEmpty(CircularBuffer_t *buff)
   \                     circularIsEmpty:
     41          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     42          	if (buff->head == buff->tail)
   \   000004   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000007   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00000A   68           XRL     A,R0
   \   00000B   7003         JNZ     ??circularIsEmpty_0
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   69           XRL     A,R1
   \                     ??circularIsEmpty_0:
   \   000010   7004         JNZ     ??circularIsEmpty_1
     43          		return 1;
   \   000012   7901         MOV     R1,#0x1
   \   000014   8002         SJMP    ??circularIsEmpty_2
     44          	return 0;
   \                     ??circularIsEmpty_1:
   \   000016   7900         MOV     R1,#0x0
   \                     ??circularIsEmpty_2:
   \   000018                REQUIRE ?Subroutine0
   \   000018                ; // Fall through to label ?Subroutine0
     45          }
     46          
     47          //*****************************************************************************
     48          //
     49          // Function put a new element in CB (at end)
     50          //
     51          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          void circularPut(CircularBuffer_t *buff, uint8 el)
   \                     circularPut:
     53          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     54          	if ( ((buff->buffer + CAPACITY - 1) - buff->tail) == 0 )
   \   000005   EA           MOV     A,R2
   \   000006   24FF         ADD     A,#-0x1
   \   000008   FE           MOV     R6,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   FF           MOV     R7,A
   \   00000C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00000F   FC           MOV     R4,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FD           MOV     R5,A
   \   000013   EE           MOV     A,R6
   \   000014   C3           CLR     C
   \   000015   9C           SUBB    A,R4
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   9D           SUBB    A,R5
   \   000019   FD           MOV     R5,A
   \   00001A   EC           MOV     A,R4
   \   00001B   4D           ORL     A,R5
   \   00001C   7008         JNZ     ??circularPut_0
     55          	{
     56          		*(buff->tail) = el;
   \   00001E   12....       LCALL   ?Subroutine4 & 0xFFFF
     57          		buff->tail = buff->buffer;
     58          	}
   \                     ??CrossCallReturnLabel_2:
   \   000021   EA           MOV     A,R2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EB           MOV     A,R3
   \   000025   F0           MOVX    @DPTR,A
     59          	*(buff->tail) = el;
   \                     ??circularPut_0:
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
     60          	buff->tail++;
   \                     ??CrossCallReturnLabel_3:
   \   000029   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   EA           MOV     A,R2
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   EB           MOV     A,R3
   \   000034   F0           MOVX    @DPTR,A
     61          }
   \   000035                REQUIRE ?Subroutine1
   \   000035                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EB           MOV     A,R3
   \   000005   3401         ADDC    A,#0x1
   \   000007   FD           MOV     R5,A
   \   000008   8C82         MOV     DPL,R4
   \   00000A   8D83         MOV     DPH,R5
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8882         MOV     DPL,R0
   \   000014   E9           MOV     A,R1
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
     62          
     63          //*****************************************************************************
     64          //
     65          // Function gets a element from CB 
     66          //
     67          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     68          uint8 circularGet(CircularBuffer_t *buff, uint8 *el)
   \                     circularGet:
     69          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
     70          	if (circularIsEmpty(buff))
   \   00000D                ; Setup parameters for call to function circularIsEmpty
   \   00000D   12....       LCALL   `??circularIsEmpty::?relay`; Banked call to: circularIsEmpty
   \   000010   E9           MOV     A,R1
   \   000011   6004         JZ      ??circularGet_0
     71          	{
     72          		return 0;
   \   000013   7900         MOV     R1,#0x0
   \   000015   8034         SJMP    ??circularGet_1
     73          	}
     74          	else if ( ((buff->buffer + CAPACITY - 1) - buff->head) == 0 )
   \                     ??circularGet_0:
   \   000017   EE           MOV     A,R6
   \   000018   24FF         ADD     A,#-0x1
   \   00001A   FA           MOV     R2,A
   \   00001B   E4           CLR     A
   \   00001C   3F           ADDC    A,R7
   \   00001D   FB           MOV     R3,A
   \   00001E   EE           MOV     A,R6
   \   00001F   2400         ADD     A,#0x0
   \   000021   F582         MOV     DPL,A
   \   000023   EF           MOV     A,R7
   \   000024   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000027   C3           CLR     C
   \   000028   98           SUBB    A,R0
   \   000029   F8           MOV     R0,A
   \   00002A   EB           MOV     A,R3
   \   00002B   99           SUBB    A,R1
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   7009         JNZ     ??circularGet_2
     75          	{
     76          		*el = *(buff->head);
   \   000031   12....       LCALL   ?Subroutine3 & 0xFFFF
     77          		buff->head = buff->buffer;
     78          		return 1;
     79          	}
   \                     ??CrossCallReturnLabel_0:
   \   000034   EE           MOV     A,R6
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EF           MOV     A,R7
   \   000038   800E         SJMP    ??circularGet_3
     80          	else 
     81          	{
     82          		*el = *(buff->head);
   \                     ??circularGet_2:
   \   00003A   12....       LCALL   ?Subroutine3 & 0xFFFF
     83          		buff->head++;
   \                     ??CrossCallReturnLabel_1:
   \   00003D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   EA           MOV     A,R2
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   EB           MOV     A,R3
   \                     ??circularGet_3:
   \   000048   F0           MOVX    @DPTR,A
     84          		return 1;
   \   000049   7901         MOV     R1,#0x1
     85          	}
   \                     ??circularGet_1:
   \   00004B                REQUIRE ?Subroutine2
   \   00004B                ; // Fall through to label ?Subroutine2
     86          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2400         ADD     A,#0x0
   \   000003   F8           MOV     R0,A
   \   000004   EF           MOV     A,R7
   \   000005   3401         ADDC    A,#0x1
   \   000007   F9           MOV     R1,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8A82         MOV     DPL,R2
   \   000014   E0           MOVX    A,@DPTR
   \   000015   85..82       MOV     DPL,?V0
   \   000018   85..83       MOV     DPH,?V1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   22           RET
     87          
     88          //*****************************************************************************
     89          //
     90          // Function that clears a CB
     91          //
     92          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          void circularEmptyBuffer(CircularBuffer_t *buff)
   \                     circularEmptyBuffer:
     94          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     95          	circularInit(buff);
   \   000004                ; Setup parameters for call to function circularInit
   \   000004   12....       LCALL   `??circularInit::?relay`; Banked call to: circularInit
     96          }
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
     97          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          uint8 circularSize(CircularBuffer_t *buff)
   \                     circularSize:
     99          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    100          	uint8 *tmp = buff->head;
   \   000005   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
    101          	uint8 cnt = 0;
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   8021         SJMP    ??circularSize_0
    102          	while(tmp != buff->tail)
    103          	{
    104          		if ( ((buff->buffer + CAPACITY - 1) - tmp) == 0 )
   \                     ??circularSize_1:
   \   000010   EA           MOV     A,R2
   \   000011   24FF         ADD     A,#-0x1
   \   000013   FE           MOV     R6,A
   \   000014   E4           CLR     A
   \   000015   3B           ADDC    A,R3
   \   000016   FF           MOV     R7,A
   \   000017   EE           MOV     A,R6
   \   000018   C3           CLR     C
   \   000019   9C           SUBB    A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   EF           MOV     A,R7
   \   00001C   9D           SUBB    A,R5
   \   00001D   FF           MOV     R7,A
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   7005         JNZ     ??circularSize_2
    105          		{
    106          			cnt++;
   \   000022   09           INC     R1
    107          			tmp = buff->buffer;
   \   000023   EA           MOV     A,R2
   \   000024   FC           MOV     R4,A
   \   000025   EB           MOV     A,R3
   \   000026   FD           MOV     R5,A
    108          		}
    109          		cnt++;
   \                     ??circularSize_2:
   \   000027   09           INC     R1
    110          		tmp++;
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   A3           INC     DPTR
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
    111          	}
   \                     ??circularSize_0:
   \   000031   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000034   EC           MOV     A,R4
   \   000035   6E           XRL     A,R6
   \   000036   7002         JNZ     ??circularSize_3
   \   000038   ED           MOV     A,R5
   \   000039   6F           XRL     A,R7
   \                     ??circularSize_3:
   \   00003A   70D4         JNZ     ??circularSize_1
    112          	return cnt;	
   \   00003C   02....       LJMP    ?Subroutine1 & 0xFFFF
    113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
    114          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          int circular2array(CircularBuffer_t *c_buff, uint8 *uc_array)
   \                     circular2array:
    116          {	
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    117          	unsigned char *tmp = c_buff->head;
   \   000005   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
    118          	int i = 0;
   \   00000C   75..00       MOV     ?V0,#0x0
   \   00000F   75..00       MOV     ?V1,#0x0
   \   000012   8025         SJMP    ??circular2array_0
    119          	while(tmp != c_buff->tail)
    120          	{
    121          		*(uc_array + i) = *(tmp);
   \                     ??circular2array_1:
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   EC           MOV     A,R4
   \   00001C   25..         ADD     A,?V0
   \   00001E   F582         MOV     DPL,A
   \   000020   ED           MOV     A,R5
   \   000021   35..         ADDC    A,?V1
   \   000023   F583         MOV     DPH,A
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
    122          		tmp++;
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A882         MOV     R0,DPL
   \   00002F   A983         MOV     R1,DPH
    123          		i++;
   \   000031   05..         INC     ?V0
   \   000033   E5..         MOV     A,?V0
   \   000035   7002         JNZ     ??circular2array_0
   \   000037   05..         INC     ?V1
    124          	}
   \                     ??circular2array_0:
   \   000039   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003C   E8           MOV     A,R0
   \   00003D   6E           XRL     A,R6
   \   00003E   7002         JNZ     ??circular2array_2
   \   000040   E9           MOV     A,R1
   \   000041   6F           XRL     A,R7
   \                     ??circular2array_2:
   \   000042   70D0         JNZ     ??circular2array_1
    125          	return circularSize(c_buff);
   \   000044                ; Setup parameters for call to function circularSize
   \   000044   12....       LCALL   `??circularSize::?relay`; Banked call to: circularSize
   \   000047   E9           MOV     A,R1
   \   000048   FA           MOV     R2,A
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   02....       LJMP    ?Subroutine2 & 0xFFFF
    126          }
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          uint8 array2circular(CircularBuffer_t *c_buff, uint8 *uc_array, uint8 size)
   \                     array2circular:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V4,R1
    130          	int i;
    131          	if (circularIsEmpty(c_buff))// && (size < CAPACITY))
   \   00000F                ; Setup parameters for call to function circularIsEmpty
   \   00000F   12....       LCALL   `??circularIsEmpty::?relay`; Banked call to: circularIsEmpty
   \   000012   E9           MOV     A,R1
   \   000013   603A         JZ      ??array2circular_0
    132          	{
    133          		for (i = 0; i < size; i++)
   \   000015   75..00       MOV     ?V2,#0x0
   \   000018   75..00       MOV     ?V3,#0x0
   \   00001B   801D         SJMP    ??array2circular_1
    134          		{
    135          			circularPut(c_buff, *(uc_array + i));
   \                     ??array2circular_2:
   \   00001D                ; Setup parameters for call to function circularPut
   \   00001D   E5..         MOV     A,?V0
   \   00001F   25..         ADD     A,?V2
   \   000021   F582         MOV     DPL,A
   \   000023   E5..         MOV     A,?V1
   \   000025   35..         ADDC    A,?V3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??circularPut::?relay`; Banked call to: circularPut
    136          		}
   \   000032   05..         INC     ?V2
   \   000034   E5..         MOV     A,?V2
   \   000036   7002         JNZ     ??array2circular_1
   \   000038   05..         INC     ?V3
   \                     ??array2circular_1:
   \   00003A   A8..         MOV     R0,?V4
   \   00003C   C3           CLR     C
   \   00003D   E5..         MOV     A,?V2
   \   00003F   98           SUBB    A,R0
   \   000040   E5..         MOV     A,?V3
   \   000042   9400         SUBB    A,#0x0
   \   000044   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000046   65D0         XRL     A,PSW
   \   000048   33           RLC     A
   \   000049   40D2         JC      ??array2circular_2
    137          		return 1;
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   8002         SJMP    ??array2circular_3
    138          	}
    139          	else
    140          	{
    141          		return 0;
   \                     ??array2circular_0:
   \   00004F   7900         MOV     R1,#0x0
   \                     ??array2circular_3:
   \   000051   7F05         MOV     R7,#0x5
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          	}
    143          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularIsFull::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularIsFull

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularIsEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularIsEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularPut::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularPut

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularEmptyBuffer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularEmptyBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circularSize::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circularSize

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??circular2array::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    circular2array

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??array2circular::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    array2circular
    144          	

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     13   array2circular
        0     13   -> circularIsEmpty
        0     13   -> circularPut
      1     10   circular2array
        0     10   -> circularSize
      2      0   circularEmptyBuffer
        2      0   -> circularInit
      1     10   circularGet
        0     10   -> circularIsEmpty
      2      0   circularInit
      2     13   circularIsEmpty
      4      0   circularIsFull
      1     22   circularPut
      0     19   circularSize


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine15_0
      11  ??Subroutine16_0
       7  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine10
      10  ?Subroutine11
       5  ?Subroutine12
      11  ?Subroutine13
      10  ?Subroutine14
       5  ?Subroutine2
      33  ?Subroutine3
      27  ?Subroutine4
       6  ?Subroutine5
       9  ?Subroutine6
       1  ?Subroutine7
       5  ?Subroutine8
       6  ?Subroutine9
      86  array2circular
       6  array2circular::?relay
      78  circular2array
       6  circular2array::?relay
      10  circularEmptyBuffer
       6  circularEmptyBuffer::?relay
      75  circularGet
       6  circularGet::?relay
      32  circularInit
       6  circularInit::?relay
      24  circularIsEmpty
       6  circularIsEmpty::?relay
      72  circularIsFull
       6  circularIsFull::?relay
      53  circularPut
       6  circularPut::?relay
      63  circularSize
       6  circularSize::?relay

 
 652 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
 
  54 bytes of CODE     memory
 652 bytes of HUGECODE memory

Errors: none
Warnings: none
