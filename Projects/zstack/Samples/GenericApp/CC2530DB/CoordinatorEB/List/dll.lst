###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                05/May/2017  16:07:51
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\dll\src\dll.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\dll\src\dll.c" -D ZTOOL_P1 -D
#        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\dll.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\dll.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\dll\src\dll.c
      1          #include "includes/dll.h"
      2          //#include "hal/includes/hal_gpio.h"
      3          #include "includes/defines.h"
      4          #include "hal_uart.h"
      5          #include "includes/circular_buffer.h"
      6          
      7          #include "hal_lcd.h"
      8          #include "OnBoard.h"
      9          #include <stdlib.h>
     10          //#include "stdlib.h"
     11          //#include "cmsis_os.h"
     12          
     13          #include <stdio.h>
     14          //#include <stdint.h>
     15          //#include <stdlib.h>
     16          #include "hal_types.h"
     17          //*****************************************************************************
     18          //
     19          // A mapping of devices IDs to signal_id number.
     20          //
     21          //*****************************************************************************
     22          

   \                                 In  segment XDATA_ROM_C, align 1
     23          static const uint16 signalID[] = {
   \                     signalID:
   \   000000   5432         DW 12884
   \   000002   1211         DW 4370
   \   000004   5032         DW 12880
   \   000006   1411         DW 4372
   \   000008   4832         DW 12872
   \   00000A   1611         DW 4374
   \   00000C   1711         DW 4375
   \   00000E   1811         DW 4376
   \   000010   1911         DW 4377
     24                                            TEMP_SENSOR_INSIDE,
     25                                            TEMP_SENSOR_OUTSIDE,
     26                                            PRESSURE_SENSOR_INSIDE,
     27                                            PRESSURE_SENSOR_OUTSIDE,
     28                                            HUMIDITY_SENSOR_INSIDE,
     29                                            HUMIDITY_SENSOR_OUTSIDE,
     30                                            DOOR,
     31                                            WINDOW,
     32                                            MOTION_SENSOR
     33                                            };
     34          
     35          
     36          
     37          
     38          //*****************************************************************************
     39          //
     40          // Internal/local functions
     41          // \just defining functionality/
     42          //
     43          //*****************************************************************************
     44          static uint8 getSignalID(const uint16 devicesAddress);
     45          static uint8 checksum(DLLPacket_t *frame);
     46          
     47          //static uint8 processFrameRx(uint8 *frame, uint8 len, uint16 Address);
     48          //static uint8 devAddressSupport(uint16 devAddress);
     49          
     50          
     51          //static uint8 halUARTWrite(CircularBuffer_t *txBuffer, uint8 len);
     52          static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket);
     53          //*****************************************************************************
     54          //
     55          // CMSIS-RTOS tread definition and tread  function declaration
     56          //
     57          //*****************************************************************************
     58          /*
     59          void communicationThread(void const *arg);
     60          osThreadId tID_PC_Communication;
     61          osThreadId tID_CC2530_Communication;
     62          */
     63          
     64          //*****************************************************************************
     65          //
     66          // Extern variables
     67          //
     68          // treba promijeniti naziv ova dva bafera u circularBuffer.h
     69          //
     70          //*****************************************************************************

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          CircularBuffer_t rxBufferPC;
   \                     rxBufferPC:
   \   000000                DS 260
   \   000104                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          CircularBuffer_t rxBufferCC2530;
   \                     rxBufferCC2530:
   \   000000                DS 260
   \   000104                REQUIRE __INIT_XDATA_Z
     73          
     74          //halUARTCfg_t uartConfig;
     75          //*****************************************************************************
     76          //
     77          // Local variables
     78          //
     79          //*****************************************************************************
     80          //DLLState_t statePC;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          DLLState_t stateCC2530;
   \                     stateCC2530:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          //uint8 emFlagPC;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          uint8 emFlagCC2530;
   \                     emFlagCC2530:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          //char uiTxBufferPC[MAX_BUFFER_LENGHT];
     86          //uint8 uiRxBufferPC[MAX_BUFFER_LENGHT];
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          char uiTxBufferCC2530[MAX_BUFFER_LENGHT];
   \                     uiTxBufferCC2530:
   \   000000                DS 256
   \   000100                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 uiRxBufferCC2530[MAX_BUFFER_LENGHT];
   \                     uiRxBufferCC2530:
   \   000000                DS 256
   \   000100                REQUIRE __INIT_XDATA_Z
     90          
     91          //uint8 rxBufferPCIndex;
     92          //uint8 txBufferPCIndex;
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 rxBufferCC2530Index;
   \                     rxBufferCC2530Index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint8 txBufferCC2530Index;
   \                     txBufferCC2530Index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          
     97          //uint8 tmpPC;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 tmpCC2530;
   \                     tmpCC2530:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          //CircularBuffer_t cTxBufferPC;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          CircularBuffer_t cTxBufferCC2530;
   \                     cTxBufferCC2530:
   \   000000                DS 260
   \   000104                REQUIRE __INIT_XDATA_Z
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          DLLPacket_t recPack;
   \                     recPack:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          static CallBack_t callBack;
   \                     callBack:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    106          
    107          //*****************************************************************************
    108          //
    109          // Function definition
    110          //
    111          //*****************************************************************************
    112          
    113          //*****************************************************************************
    114          //
    115          //! Data link layer initialization function
    116          //!
    117          //! This function initializes states and indexes,
    118          //! configures communication ports, one of \b PC or \b CC2530 and their
    119          //! baudrates, one of \b BAUDRATE_PC \b BAUDRATE_CC2530. Creates two threads
    120          //! for communication wia UART interface.
    121          //!
    122          //! \return None.
    123          //
    124          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          void dllInit(void)
   \                     dllInit:
    126          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    127          
    128          	stateCC2530 = IDLE;
   \   000004   90....       MOV     DPTR,#stateCC2530
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    129          
    130          	rxBufferCC2530Index = 0;
   \   000009   90....       MOV     DPTR,#rxBufferCC2530Index
   \   00000C   F0           MOVX    @DPTR,A
    131          	txBufferCC2530Index = 0;
   \   00000D   90....       MOV     DPTR,#txBufferCC2530Index
   \   000010   F0           MOVX    @DPTR,A
    132          
    133          	//circularInit(&cTxBufferPC);
    134          	circularInit(&cTxBufferCC2530);
   \   000011                ; Setup parameters for call to function circularInit
   \   000011   7A..         MOV     R2,#cTxBufferCC2530 & 0xff
   \   000013   7B..         MOV     R3,#(cTxBufferCC2530 >> 8) & 0xff
   \   000015   12....       LCALL   `??circularInit::?relay`; Banked call to: circularInit
    135                  
    136                
    137          }
   \   000018                REQUIRE ?Subroutine0
   \   000018                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    138          
    139          //*****************************************************************************
    140          //
    141          //! Register callback function.
    142          //!
    143          //! \param cb is pointer on the function.
    144          //!
    145          //! \return None.
    146          //
    147          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          void CallBackRegister(CallBack_t cb)
   \                     CallBackRegister:
    149          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    150          	callBack = cb;
   \   000004   90....       MOV     DPTR,#callBack
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    151          }
   \   00000C   80..         SJMP    ?Subroutine0
    152          
    153          
    154          //*****************************************************************************
    155          //
    156          //! Get the signal ID.
    157          //!
    158          //! \param deviceAddress is device address.
    159          //!
    160          //! For given a device address, this function returns the corresponding
    161          //! signal ID.
    162          //!
    163          //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
    164          //
    165          //*****************************************************************************
    166          uint8 getSignalID(const uint16 deviceAddress)
    167          {
    168          	uint8 i;
    169                  
    170          	uint8 retVal = 255;
    171          	for (i = 0; i < sizeof(signalID); i+=2)
    172          	{
    173                      
    174          		if (deviceAddress == signalID[i])
    175          		{
    176          			retVal = i;
    177                                  
    178                                  
    179          		}
    180                         
    181          	}
    182          	return retVal;
    183          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          uint16 getSignalAddress(const uint16 ID)
   \                     getSignalAddress:
    185          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    186            uint8 i;
    187                  
    188          	uint16 retVal = 0;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
    189          	for (i = 0; i < sizeof(signalID); i+=2)
   \   000009   7E00         MOV     R6,#0x0
    190          	{
    191                      
    192          		if (ID == i)
   \                     ??getSignalAddress_0:
   \   00000B   EE           MOV     A,R6
   \   00000C   6A           XRL     A,R2
   \   00000D   4B           ORL     A,R3
   \   00000E   7016         JNZ     ??getSignalAddress_1
    193          		{
    194          			retVal = signalID[i];
   \   000010   EE           MOV     A,R6
   \   000011   25E0         ADD     A,0xE0 /* A   */
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   33           RLC     A
   \   000016   F9           MOV     R1,A
   \   000017   74..         MOV     A,#signalID & 0xff
   \   000019   28           ADD     A,R0
   \   00001A   F582         MOV     DPL,A
   \   00001C   74..         MOV     A,#(signalID >> 8) & 0xff
   \   00001E   39           ADDC    A,R1
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FD           MOV     R5,A
    195                                  
    196                                  
    197          		}
    198                         
    199          	}
   \                     ??getSignalAddress_1:
   \   000026   7402         MOV     A,#0x2
   \   000028   2E           ADD     A,R6
   \   000029   FE           MOV     R6,A
   \   00002A   C3           CLR     C
   \   00002B   9412         SUBB    A,#0x12
   \   00002D   40DC         JC      ??getSignalAddress_0
    200          	return retVal;
   \   00002F   EC           MOV     A,R4
   \   000030   FA           MOV     R2,A
   \   000031   ED           MOV     A,R5
   \   000032   FB           MOV     R3,A
   \   000033                REQUIRE ?Subroutine1
   \   000033                ; // Fall through to label ?Subroutine1
    201          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    202          //*****************************************************************************
    203          //
    204          //! Process received data.
    205          //!
    206          //! \param frame is pointer on the received frame.
    207          //! \param len is lenght of received frame.
    208          //! \param port is number of port.
    209          //!
    210          //! Function process received frame, converts, checks checksum and validation
    211          //! of signal ID (supported devices)
    212          //!
    213          //! \return Returns signal ID, or -1 if \e deviceAddress is not supported.
    214          //
    215          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          uint16 processFrame(uint8 *buff)
   \                     processFrame:
    217          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    218          	uint8 i = 0;
   \   00000A   7F00         MOV     R7,#0x0
    219          	uint8 j = 0;
   \   00000C   7C00         MOV     R4,#0x0
    220                  uint8 k = 0;
   \   00000E   7E00         MOV     R6,#0x0
   \   000010   8001         SJMP    ??processFrame_0
    221          	
    222                  Data_t *cbData;
    223                  
    224                  // pomocne promjenljive
    225                  char cID[10];
    226                  char cPackNum[10];
    227                  char cCmd[10];
    228                  char cTimeStamp[10];
    229                  char cCheckSum[10];
    230                  
    231                  char dID[10];
    232                  char dCmd[10];
    233                    
    234                  //uint8 newLine = 0x0A;
    235          
    236                  //uint16 broj = 0;
    237                  
    238          	while(*(buff +  i) != 0x3E)//'>')
    239          	{
    240          		i++;
   \                     ??processFrame_1:
   \   000012   0F           INC     R7
    241          	}
   \                     ??processFrame_0:
   \   000013   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000016   643E         XRL     A,#0x3e
   \   000018   70F8         JNZ     ??processFrame_1
    242          	if(*(buff + i) ==  0x3E)//'>')
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   643E         XRL     A,#0x3e
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??processFrame_2 & 0xFFFF
    243          	{
    244          		i++;
   \   000022   12....       LCALL   ?Subroutine7 & 0xFFFF
    245          		if(*(buff + i) ==  0x23)//'#')
   \                     ??CrossCallReturnLabel_13:
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??processFrame_2 & 0xFFFF
    246          		{
    247          			i++;
   \   00002A   8011         SJMP    ??processFrame_3
    248               			while(*(buff + i) !=  0x2C)//',')
    249          			{
    250          				cID[j]=  *(buff + i);
   \                     ??processFrame_4:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   EC           MOV     A,R4
   \   000030   F8           MOV     R0,A
   \   000031   743C         MOV     A,#0x3c
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
    251                                          j++;
   \   00003C   0C           INC     R4
    252          				i++;
   \                     ??processFrame_3:
   \   00003D   0F           INC     R7
    253          			}
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000041   70E9         JNZ     ??processFrame_4
    254                                  cID[j]= '\0';
   \   000043   743C         MOV     A,#0x3c
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine8 & 0xFFFF
    255          		}
    256                          else
    257                          {
    258                            return 0;
    259                          }
    260          		if(*(buff + i) == 0x2C)//',')
   \                     ??CrossCallReturnLabel_18:
   \   00004B   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??processFrame_2 & 0xFFFF
    261          		{
    262          			i++;
   \   000053   12....       LCALL   ?Subroutine7 & 0xFFFF
    263                                  if(*(buff + i) == 0x23)//'#')
   \                     ??CrossCallReturnLabel_14:
   \   000056   7024         JNZ     ??CrossCallReturnLabel_19
    264                                  {
    265                                    i++;
   \   000058   0F           INC     R7
    266                                    j = 0;
   \   000059   7C00         MOV     R4,#0x0
   \   00005B   8012         SJMP    ??processFrame_5
    267                                    while(*(buff + i) != 0x2C)//',')
    268                                    {
    269                                          cPackNum[j]=  *(buff + i);
   \                     ??processFrame_6:
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   EC           MOV     A,R4
   \   000061   F8           MOV     R0,A
   \   000062   7432         MOV     A,#0x32
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
    270          				i++;
   \   00006D   0F           INC     R7
    271          				j++;
   \   00006E   0C           INC     R4
    272                                    }
   \                     ??processFrame_5:
   \   00006F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000072   70E9         JNZ     ??processFrame_6
    273                                    cPackNum[j]= '\0';
   \   000074   7432         MOV     A,#0x32
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine8 & 0xFFFF
    274                                  }
    275                                  
    276          		}
    277                          else
    278                          {
    279                            return 0;
    280                          }
    281          		if(*(buff + i) == 0x2C)//',')
   \                     ??CrossCallReturnLabel_19:
   \   00007C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007F   6003         JZ      $+5
   \   000081   02....       LJMP    ??processFrame_2 & 0xFFFF
    282          		{
    283          			i++;
   \   000084   12....       LCALL   ?Subroutine7 & 0xFFFF
    284                                  if(*(buff + i) == 0x23)//'#')
   \                     ??CrossCallReturnLabel_15:
   \   000087   7024         JNZ     ??CrossCallReturnLabel_20
    285                                  {
    286                                    i++;
   \   000089   0F           INC     R7
    287                                    j = 0;
   \   00008A   7C00         MOV     R4,#0x0
   \   00008C   8012         SJMP    ??processFrame_7
    288                                    while(*(buff + i) != 0x2C)//',')
    289                                    {
    290          				cCmd[j]=  *(buff + i);
   \                     ??processFrame_8:
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   EC           MOV     A,R4
   \   000092   F8           MOV     R0,A
   \   000093   7428         MOV     A,#0x28
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
    291          				i++;
   \   00009E   0F           INC     R7
    292          				j++;
   \   00009F   0C           INC     R4
    293                                    }
   \                     ??processFrame_7:
   \   0000A0   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000A3   70E9         JNZ     ??processFrame_8
    294                                    cCmd[j]= '\0';
   \   0000A5   7428         MOV     A,#0x28
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL   ?Subroutine8 & 0xFFFF
    295                                  }
    296          		}
    297                          else
    298                          {
    299                            return 0;
    300                          }
    301                          if(*(buff + i) == 0x2C)//',')
   \                     ??CrossCallReturnLabel_20:
   \   0000AD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??processFrame_2 & 0xFFFF
    302          		{
    303          			i++;
   \   0000B5   12....       LCALL   ?Subroutine7 & 0xFFFF
    304                                  if(*(buff + i) == 0x23)//'#')
   \                     ??CrossCallReturnLabel_16:
   \   0000B8   7024         JNZ     ??CrossCallReturnLabel_21
    305                                  {
    306                                    i++;
   \   0000BA   0F           INC     R7
    307                                    j = 0;
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   8012         SJMP    ??processFrame_9
    308                                    while(*(buff + i) != 0x2C)//',')
    309                                    {
    310          				cTimeStamp[j]=  *(buff + i);
   \                     ??processFrame_10:
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C0E0         PUSH    A
   \   0000C2   EC           MOV     A,R4
   \   0000C3   F8           MOV     R0,A
   \   0000C4   741E         MOV     A,#0x1e
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000CC   D0E0         POP     A
   \   0000CE   F0           MOVX    @DPTR,A
    311          				i++;
   \   0000CF   0F           INC     R7
    312          				j++;
   \   0000D0   0C           INC     R4
    313                                    }
   \                     ??processFrame_9:
   \   0000D1   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000D4   70E9         JNZ     ??processFrame_10
    314                                    cTimeStamp[j]= '\0';
   \   0000D6   741E         MOV     A,#0x1e
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL   ?Subroutine8 & 0xFFFF
    315                                  }
    316          		}
    317                          else
    318                          {
    319                            return 0;
    320                          }
    321                          if(*(buff + i) == 0x2C)//',')
   \                     ??CrossCallReturnLabel_21:
   \   0000DE   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000E1   6003         JZ      $+5
   \   0000E3   02....       LJMP    ??processFrame_2 & 0xFFFF
    322          		{
    323          			i++;
   \   0000E6   12....       LCALL   ?Subroutine7 & 0xFFFF
    324                                  if(*(buff + i) == 0x23)//'#')
   \                     ??CrossCallReturnLabel_17:
   \   0000E9   7026         JNZ     ??CrossCallReturnLabel_22
    325                                  {
    326                                    i++;
   \   0000EB   0F           INC     R7
    327                                    j = 0;
   \   0000EC   7C00         MOV     R4,#0x0
   \   0000EE   8012         SJMP    ??processFrame_11
    328                                    while(*(buff + i) != 0x3C)//'<')
    329                                    {
    330          				cCheckSum[j]=  *(buff + i);
   \                     ??processFrame_12:
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   EC           MOV     A,R4
   \   0000F4   F8           MOV     R0,A
   \   0000F5   7414         MOV     A,#0x14
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000FD   D0E0         POP     A
   \   0000FF   F0           MOVX    @DPTR,A
    331          				i++;
   \   000100   0F           INC     R7
    332          				j++;
   \   000101   0C           INC     R4
    333                                    }
   \                     ??processFrame_11:
   \   000102   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000105   643C         XRL     A,#0x3c
   \   000107   70E7         JNZ     ??processFrame_12
    334                                    cCheckSum[j]= '\0';
   \   000109   7414         MOV     A,#0x14
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   12....       LCALL   ?Subroutine8 & 0xFFFF
    335                                  }
    336          		}
    337                          else
    338                          {
    339                            return 0;
    340                          }
    341          		
    342          	}
    343                  else
    344                  {
    345                    return 0;
    346                  }
    347          	
    348                  
    349                  
    350                  for(k = 0; k < 2; k++)
    351                  {
    352                    dID[k] = cID[1-k];
   \                     ??CrossCallReturnLabel_22:
   \   000111   EE           MOV     A,R6
   \   000112   F8           MOV     R0,A
   \   000113   C3           CLR     C
   \   000114   E4           CLR     A
   \   000115   98           SUBB    A,R0
   \   000116   FA           MOV     R2,A
   \   000117   95E0         SUBB    A,0xE0 /* A   */
   \   000119   FB           MOV     R3,A
   \   00011A   743C         MOV     A,#0x3c
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine10 & 0xFFFF
    353                    
    354                  }
   \                     ??CrossCallReturnLabel_26:
   \   000122   E0           MOVX    A,@DPTR
   \   000123   C0E0         PUSH    A
   \   000125   740A         MOV     A,#0xa
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00012D   D0E0         POP     A
   \   00012F   F0           MOVX    @DPTR,A
   \   000130   0E           INC     R6
   \   000131   EE           MOV     A,R6
   \   000132   C3           CLR     C
   \   000133   9402         SUBB    A,#0x2
   \   000135   40DA         JC      ??CrossCallReturnLabel_22
    355                  dID[2] = '\0';
   \   000137   740C         MOV     A,#0xc
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   E4           CLR     A
   \   00013D   F0           MOVX    @DPTR,A
    356                  
    357                  for(k = 0; k < 4; k++)
   \   00013E   7E00         MOV     R6,#0x0
    358                  {
    359                    dCmd[k] = cCmd[3-k];
   \                     ??processFrame_13:
   \   000140   EE           MOV     A,R6
   \   000141   F8           MOV     R0,A
   \   000142   C3           CLR     C
   \   000143   E4           CLR     A
   \   000144   98           SUBB    A,R0
   \   000145   FA           MOV     R2,A
   \   000146   95E0         SUBB    A,0xE0 /* A   */
   \   000148   FB           MOV     R3,A
   \   000149   7428         MOV     A,#0x28
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine10 & 0xFFFF
    360                    
    361                  }
   \                     ??CrossCallReturnLabel_27:
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00015F   D0E0         POP     A
   \   000161   F0           MOVX    @DPTR,A
   \   000162   0E           INC     R6
   \   000163   EE           MOV     A,R6
   \   000164   C3           CLR     C
   \   000165   9404         SUBB    A,#0x4
   \   000167   40D7         JC      ??processFrame_13
    362                  dCmd[4] = '\0';
   \   000169   7404         MOV     A,#0x4
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E4           CLR     A
   \   00016F   F0           MOVX    @DPTR,A
    363                  
    364                  
    365                  recPack.appData.devID = (uint16)atoi(dID);
   \   000170                ; Setup parameters for call to function atoi
   \   000170   740A         MOV     A,#0xa
   \   000172   12....       LCALL   ?XSTACK_DISP101_8
   \   000175   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   000178   90....       MOV     DPTR,#recPack
   \   00017B   EA           MOV     A,R2
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   EB           MOV     A,R3
   \   00017F   F0           MOVX    @DPTR,A
    366          	recPack.appData.packNum = (uint8)atoi(cPackNum);
   \   000180                ; Setup parameters for call to function atoi
   \   000180   7432         MOV     A,#0x32
   \   000182   12....       LCALL   ?XSTACK_DISP101_8
   \   000185   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   000188   EA           MOV     A,R2
   \   000189   90....       MOV     DPTR,#recPack + 2
   \   00018C   F0           MOVX    @DPTR,A
    367                  recPack.appData.data = (uint32)atol(dCmd);
   \   00018D                ; Setup parameters for call to function atol
   \   00018D   AA..         MOV     R2,?XSP + 0
   \   00018F   AB..         MOV     R3,?XSP + 1
   \   000191   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   000194   90....       MOV     DPTR,#recPack + 3
   \   000197   12....       LCALL   ?XSTORE_R2345
    368                  //recPack.appData.devID = (uint16)atoi(cID);
    369          	//recPack.appData.packNum = (uint8)atoi(cPackNum);
    370                 // recPack.appData.data = (uint32)atol(cCmd);
    371          	recPack.timeStamp = (uint8)atoi(cTimeStamp);
   \   00019A                ; Setup parameters for call to function atoi
   \   00019A   741E         MOV     A,#0x1e
   \   00019C   12....       LCALL   ?XSTACK_DISP101_8
   \   00019F   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   0001A2   EA           MOV     A,R2
   \   0001A3   90....       MOV     DPTR,#recPack + 7
   \   0001A6   F0           MOVX    @DPTR,A
    372          	recPack.checkSum = (uint8)atoi(cCheckSum);
   \   0001A7                ; Setup parameters for call to function atoi
   \   0001A7   7414         MOV     A,#0x14
   \   0001A9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001AC   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   0001AF   EA           MOV     A,R2
   \   0001B0   90....       MOV     DPTR,#recPack + 8
   \   0001B3   F0           MOVX    @DPTR,A
    373                  
    374                 
    375                  
    376                  
    377                  
    378                  cbData = (struct sData *)(&recPack);
    379                  callBack(cbData);
   \   0001B4                ; Setup parameters for indirect call
   \   0001B4   7A..         MOV     R2,#recPack & 0xff
   \   0001B6   7B..         MOV     R3,#(recPack >> 8) & 0xff
   \   0001B8   90....       MOV     DPTR,#callBack
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F8           MOV     R0,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F583         MOV     DPH,A
   \   0001C1   8882         MOV     DPL,R0
   \   0001C3   12....       LCALL   ?CALL_IND
    380          /*
    381                  _itoa(recPack.appData.data, (uint8 *)dCmd, 10);
    382                  for(k = 0; k < 4; k++)
    383                  {
    384                    cCmd[k] = dCmd[3-k];
    385                    
    386                  }
    387                  cCmd[4] = '\0';
    388                 
    389                 HalUARTWrite(HAL_UART_PORT_1, "ID", 2);
    390                 HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
    391                 //HalUARTWrite(HAL_UART_PORT_1, (uint8 *)cCmd, k+1);
    392                 HalUARTWrite(HAL_UART_PORT_1, (uint8 *)cCmd, 5);
    393                 HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
    394                 HalUARTWrite(HAL_UART_PORT_1, "ID", 2);
    395                 HalUARTWrite(HAL_UART_PORT_1, &newLine, 1);
    396          */
    397                  return recPack.appData.devID;
   \   0001C6   90....       MOV     DPTR,#recPack
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   FA           MOV     R2,A
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   FB           MOV     R3,A
   \                     ??processFrame_14:
   \   0001CE   7446         MOV     A,#0x46
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??processFrame_2:
   \   0001D6   7A00         MOV     R2,#0x0
   \   0001D8   7B00         MOV     R3,#0x0
   \   0001DA   80F2         SJMP    ??processFrame_14
    398                  
    399                  
    400          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E582         MOV     A,DPL
   \   000002   2C           ADD     A,R4
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3583         ADDC    A,DPH
   \   000008   F583         MOV     DPH,A
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   0F           INC     R7
   \   000001   EA           MOV     A,R2
   \   000002   2F           ADD     A,R7
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6423         XRL     A,#0x23
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EF           MOV     A,R7
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EA           MOV     A,R2
   \   000001   28           ADD     A,R0
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3583         ADDC    A,DPH
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EF           MOV     A,R7
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   642C         XRL     A,#0x2c
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    401          //*****************************************************************************
    402          //
    403          //! Calculating checksum.
    404          //!
    405          //! \param frame is pointer on frame on which one is needed to calculated.
    406          //!
    407          //! Function caluculates checksum executing XOR operation on evert member of
    408          //! \b frame.
    409          //!
    410          //! \return Returns result of sumary operation.
    411          //
    412          //*****************************************************************************
    413          static uint8 checksum(DLLPacket_t *frame)
    414          {
    415          	uint8 sum  = 0x00;
    416          	uint8 *ptr = (uint8 *)(frame);
    417          	uint8 *end = &frame->checkSum;
    418          	while(ptr != end)
    419          	{
    420          		sum ^= *ptr;
    421          		ptr++;
    422          	}
    423          
    424          	return sum;
    425          
    426          }
    427          
    428          //*****************************************************************************
    429          //
    430          //! Checks a devices address.
    431          //!
    432          //! \param devAddress is device address.
    433          //!
    434          //! This function determines if a device address is supported.
    435          //!
    436          //! \return Returns \b true if address is supported, or \b false otherwise.
    437          //
    438          //*****************************************************************************
    439          /*
    440          static uint8 devAddressSupport(uint16 devAddress)
    441          {
    442          	return( (devAddress == TEMP_SENSOR_INSIDE) ||
    443          					(devAddress == TEMP_SENSOR_OUTSIDE) ||
    444          					(devAddress == PRESSURE_SENSOR_INSIDE) ||
    445           					(devAddress == PRESSURE_SENSOR_OUTSIDE) ||
    446          					(devAddress == HUMIDITY_SENSOR_INSIDE) ||
    447          					(devAddress == HUMIDITY_SENSOR_OUTSIDE) ||
    448          					(devAddress == DOOR) ||
    449          					(devAddress == WINDOW) ||
    450          					(devAddress == MOTION_SENSOR)
    451          					);
    452          }
    453          */
    454          //*****************************************************************************
    455          //
    456          //! Function that handles data services.
    457          //!
    458          //! \param aData is pointer on data structure.
    459          //! \param port indicates port number.
    460          //!
    461          //! This function prepare data to be ready to send and sets state flag to
    462          //! signals the thread to perform an action.
    463          //!
    464          //! \return None.
    465          //
    466          //*****************************************************************************
    467          
    468          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          static void packFrameToStell(uint8 *buff, DLLPacket_t emPacket)
   \                     packFrameToStell:
    470          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    471            
    472            
    473            //uint32 da;
    474            
    475            int i = 0;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
    476            int j = 0;
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8A..         MOV     ?V3,R2
    477            int k = 0;
    478            uint8 *pBuf = buff;
    479           
    480            uint32 pom = emPacket.appData.data;
   \   000016   741B         MOV     A,#0x1b
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   78..         MOV     R0,#?V4
   \   00001D   12....       LCALL   ?L_MOV_X
    481            
    482            
    483            char dat[4] = {'0','0','0','0'};
   \   000020   90....       MOV     DPTR,#`?<Constant {48, 48, 48, 48}>`
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?XSTACK_DISP102_8
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    484            char daaat[4] = {'0','0','0','0'};
   \   00002D   90....       MOV     DPTR,#`?<Constant {48, 48, 48, 48}>_1`
   \   000030   AC..         MOV     R4,?XSP + 0
   \   000032   AD..         MOV     R5,?XSP + 1
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000039   8024         SJMP    ??packFrameToStell_0
    485           // char *id; //= dat;
    486            
    487           
    488              while(pom)
    489              {
    490                dat[i] = (pom % 16) + '0';
   \                     ??packFrameToStell_1:
   \   00003B   85....       MOV     ?V0,?V4
   \   00003E   E5..         MOV     A,?V0
   \   000040   540F         ANL     A,#0xf
   \   000042   2430         ADD     A,#0x30
   \   000044   C0E0         PUSH    A
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
    491                pom/=256;
   \   000051   E4           CLR     A
   \   000052   C5..         XCH     A,?V7
   \   000054   C5..         XCH     A,?V6
   \   000056   C5..         XCH     A,?V5
   \   000058   F5..         MOV     ?V4,A
    492                i++;
   \   00005A   0A           INC     R2
   \   00005B   EA           MOV     A,R2
   \   00005C   7001         JNZ     ??packFrameToStell_0
   \   00005E   0B           INC     R3
    493              }
   \                     ??packFrameToStell_0:
   \   00005F   E5..         MOV     A,?V4
   \   000061   45..         ORL     A,?V5
   \   000063   45..         ORL     A,?V6
   \   000065   45..         ORL     A,?V7
   \   000067   70D2         JNZ     ??packFrameToStell_1
    494            
    495              k = 4 - i;
   \   000069   7404         MOV     A,#0x4
   \   00006B   C3           CLR     C
   \   00006C   9A           SUBB    A,R2
   \   00006D   F8           MOV     R0,A
   \   00006E   E4           CLR     A
   \   00006F   9B           SUBB    A,R3
   \   000070   F9           MOV     R1,A
    496              for(j = 0; j < k; j++)
   \   000071   E8           MOV     A,R0
   \   000072   FA           MOV     R2,A
   \   000073   E9           MOV     A,R1
   \   000074   FB           MOV     R3,A
   \   000075   C3           CLR     C
   \   000076   E8           MOV     A,R0
   \   000077   9401         SUBB    A,#0x1
   \   000079   E9           MOV     A,R1
   \   00007A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00007D   401A         JC      ??packFrameToStell_2
    497              {
    498                daaat[j] = '0';
   \   00007F   7C30         MOV     R4,#0x30
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \                     ??packFrameToStell_3:
   \   000087   EC           MOV     A,R4
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   EA           MOV     A,R2
   \   00008B   24FF         ADD     A,#-0x1
   \   00008D   1A           DEC     R2
   \   00008E   EB           MOV     A,R3
   \   00008F   34FF         ADDC    A,#-0x1
   \   000091   FB           MOV     R3,A
   \   000092   4A           ORL     A,R2
   \   000093   70F2         JNZ     ??packFrameToStell_3
    499                
    500              }
   \   000095   8A..         MOV     ?V2,R2
   \   000097   8B..         MOV     ?V3,R3
    501              i = 0;
   \                     ??packFrameToStell_2:
   \   000099   7A00         MOV     R2,#0x0
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   802F         SJMP    ??packFrameToStell_4
    502              for(; j < 4; j++)
    503              {   
    504                daaat[k] = dat[i];
   \                     ??packFrameToStell_5:
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000A7   C0E0         PUSH    A
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   E582         MOV     A,DPL
   \   0000B1   28           ADD     A,R0
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E583         MOV     A,DPH
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
    505                k++;
   \   0000BC   08           INC     R0
   \   0000BD   E8           MOV     A,R0
   \   0000BE   7001         JNZ     ??packFrameToStell_6
   \   0000C0   09           INC     R1
    506                i++;
   \                     ??packFrameToStell_6:
   \   0000C1   0A           INC     R2
   \   0000C2   EA           MOV     A,R2
   \   0000C3   7001         JNZ     ??packFrameToStell_7
   \   0000C5   0B           INC     R3
    507                
    508              }
   \                     ??packFrameToStell_7:
   \   0000C6   05..         INC     ?V2
   \   0000C8   E5..         MOV     A,?V2
   \   0000CA   7002         JNZ     ??packFrameToStell_4
   \   0000CC   05..         INC     ?V3
   \                     ??packFrameToStell_4:
   \   0000CE   C3           CLR     C
   \   0000CF   E5..         MOV     A,?V2
   \   0000D1   9404         SUBB    A,#0x4
   \   0000D3   E5..         MOV     A,?V3
   \   0000D5   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000D8   40C5         JC      ??packFrameToStell_5
    509           
    510                //uint8 len = 1 + 1 + 4 + 1 + 1;
    511            *pBuf++ = 0x3E;
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   743E         MOV     A,#0x3e
   \   0000E0   F0           MOVX    @DPTR,A
    512            
    513            *pBuf++ = 0x23;
   \   0000E1   A3           INC     DPTR
   \   0000E2   7423         MOV     A,#0x23
   \   0000E4   F0           MOVX    @DPTR,A
    514            
    515            
    516            *pBuf++ = getSignalID(emPacket.appData.devID) + 0x30;
   \   0000E5   EE           MOV     A,R6
   \   0000E6   2402         ADD     A,#0x2
   \   0000E8   F8           MOV     R0,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F9           MOV     R1,A
   \   0000EC   E8           MOV     A,R0
   \   0000ED   FC           MOV     R4,A
   \   0000EE   E9           MOV     A,R1
   \   0000EF   FD           MOV     R5,A
   \   0000F0   8C82         MOV     DPL,R4
   \   0000F2   8D83         MOV     DPH,R5
   \   0000F4   A3           INC     DPTR
   \   0000F5   A882         MOV     R0,DPL
   \   0000F7   A983         MOV     R1,DPH
   \   0000F9   7418         MOV     A,#0x18
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F5..         MOV     ?V0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F5..         MOV     ?V1,A
   \   000105   7FFF         MOV     R7,#-0x1
   \   000107   7E00         MOV     R6,#0x0
   \                     ??packFrameToStell_8:
   \   000109   EE           MOV     A,R6
   \   00010A   25E0         ADD     A,0xE0 /* A   */
   \   00010C   FA           MOV     R2,A
   \   00010D   E4           CLR     A
   \   00010E   33           RLC     A
   \   00010F   FB           MOV     R3,A
   \   000110   74..         MOV     A,#signalID & 0xff
   \   000112   2A           ADD     A,R2
   \   000113   F582         MOV     DPL,A
   \   000115   74..         MOV     A,#(signalID >> 8) & 0xff
   \   000117   3B           ADDC    A,R3
   \   000118   F583         MOV     DPH,A
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   65..         XRL     A,?V0
   \   00011D   7004         JNZ     ??packFrameToStell_9
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   65..         XRL     A,?V1
   \                     ??packFrameToStell_9:
   \   000123   7002         JNZ     ??packFrameToStell_10
   \   000125   EE           MOV     A,R6
   \   000126   FF           MOV     R7,A
   \                     ??packFrameToStell_10:
   \   000127   7402         MOV     A,#0x2
   \   000129   2E           ADD     A,R6
   \   00012A   FE           MOV     R6,A
   \   00012B   C3           CLR     C
   \   00012C   9412         SUBB    A,#0x12
   \   00012E   40D9         JC      ??packFrameToStell_8
   \   000130   7430         MOV     A,#0x30
   \   000132   2F           ADD     A,R7
   \   000133   8C82         MOV     DPL,R4
   \   000135   8D83         MOV     DPH,R5
   \   000137   F0           MOVX    @DPTR,A
    517            
    518            *pBuf++ = 0x2C;
   \   000138   8882         MOV     DPL,R0
   \   00013A   8983         MOV     DPH,R1
   \   00013C   742C         MOV     A,#0x2c
   \   00013E   F0           MOVX    @DPTR,A
    519            *pBuf++ = 0x23;
   \   00013F   A3           INC     DPTR
   \   000140   7423         MOV     A,#0x23
   \   000142   F0           MOVX    @DPTR,A
    520            
    521            
    522            *pBuf++ = emPacket.appData.packNum + 0x30;
   \   000143   741A         MOV     A,#0x1a
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?Subroutine4 & 0xFFFF
    523            
    524            *pBuf++ = 0x2C;
    525            *pBuf++ = 0x23;
   \                     ??CrossCallReturnLabel_7:
   \   00014B   E8           MOV     A,R0
   \   00014C   2405         ADD     A,#0x5
   \   00014E   F8           MOV     R0,A
   \   00014F   5001         JNC     ??packFrameToStell_11
   \   000151   09           INC     R1
    526            
    527            
    528            for(i = 0; i < 4; i++)
   \                     ??packFrameToStell_11:
   \   000152   7A00         MOV     R2,#0x0
   \   000154   7B00         MOV     R3,#0x0
    529            {
    530              *pBuf++ =daaat[i] ;
   \                     ??packFrameToStell_12:
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   12....       LCALL   ?Subroutine11 & 0xFFFF
    531               //uartSend(data[i]);//+'0');
    532              //HalLcdWriteString((char *)data[i], 0);
    533              //HalLcdWriteString("-----------Simic-----------", 0);
    534            }
   \                     ??CrossCallReturnLabel_29:
   \   00015F   8882         MOV     DPL,R0
   \   000161   8983         MOV     DPH,R1
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   A882         MOV     R0,DPL
   \   000167   A983         MOV     R1,DPH
   \   000169   0A           INC     R2
   \   00016A   EA           MOV     A,R2
   \   00016B   7001         JNZ     ??packFrameToStell_13
   \   00016D   0B           INC     R3
   \                     ??packFrameToStell_13:
   \   00016E   C3           CLR     C
   \   00016F   9404         SUBB    A,#0x4
   \   000171   EB           MOV     A,R3
   \   000172   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000175   40DF         JC      ??packFrameToStell_12
    535            
    536            *pBuf++ = 0x2C;
   \   000177   742C         MOV     A,#0x2c
   \   000179   F0           MOVX    @DPTR,A
    537            *pBuf++ = 0x23;
   \   00017A   A3           INC     DPTR
   \   00017B   7423         MOV     A,#0x23
   \   00017D   F0           MOVX    @DPTR,A
    538            
    539            
    540            *pBuf++ = emPacket.timeStamp + 0x30;  
   \   00017E   741F         MOV     A,#0x1f
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   12....       LCALL   ?Subroutine4 & 0xFFFF
    541            
    542            *pBuf++ = 0x2C;
    543            *pBuf++ = 0x23;
    544            
    545            
    546            *pBuf++ = emPacket.checkSum + 0x30;
   \                     ??CrossCallReturnLabel_8:
   \   000186   7420         MOV     A,#0x20
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   12....       LCALL   ?Subroutine5 & 0xFFFF
    547            *pBuf++ = 0x3C;
   \                     ??CrossCallReturnLabel_9:
   \   000194   743C         MOV     A,#0x3c
   \   000196   12....       LCALL   ?Subroutine5 & 0xFFFF
    548            *pBuf++ = 0x00;
   \                     ??CrossCallReturnLabel_10:
   \   000199   A3           INC     DPTR
   \   00019A   E4           CLR     A
   \   00019B   F0           MOVX    @DPTR,A
    549            /*
    550            da = emPacket.appData.data;
    551            id = (char*)&da;
    552            id[4] = '\0';
    553            HalLcdWriteString("-----------------------------Paket----------------------",0);
    554            HalLcdWriteString(id,0);
    555            HalLcdWriteString("-----------------------------Paket----------------------",0);
    556            */
    557          } 
   \   00019C   7408         MOV     A,#0x8
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   7F08         MOV     R7,#0x8
   \   0001A3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000006   742C         MOV     A,#0x2c
   \   000008   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000B   7423         MOV     A,#0x23
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2430         ADD     A,#0x30
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    558          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          void dllDataRequest(Data_t *aData)
   \                     dllDataRequest:
    560          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    561               
    562                  
    563          	DLLPacket_t emPacket;
    564          
    565                  
    566                  emPacket.appData.devID = aData->devID;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   E8           MOV     A,R0
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
    567                  emPacket.appData.data = aData->data;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   12....       LCALL   ?XLOAD_R4567
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?XSTORE_R4567
    568                  emPacket.appData.packNum = aData->packNum;
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C0E0         PUSH    A
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
    569                  emPacket.timeStamp = 0;
   \   000041   7407         MOV     A,#0x7
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    570          	emPacket.checkSum = checksum(&emPacket);
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   A8..         MOV     R0,?XSP + 0
   \   00004C   A9..         MOV     R1,?XSP + 1
   \                     ??dllDataRequest_0:
   \   00004E   8882         MOV     DPL,R0
   \   000050   8983         MOV     DPH,R1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   CA           XCH     A,R2
   \   000054   6A           XRL     A,R2
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   A882         MOV     R0,DPL
   \   000059   A983         MOV     R1,DPH
   \   00005B   7408         MOV     A,#0x8
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E582         MOV     A,DPL
   \   000062   68           XRL     A,R0
   \   000063   7003         JNZ     ??dllDataRequest_1
   \   000065   E583         MOV     A,DPH
   \   000067   69           XRL     A,R1
   \                     ??dllDataRequest_1:
   \   000068   70E4         JNZ     ??dllDataRequest_0
   \   00006A   EA           MOV     A,R2
   \   00006B   F0           MOVX    @DPTR,A
    571                  
    572                 
    573                  packFrameToStell((uint8 *)uiTxBufferCC2530, emPacket);
   \   00006C                ; Setup parameters for call to function packFrameToStell
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?PUSH_XSTACK8_X
   \   000077   7A..         MOV     R2,#uiTxBufferCC2530 & 0xff
   \   000079   7B..         MOV     R3,#(uiTxBufferCC2530 >> 8) & 0xff
   \   00007B   12....       LCALL   `??packFrameToStell::?relay`; Banked call to: packFrameToStell
   \   00007E   7409         MOV     A,#0x9
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    574                  //array2circular(cTxBuffer, txBuffer, *txIndex);
    575                  
    576                  /*HalLcdWriteString("Velicina je:",0);
    577                  uartSend(sizeof(uint32)+'0');
    578                  HalLcdWriteString("",0);
    579                  HalLcdWriteString("Velicina je:",0);
    580                  */
    581                  //halUARTWrite(cTxBuffer, 0);
    582                  //HalLcdWriteString("Miso----------------------",0); 
    583                  
    584                 // halUARTWrite(port, cTxBuffer, 0);
    585                  
    586                  //HalLcdWriteString(uiTxBufferCC2530, 0);
    587                  
    588               ////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
    589                 //HalUARTWrite(HAL_UART_PORT_1, (uint8 *)uiTxBufferCC2530, 19);
    590               ////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
    591          
    592                  
    593                  //HalLcdWriteString(uiTxBufferCC2530, 0);
    594                  
    595          	emFlagCC2530 = EMISSION_START;
   \   000083   90....       MOV     DPTR,#emFlagCC2530
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
    596          	
    597          	//idde = emPacket.appData.devID;//
    598                  
    599                  //idde = aData->devID;
    600                  
    601                  //idde = (uint16)getSignalID(emPacket.appData.devID);//+ 0x30;
    602                  
    603                  //idde = aData->devID;
    604                  //idde = aData.devID;
    605                  
    606                  //id = (char*)&emPacket.appData.data;
    607                  //id = (char*)&emPacket.appData.devID;
    608                  
    609                  //da = emPacket.appData.data;
    610                  
    611                  //num = emPacket.timeStamp + 0x30;
    612                 // num = emPacket.appData.packNum + 0x30;
    613                  //num = emPacket.checkSum + 0x30;
    614                  
    615                  //id = (char*)&idde;
    616                  //id = (char*)&da;
    617                  //id = (char*)&num;
    618                  
    619                  //id[0] += 0x30;
    620                  //id[1] += 0x30;
    621                  
    622                  //id[2] = '\0';
    623                  //id[1] = '\0';
    624                  //id[4] = '\0';
    625                  
    626                  //HalLcdWriteString("-----------------------------Borislav----------------------",0);
    627                  //HalLcdWriteString(id,0);
    628                  //uartSend(emPacket.checkSum+'0');
    629                  //HalLcdWriteString("", 0);
    630                  //HalLcdWriteString("-----------------------------Borislav----------------------",0);
    631          
    632          }
   \   000089   7409         MOV     A,#0x9
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F02         MOV     R7,#0x2
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??dllInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dllInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CallBackRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CallBackRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??getSignalAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getSignalAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??processFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    processFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??packFrameToStell::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packFrameToStell

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??dllDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dllDataRequest

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 48, 48, 48}>`:
   \   000000   30           DB 48
   \   000001   30           DB 48
   \   000002   30           DB 48
   \   000003   30           DB 48

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 48, 48, 48}>_1`:
   \   000000   30           DB 48
   \   000001   30           DB 48
   \   000002   30           DB 48
   \   000003   30           DB 48

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   CallBackRegister
      1     28   dllDataRequest
        0     28   -> packFrameToStell
      2      0   dllInit
        2      0   -> circularInit
      0      9   getSignalAddress
      1     52   packFrameToStell
      1     79   processFrame
        0     79   -> atoi
        0     79   -> atol


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant {48, 48, 48, 48}>
       4  ?<Constant {48, 48, 48, 48}>_1
       6  ??Subroutine17_0
       7  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       5  ?Subroutine11
       5  ?Subroutine12
      10  ?Subroutine13
      10  ?Subroutine14
      11  ?Subroutine15
       9  ?Subroutine16
       2  ?Subroutine2
      11  ?Subroutine3
      15  ?Subroutine4
       6  ?Subroutine5
       6  ?Subroutine6
      13  ?Subroutine7
      13  ?Subroutine8
       8  ?Subroutine9
      14  CallBackRegister
       6  CallBackRegister::?relay
     260  cTxBufferCC2530
       2  callBack
     147  dllDataRequest
       6  dllDataRequest::?relay
      24  dllInit
       6  dllInit::?relay
       1  emFlagCC2530
      51  getSignalAddress
       6  getSignalAddress::?relay
     422  packFrameToStell
       6  packFrameToStell::?relay
     476  processFrame
       6  processFrame::?relay
       9  recPack
     260  rxBufferCC2530
       1  rxBufferCC2530Index
     260  rxBufferPC
      18  signalID
       1  stateCC2530
       1  tmpCC2530
       1  txBufferCC2530Index
     256  uiRxBufferCC2530
     256  uiTxBufferCC2530

 
 1 281 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_ROM_C
 1 308 bytes in segment XDATA_Z
 
    36 bytes of CODE     memory
    26 bytes of CONST    memory
 1 281 bytes of HUGECODE memory
 1 308 bytes of XDATA    memory

Errors: none
Warnings: none
