###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                13/Apr/2017  10:19:10
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          
     91          #define GENERICAPP_ENDPOINT           10
     92          
     93          #define GENERICAPP_PROFID             0x0F04
     94          #define GENERICAPP_DEVICEID           0x0001
     95          #define GENERICAPP_DEVICE_VERSION     0
     96          #define GENERICAPP_FLAGS              0
     97          
     98          #define GENERICAPP_MAX_CLUSTERS       1
     99          #define GENERICAPP_CLUSTERID          1
    100          
    101          
    102          #define MAX_NUMBER_OF_ENDDEVICES      10
    103          
    104          
    105          // magnetic switch macros
    106          #define DOOR_CLOSED_DETECTION P1_2
    107          #define TRUE 1
    108          #define CLOSED 1
    109          #define OPENED 0
    110          // magnetic switch macros end
    111             
    112          
    113          #define HAL_UART_ISR 1
                         ^
Warning[Pe047]: incompatible redefinition of macro "HAL_UART_ISR" (declared at
          line 549 of
          "C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\z
          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\targe
          t\CC2530EB\hal_board_cfg.h")
    114          
    115          #define HAL_UART_MSECS_TO_TICKS    33
    116          
    117          #if !defined HAL_UART_ISR_IDLE
    118          #define HAL_UART_ISR_IDLE         (6 * HAL_UART_MSECS_TO_TICKS)
    119          #endif
    120          
    121          #if !defined HAL_UART_ISR_RX_MAX
    122          #define HAL_UART_ISR_RX_MAX        128
    123          #endif
    124          #if !defined HAL_UART_ISR_TX_MAX
    125          #define HAL_UART_ISR_TX_MAX        HAL_UART_ISR_RX_MAX
    126          #endif
    127             
    128          /*********************************************************************
    129           * CONSTANTS
    130           */
    131          
    132          /*********************************************************************
    133           * TYPEDEFS
    134           */
    135          
    136          /*********************************************************************
    137           * GLOBAL VARIABLES
    138           */
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          
    143          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    147             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 *buff;
   \                     buff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 brojac = 0;
   \                     brojac:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          uint8 txBuff = 97;
   \                     txBuff:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for txBuff>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 rxBuff[HAL_UART_ISR_RX_MAX];
   \                     rxBuff:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          halUARTCfg_t uartConfig;
   \                     uartConfig:
   \   000000                DS 29
   \   00001D                REQUIRE __INIT_XDATA_Z
    163          
    164          
    165          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    166          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    167          {
    168            GENERICAPP_CLUSTERID
    169          };
    170          

   \                                 In  segment XDATA_ROM_C, align 1
    171          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    172          {
    173            GENERICAPP_ENDPOINT,              //  int Endpoint;
    174            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    175            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    176            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    177            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    178            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    179            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    180            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    181            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    182          };
    183          
    184          // This is the Endpoint/Interface description.  It is defined here, but
    185          // filled-in in GenericApp_Init().  Another way to go would be to fill
    186          // in the structure here and make it a "const" (in code space).  The
    187          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    189          
    190          /*********************************************************************
    191           * EXTERNAL VARIABLES
    192           */
    193          
    194          /*********************************************************************
    195           * EXTERNAL FUNCTIONS
    196           */
    197          
    198            extern void uartInit(void);
    199            extern void uartSend(char);
    200           // void LazoInit(void);
    201          
    202          /*********************************************************************
    203           * LOCAL VARIABLES
    204           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206                                    // This variable will be received when
    207                                    // GenericApp_Init() is called.
    208          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    214          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          afAddrType_t GenericApp_DstAddress[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
                                                                                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     GenericApp_DstAddress:
   \   000000                DS 120
   \   000078                REQUIRE __INIT_XDATA_Z
    216          
    217          // Number of recieved messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    219          
    220          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    221          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    222          
    223          /*********************************************************************
    224           * LOCAL FUNCTIONS
    225           */
    226          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    227          static void GenericApp_HandleKeys( byte shift, byte keys );
    228          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    229          static void GenericApp_SendTheMessage( void );
    230          
    231          static void GenericApp_EndPointList(uint16);
    232          
    233          #if defined( IAR_ARMCM3_LM )
    234          static void GenericApp_ProcessRtosMessage( void );
    235          #endif
    236          
    237          /*********************************************************************
    238           * NETWORK LAYER CALLBACKS
    239           */
    240          
    241          /*********************************************************************
    242           * PUBLIC FUNCTIONS
    243           */
    244          
    245          /*********************************************************************
    246           * @fn      GenericApp_Init
    247           *
    248           * @brief   Initialization function for the Generic App Task.
    249           *          This is called during initialization and should contain
    250           *          any application specific initialization (ie. hardware
    251           *          initialization/setup, table initialization, power up
    252           *          notificaiton ... ).
    253           *
    254           * @param   task_id - the ID assigned by OSAL.  This ID should be
    255           *                    used to send messages and set timers.
    256           *
    257           * @return  none
    258           *//*
    259          void LazoInit()
    260          {
    261          	  uint16 count;
    262             
    263            // Podesavanje da P0.1 ima GPIO funkciju  
    264            P0SEL &= 0xFD;
    265                  
    266            // Podesavanje P0.1 izlazni 
    267            P0DIR |= 0x02;
    268            
    269            // Podesavanje da svi pinovi porta P0 imaju pulldown konfiguraciju
    270            P2INP = 0x20;
    271            
    272            // led for indication
    273            //LED = 0;
    274            
    275            // config struct
    276            
    277          	
    278            // initialize structure for uart config
    279            uartConfig.configured = TRUE;
    280            uartConfig.baudRate = HAL_UART_BR_9600;
    281            uartConfig.flowControl = FALSE;
    282            
    283            uartConfig.idleTimeout = HAL_UART_ISR_IDLE;
    284            uartConfig.intEnable = TRUE;
    285            uartConfig.callBackFunc = NULL;
    286          	
    287            //config tx options
    288            uartConfig.tx.maxBufSize = HAL_UART_ISR_TX_MAX;
    289            uartConfig.tx.pBuffer = &txBuff;
    290            
    291            //config rx options
    292            uartConfig.rx.maxBufSize = HAL_UART_ISR_RX_MAX;
    293            uartConfig.rx.pBuffer = rxBuff;
    294            //uartConfig.rx.Tail = 0;
    295            //uartConfig.rx.Head = 0;
    296            // enable global interrupt
    297          	EA = 1;
    298            
    299            // provjeriti je li UART "definisan"
    300            
    301            HalUARTInit();
    302            uartInit();
    303            
    304            
    305            
    306            //HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
    307          }
    308          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    311            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    312            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    313            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    314            
    315            // Device hardware initialization can be added here or in main() (Zmain.c).
    316            // If the hardware is application specific - add it here.
    317            // If the hardware is other parts of the device add it in main().
    318          
    319            /*GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    320            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
    321            GenericApp_DstAddr.addr.shortAddr = 0xFFFF; //0;// NLME_GetShortAddr();//1;*/
    322          
    323            // Fill out the endpoint description.
    324            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000015   90....       MOV     DPTR,#GenericApp_epDesc
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
    325            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
    326            GenericApp_epDesc.simpleDesc
    327                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
    328            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    329          
    330            // Register the endpoint description with the AF
    331            afRegister( &GenericApp_epDesc );
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    332          
    333            // Register for all key events - This app will handle all key events
    334            RegisterForKeys( GenericApp_TaskID );
   \   000035                ; Setup parameters for call to function RegisterForKeys
   \   000035   90....       MOV     DPTR,#GenericApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    335          
    336            // Update the display
    337          #if defined ( LCD_SUPPORTED )
    338            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00003D                ; Setup parameters for call to function HalLcdWriteString
   \   00003D   7901         MOV     R1,#0x1
   \   00003F   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000041   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000043   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    339          #endif
    340          
    341            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000046                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000046   7A20         MOV     R2,#0x20
   \   000048   7B80         MOV     R3,#-0x80
   \   00004A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    342            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A06         MOV     R2,#0x6
   \   000054   7B80         MOV     R3,#-0x80
   \   000056   90....       MOV     DPTR,#GenericApp_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    343          
    344          #if defined( IAR_ARMCM3_LM )
    345            // Register this task with RTOS task initiator
    346            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    347          #endif
    348          }
   \   00005E                REQUIRE ?Subroutine0
   \   00005E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          /*********************************************************************
    350           * @fn      GenericApp_EndPointList
    351           *
    352           * @brief   Get's short address of end device and put in the end device 
    353                      array
    354           *
    355           * @param   shAddr  - Short Address of connected End Device
    356           * 
    357           * @return  none
    358           */
    359          static void GenericApp_EndPointList(uint16 shAddr)
    360          {
    361           
    362            if(index > MAX_NUMBER_OF_ENDDEVICES)
    363            {
    364              HalLcdWriteString("Max number of end devices overflow.",0);
    365            }
    366            else
    367            {
    368              shortAddressOfEndDevice[index];
                     ^
Warning[Pe174]: expression has no effect
    369              index++;
    370            }
    371            
    372            
    373          }
    374          /*********************************************************************
    375           * @fn      GenericApp_ProcessEvent
    376           *
    377           * @brief   Generic Application Task event processor.  This function
    378           *          is called to process all events for the task.  Events
    379           *          include timers, messages and any other user defined events.
    380           *
    381           * @param   task_id  - The OSAL assigned task ID.
    382           * @param   events - events to process.  This is a bit map and can
    383           *                   contain more than one event.
    384           *
    385           * @return  none
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    389            afIncomingMSGPacket_t *MSGpkt;
    390            afDataConfirm_t *afDataConfirm;
    391            zAddrType_t dstAddr;
    392          
    393              uint8 flag = 0;
   \   00000E   75..00       MOV     ?V4,#0x0
    394              uint8 i;
    395          
    396          
    397            // Data Confirmation message fields
    398            byte sentEP;
    399            ZStatus_t sentStatus;
    400            byte sentTransID;       // This should match the value sent
    401            (void)task_id;  // Intentionally unreferenced parameter
    402          
    403            if ( events & SYS_EVENT_MSG )
   \   000011   EB           MOV     A,R3
   \   000012   5480         ANL     A,#0x80
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    404            {
    405              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000019                ; Setup parameters for call to function osal_msg_receive
   \   000019   8013         SJMP    ??GenericApp_ProcessEvent_1
    406              
    407             
    408              while ( MSGpkt )
    409              {
    410                switch ( MSGpkt->hdr.event )
    411                {
    412                  case ZDO_CB_MSG:
    413                    
    414                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    415                    
    416                    break;
    417          
    418                  case KEY_CHANGE:                                                        /////////////////////////////////////////////// case KEY_CHANGE: prazno ????????????????????????????
    419          
    420                    break;
    421          
    422                  case AF_DATA_CONFIRM_CMD:
    423                    // This message is received as a confirmation of a data packet sent.
    424                    // The status is of ZStatus_t type [defined in ZComDef.h]
    425                    // The message fields are defined in AF.h
    426                   
    427                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    428          
    429                    sentEP = afDataConfirm->endpoint;
    430                    (void)sentEP;  // This info not used now
    431                    sentTransID = afDataConfirm->transID;
    432                    (void)sentTransID;  // This info not used now
    433          
    434                    sentStatus = afDataConfirm->hdr.status;
    435                    // Action taken when confirmation is received.
    436                    if ( sentStatus != ZSuccess )
    437                    {
    438                      // The data wasn't delivered -- Do something
    439                    }
    440                    break;
    441          
    442                  case AF_INCOMING_MSG_CMD:
    443                    
    444                    if(0==brojac)
    445                    {
    446                     shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    447                     brojac++;
    448                    }
    449                    else
    450                    {
    451                      for(i = 0; i<brojac; i++)
    452                      {
    453                        if(shortAddressOfEndDevice[i]==MSGpkt->macSrcAddr)
    454                        {
    455                          flag++;
    456                        }
    457                      }
    458                    
    459                      if(0 == flag)
    460                      {
    461                        shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    462                        brojac++;
    463                      }
    464                      else
    465                      {
    466                        flag = 0;
    467                      }
    468                    }
    469                    
    470                    for(i = 0; i<brojac; i++)
    471                    {
    472                      GenericApp_DstAddress[i].addrMode = (afAddrMode_t)Addr16Bit;
    473                      GenericApp_DstAddress[i].endPoint = GENERICAPP_ENDPOINT;
    474                      GenericApp_DstAddress[i].addr.shortAddr = shortAddressOfEndDevice[i];
    475                    }
    476                    
    477                   GenericApp_MessageMSGCB( MSGpkt );
    478                   
    479                    break;
    480          
    481                  case ZDO_STATE_CHANGE:
    482                     
    483                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    484                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    485                         (GenericApp_NwkState == DEV_ROUTER) ||
    486                         (GenericApp_NwkState == DEV_END_DEVICE) )
    487                    {
    488                      
    489                     
    490                      // Start sending "the" message in a regular interval.
    491                      osal_start_timerEx( GenericApp_TaskID,
    492                                          GENERICAPP_SEND_MSG_EVT,
    493                                          txMsgDelay );
    494                    }
    495                                
    496                    break;
    497          
    498                  default:
    499                     
    500                    
    501                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   00001B                ; Setup parameters for call to function osal_set_event
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   90....       MOV     DPTR,#GenericApp_TaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    502                     break;
    503                }
    504          
    505                // Release the memory
    506                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000027                ; Setup parameters for call to function osal_msg_deallocate
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    507          
    508                // Next
    509                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002E                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000036   8A..         MOV     ?V2,R2
   \   000038   8B..         MOV     ?V3,R3
   \   00003A   AE..         MOV     R6,?V2
   \   00003C   AF..         MOV     R7,?V3
   \   00003E   EE           MOV     A,R6
   \   00003F   4F           ORL     A,R7
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   24E6         ADD     A,#-0x1a
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   000051   245A         ADD     A,#0x5a
   \   000053   60D2         JZ      ??GenericApp_ProcessEvent_3
   \   000055   24EF         ADD     A,#-0x11
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   00005C   24FE         ADD     A,#-0x2
   \   00005E   6006         JZ      ??GenericApp_ProcessEvent_7
   \   000060   24D6         ADD     A,#-0x2a
   \   000062   60C3         JZ      ??GenericApp_ProcessEvent_3
   \   000064   80B5         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_7:
   \   000066   EE           MOV     A,R6
   \   000067   240C         ADD     A,#0xc
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   F583         MOV     DPH,A
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V3,A
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00007B   0000         DW        0
   \   00007D   0200         DW        2
   \   00007F   0680         DW        32774
   \   000081   ....         DW        ??GenericApp_ProcessEvent_8
   \   000083   2080         DW        32800
   \   000085   ....         DW        ??GenericApp_ProcessEvent_9
   \   000087   ....         DW        ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_8:
   \   000089                ; Setup parameters for call to function HalLcdWriteString
   \   000089   7900         MOV     R1,#0x0
   \   00008B   7A..         MOV     R2,#`?<Constant "End Device Match Desc">` & 0xff
   \   00008D   7B..         MOV     R3,#(`?<Constant "End Device Match Desc">` >> 8) & 0xff
   \   00008F   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000092                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000099   8A..         MOV     ?V2,R2
   \   00009B   8B..         MOV     ?V3,R3
   \   00009D   EA           MOV     A,R2
   \   00009E   45..         ORL     A,?V3
   \   0000A0   6085         JZ      ??GenericApp_ProcessEvent_3
   \   0000A2   8A82         MOV     DPL,R2
   \   0000A4   8B83         MOV     DPH,R3
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   702A         JNZ     ??GenericApp_ProcessEvent_10
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6024         JZ      ??GenericApp_ProcessEvent_10
   \   0000AF   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   A3           INC     DPTR
   \   0000BA   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000BD   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000C0   E8           MOV     A,R0
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E9           MOV     A,R1
   \   0000C4   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC                ; Setup parameters for call to function HalLedSet
   \   0000CC   7A01         MOV     R2,#0x1
   \   0000CE   7908         MOV     R1,#0x8
   \   0000D0   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??GenericApp_ProcessEvent_10:
   \   0000D3                ; Setup parameters for call to function osal_mem_free
   \   0000D3   AA..         MOV     R2,?V2
   \   0000D5   AB..         MOV     R3,?V3
   \   0000D7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000DA   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2413         ADD     A,#0x13
   \   0000E0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E3   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   0000E5                ; Setup parameters for call to function HalLedSet
   \   0000E5   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   0000E7   7908         MOV     R1,#0x8
   \   0000E9   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000EC   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   0000EF                ; Setup parameters for call to function HalLedSet
   \   0000EF   7A04         MOV     R2,#0x4
   \   0000F1   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_5:
   \   0000F3   90....       MOV     DPTR,#brojac
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   6024         JZ      ??GenericApp_ProcessEvent_13
   \   0000F9   7C00         MOV     R4,#0x0
   \                     ??GenericApp_ProcessEvent_14:
   \   0000FB   EC           MOV     A,R4
   \   0000FC   25E0         ADD     A,0xE0 /* A   */
   \   0000FE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000101   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000104   68           XRL     A,R0
   \   000105   7003         JNZ     ??GenericApp_ProcessEvent_15
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   69           XRL     A,R1
   \                     ??GenericApp_ProcessEvent_15:
   \   00010A   7002         JNZ     ??GenericApp_ProcessEvent_16
   \   00010C   05..         INC     ?V4
   \                     ??GenericApp_ProcessEvent_16:
   \   00010E   0C           INC     R4
   \   00010F   90....       MOV     DPTR,#brojac
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F8           MOV     R0,A
   \   000114   EC           MOV     A,R4
   \   000115   C3           CLR     C
   \   000116   98           SUBB    A,R0
   \   000117   40E2         JC      ??GenericApp_ProcessEvent_14
   \   000119   E5..         MOV     A,?V4
   \   00011B   7028         JNZ     ??GenericApp_ProcessEvent_17
   \                     ??GenericApp_ProcessEvent_13:
   \   00011D   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000120   FA           MOV     R2,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FB           MOV     R3,A
   \   000124   90....       MOV     DPTR,#brojac
   \   000127   E0           MOVX    A,@DPTR
   \   000128   25E0         ADD     A,0xE0 /* A   */
   \   00012A   F8           MOV     R0,A
   \   00012B   E4           CLR     A
   \   00012C   33           RLC     A
   \   00012D   F9           MOV     R1,A
   \   00012E   74..         MOV     A,#shortAddressOfEndDevice & 0xff
   \   000130   28           ADD     A,R0
   \   000131   F582         MOV     DPL,A
   \   000133   74..         MOV     A,#(shortAddressOfEndDevice >> 8) & 0xff
   \   000135   39           ADDC    A,R1
   \   000136   F583         MOV     DPH,A
   \   000138   EA           MOV     A,R2
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   A3           INC     DPTR
   \   00013B   EB           MOV     A,R3
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   90....       MOV     DPTR,#brojac
   \   000140   E0           MOVX    A,@DPTR
   \   000141   04           INC     A
   \   000142   F0           MOVX    @DPTR,A
   \   000143   8003         SJMP    ??GenericApp_ProcessEvent_18
   \                     ??GenericApp_ProcessEvent_17:
   \   000145   75..00       MOV     ?V4,#0x0
   \                     ??GenericApp_ProcessEvent_18:
   \   000148   7C00         MOV     R4,#0x0
   \   00014A   8039         SJMP    ??GenericApp_ProcessEvent_19
   \                     ??GenericApp_ProcessEvent_20:
   \   00014C   EC           MOV     A,R4
   \   00014D   F8           MOV     R0,A
   \   00014E   75F00C       MOV     B,#0xc
   \   000151   A4           MUL     AB
   \   000152   FA           MOV     R2,A
   \   000153   ABF0         MOV     R3,B
   \   000155   74..         MOV     A,#GenericApp_DstAddress & 0xff
   \   000157   2A           ADD     A,R2
   \   000158   FA           MOV     R2,A
   \   000159   74..         MOV     A,#(GenericApp_DstAddress >> 8) & 0xff
   \   00015B   3B           ADDC    A,R3
   \   00015C   FB           MOV     R3,A
   \   00015D   8A82         MOV     DPL,R2
   \   00015F   8B83         MOV     DPH,R3
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   740A         MOV     A,#0xa
   \   000175   F0           MOVX    @DPTR,A
   \   000176   E8           MOV     A,R0
   \   000177   28           ADD     A,R0
   \   000178   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00017B   8A82         MOV     DPL,R2
   \   00017D   8B83         MOV     DPH,R3
   \   00017F   E8           MOV     A,R0
   \   000180   F0           MOVX    @DPTR,A
   \   000181   A3           INC     DPTR
   \   000182   E9           MOV     A,R1
   \   000183   F0           MOVX    @DPTR,A
   \   000184   0C           INC     R4
   \                     ??GenericApp_ProcessEvent_19:
   \   000185   90....       MOV     DPTR,#brojac
   \   000188   E0           MOVX    A,@DPTR
   \   000189   F8           MOV     R0,A
   \   00018A   EC           MOV     A,R4
   \   00018B   C3           CLR     C
   \   00018C   98           SUBB    A,R0
   \   00018D   40BD         JC      ??GenericApp_ProcessEvent_20
   \   00018F                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   00018F   EE           MOV     A,R6
   \   000190   FA           MOV     R2,A
   \   000191   EF           MOV     A,R7
   \   000192   FB           MOV     R3,A
   \   000193   12....       LCALL   `??GenericApp_MessageMSGCB::?relay`; Banked call to: GenericApp_MessageMSGCB
   \   000196   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   6409         XRL     A,#0x9
   \   0001A1   600D         JZ      ??GenericApp_ProcessEvent_21
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   6407         XRL     A,#0x7
   \   0001A6   6008         JZ      ??GenericApp_ProcessEvent_21
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   6406         XRL     A,#0x6
   \   0001AB   6003         JZ      $+5
   \   0001AD   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_21:
   \   0001B0                ; Setup parameters for call to function osal_start_timerEx
   \   0001B0   90....       MOV     DPTR,#txMsgDelay
   \   0001B3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001B6   7A01         MOV     R2,#0x1
   \   0001B8   7B00         MOV     R3,#0x0
   \   0001BA   90....       MOV     DPTR,#GenericApp_TaskID
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F9           MOV     R1,A
   \   0001BF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001C2   7404         MOV     A,#0x4
   \   0001C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C7   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    510                  
    511              }
    512          
    513              // return unprocessed events
    514              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   0001CA   AA..         MOV     R2,?V0
   \   0001CC   E5..         MOV     A,?V1
   \   0001CE   6480         XRL     A,#0x80
   \   0001D0   FB           MOV     R3,A
   \   0001D1   02....       LJMP    ??GenericApp_ProcessEvent_22 & 0xFFFF
    515            }
    516          
    517            // Send a message out - This event is generated by a timer
    518            //  (setup in GenericApp_Init()).
    519            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   0001D4   EA           MOV     A,R2
   \   0001D5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001D7   4003         JC      $+5
   \   0001D9   02....       LJMP    ??GenericApp_ProcessEvent_23 & 0xFFFF
    520            {
    521              if(keyPressSW4)
   \   0001DC   90....       MOV     DPTR,#keyPressSW4
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   606A         JZ      ??GenericApp_ProcessEvent_24
    522              {
    523                
    524                dstAddr.addrMode = Addr16Bit;
   \   0001E2   7408         MOV     A,#0x8
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   7402         MOV     A,#0x2
   \   0001E9   F0           MOVX    @DPTR,A
    525                dstAddr.addr.shortAddr = 0x0000;//NLME_GetShortAddr();//0x0000; // Coordinator
   \   0001EA   85..82       MOV     DPL,?XSP + 0
   \   0001ED   85..83       MOV     DPH,?XSP + 1
   \   0001F0   E4           CLR     A
   \   0001F1   F0           MOVX    @DPTR,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   F0           MOVX    @DPTR,A
    526                ZDP_EndDeviceBindReq( &dstAddr, 0x0000, //NLME_GetShortAddr(),
    527                                      GenericApp_epDesc.endPoint,
    528                                      GENERICAPP_PROFID,
    529                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    530                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    531                                      FALSE );
   \   0001F4   75....       MOV     ?V2,#GenericApp_ClusterList & 0xff
   \   0001F7   75....       MOV     ?V3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001FA                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0001FA   78..         MOV     R0,#?V4
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001FF   78..         MOV     R0,#?V2
   \   000201   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000204   75..01       MOV     ?V4,#0x1
   \   000207   78..         MOV     R0,#?V4
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020C   78..         MOV     R0,#?V2
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000211   75..01       MOV     ?V2,#0x1
   \   000214   78..         MOV     R0,#?V2
   \   000216   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000219   75..04       MOV     ?V2,#0x4
   \   00021C   75..0F       MOV     ?V3,#0xf
   \   00021F   78..         MOV     R0,#?V2
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000224   90....       MOV     DPTR,#GenericApp_epDesc
   \   000227   E0           MOVX    A,@DPTR
   \   000228   F9           MOV     R1,A
   \   000229   7C00         MOV     R4,#0x0
   \   00022B   7D00         MOV     R5,#0x0
   \   00022D   7409         MOV     A,#0x9
   \   00022F   12....       LCALL   ?XSTACK_DISP101_8
   \   000232   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000235   7409         MOV     A,#0x9
   \   000237   12....       LCALL   ?DEALLOC_XSTACK8
    532                
    533                keyPressSW4 = 0;
   \   00023A   90....       MOV     DPTR,#keyPressSW4
   \   00023D   E4           CLR     A
   \   00023E   F0           MOVX    @DPTR,A
    534                
    535                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   00023F                ; Setup parameters for call to function osal_set_event
   \   00023F   7A01         MOV     R2,#0x1
   \   000241   FB           MOV     R3,A
   \   000242   90....       MOV     DPTR,#GenericApp_TaskID
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F9           MOV     R1,A
   \   000247   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00024A   802F         SJMP    ??GenericApp_ProcessEvent_25
    536                
    537              }
    538              else
    539              {
    540                //uint8 l=0;
    541                //for(int i=0; i< len; i++)                             //*buff != NULL)
    542                 //HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
    543               //HalUARTRead(HAL_UART_PORT_0, buff, 2);
    544               //if(HalUARTRead(HAL_UART_PORT_0, buff, 2))
    545                /*while(buff[l]!='\0')
    546                {
    547                  //buff[i] = U0DBUF;   
    548                  buff[l] = uartGet();
    549                  //*buff = uartGet(); 
                          ^
Warning[Pe009]: nested comment is not allowed
    550                  //buff++;
    551                  l++;
    552                }*/
    553                //if(l==0)
    554                //HalLcdRead(buff, 1);
    555                //buff++;
    556                
    557                 
    558                
    559                HalLcdRead(buff, 1);
   \                     ??GenericApp_ProcessEvent_24:
   \   00024C                ; Setup parameters for call to function HalLcdRead
   \   00024C   7901         MOV     R1,#0x1
   \   00024E   90....       MOV     DPTR,#buff
   \   000251   E0           MOVX    A,@DPTR
   \   000252   FA           MOV     R2,A
   \   000253   A3           INC     DPTR
   \   000254   E0           MOVX    A,@DPTR
   \   000255   FB           MOV     R3,A
   \   000256   12....       LCALL   `??HalLcdRead::?relay`; Banked call to: HalLcdRead
    560                //HalLcdWriteString("Sinisa",0); 
    561                //if(buff[0]='\0')
    562              /*  for(i = 0;i <3;i++)
    563                    {
    564                      uartSend(*(buff + i));
    565                    }
    566                
    567                    HalLcdWriteString("",0);
    568                    HalLcdWriteString("--------------------------------",0);
    569                  */
    570               if((char)*buff!='\0')
   \   000259   90....       MOV     DPTR,#buff
   \   00025C   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00025F   6003         JZ      ??GenericApp_ProcessEvent_26
    571               {
    572                 GenericApp_SendTheMessage();
   \   000261                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000261   12....       LCALL   `??GenericApp_SendTheMessage::?relay`; Banked call to: GenericApp_SendTheMessage
    573                 //HalLcdWriteString("Sile before send",0);
    574               }
    575              
    576          
    577               
    578               
    579               
    580              // Send "the" message
    581               //GenericApp_SendTheMessage();                                              //////////////////////////////////////////////////////////////////////////////////////////////////
    582               
    583               //Setup to send message again
    584               osal_start_timerEx( GenericApp_TaskID,
    585                                   GENERICAPP_SEND_MSG_EVT,
    586                                   1000); //txMsgDelay );
   \                     ??GenericApp_ProcessEvent_26:
   \   000264                ; Setup parameters for call to function osal_start_timerEx
   \   000264   90....       MOV     DPTR,#__Constant_3e8
   \   000267   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00026A   7A01         MOV     R2,#0x1
   \   00026C   7B00         MOV     R3,#0x0
   \   00026E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000271   E0           MOVX    A,@DPTR
   \   000272   F9           MOV     R1,A
   \   000273   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000276   7404         MOV     A,#0x4
   \   000278   12....       LCALL   ?DEALLOC_XSTACK8
    587              
    588              // osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
    589              
    590              }
    591              // return unprocessed events
    592              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_25:
   \   00027B   E5..         MOV     A,?V0
   \   00027D   6401         XRL     A,#0x1
   \   00027F   FA           MOV     R2,A
   \   000280   AB..         MOV     R3,?V1
   \   000282   8004         SJMP    ??GenericApp_ProcessEvent_22
    593            }
    594          
    595          #if defined( IAR_ARMCM3_LM )
    596            // Receive a message from the RTOS queue
    597            if ( events & GENERICAPP_RTOS_MSG_EVT )
    598            {
    599              // Process message from RTOS queue
    600              GenericApp_ProcessRtosMessage();
    601          
    602              // return unprocessed events
    603              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    604            }
    605          #endif
    606          
    607            // Discard unknown events
    608            return 0;
   \                     ??GenericApp_ProcessEvent_23:
   \   000284   7A00         MOV     R2,#0x0
   \   000286   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_22:
   \   000288   7409         MOV     A,#0x9
   \   00028A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028D   7F08         MOV     R7,#0x8
   \   00028F   02....       LJMP    ?BANKED_LEAVE_XDATA
    609          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV     A,R6
   \   000001   2424         ADD     A,#0x24
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#shortAddressOfEndDevice & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(shortAddressOfEndDevice >> 8) & 0xff
   \   00000B                REQUIRE ??Subroutine14_0
   \   00000B                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003                REQUIRE ??Subroutine15_0
   \   000003                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine16_0
   \   000006                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    610          
    611          /*********************************************************************
    612           * Event Generation Functions
    613           */
    614          
    615          /*********************************************************************
    616           * @fn      GenericApp_ProcessZDOMsgs()
    617           *
    618           * @brief   Process response messages
    619           *
    620           * @param   none
    621           *
    622           * @return  none
    623           */
    624          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    625          {
    626          
    627            switch ( inMsg->clusterID )
    628            {
    629              case End_Device_Bind_rsp:
    630                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    631                {
    632                
    633                  // Light LED
    634                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    635                }
    636          #if defined( BLINK_LEDS )
    637                else
    638                {
    639                  // Flash LED to show failure
    640                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    641                }
    642          #endif
    643                break;
    644          
    645              case Match_Desc_rsp:
    646                {
    647                  HalLcdWriteString("End Device Match Desc",0);
    648                  
    649                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    650                  if ( pRsp )
    651                  {
    652                        if ( pRsp->status == ZSuccess && pRsp->cnt )
    653                        {
    654                          
    655                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    656                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    657                      // Take the first endpoint, Can be changed to search through endpoints
    658                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    659          
    660                      // Light LED
    661                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    662                    }
    663                    osal_mem_free( pRsp );
    664                  }
    665                }
    666                break;
    667            }
    668          }
    669          
    670          /*********************************************************************
    671           * @fn      GenericApp_HandleKeys
    672           *
    673           * @brief   Handles all key events for this device.
    674           *
    675           * @param   shift - true if in shift/alt.
    676           * @param   keys - bit field for key events. Valid entries:
    677           *                 HAL_KEY_SW_4
    678           *                 HAL_KEY_SW_3
    679           *                 HAL_KEY_SW_2
    680           *                 HAL_KEY_SW_1
    681           *
    682           * @return  none
    683           */
    684          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    685          {
    686            zAddrType_t dstAddr;
    687          
    688            // Shift is used to make each button/switch dual purpose.
    689            if ( shift )
    690            {
    691              if ( keys & HAL_KEY_SW_1 )
    692              {
    693              }
    694              if ( keys & HAL_KEY_SW_2 )
    695              {
    696              }
    697              if ( keys & HAL_KEY_SW_3 )
    698              {
    699              }
    700              if ( keys & HAL_KEY_SW_4 )
    701              {
    702              }
    703            }
    704            else
    705            {
    706              if ( keys & HAL_KEY_SW_1 )
    707              {
    708          #if defined( SWITCH1_BIND )
    709                // We can use SW1 to simulate SW2 for devices that only have one switch,
    710                keys |= HAL_KEY_SW_2;
    711          #elif defined( SWITCH1_MATCH )
    712                // or use SW1 to simulate SW4 for devices that only have one switch
    713                keys |= HAL_KEY_SW_4;
    714          #else
    715                // Normally, SW1 changes the rate that messages are sent
    716                if ( txMsgDelay > 100 )
    717                {
    718                  // Cut the message TX delay in half
    719                  txMsgDelay /= 2;
    720                }
    721                else
    722                {
    723                  // Reset to the default
    724                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    725                }
    726          #endif
    727              }
    728          
    729              if ( keys & HAL_KEY_SW_2 )
    730              {
    731                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    732          
    733                // Initiate an End Device Bind Request for the mandatory endpoint
    734                dstAddr.addrMode = Addr16Bit;
    735                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    736                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    737                                      GenericApp_epDesc.endPoint,
    738                                      GENERICAPP_PROFID,
    739                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    740                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    741                                      FALSE );
    742              }
    743          
    744              if ( keys & HAL_KEY_SW_3 )
    745              {
    746              }
    747          
    748              if ( keys & HAL_KEY_SW_4 )
    749              {
    750                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    751                // Initiate a Match Description Request (Service Discovery)
    752                dstAddr.addrMode = AddrBroadcast;
    753                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    754                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    755                                  GENERICAPP_PROFID,
    756                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    757                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    758                                  FALSE );
    759              }
    760            }
    761          }
    762          
    763          /*********************************************************************
    764           * LOCAL FUNCTIONS
    765           */
    766          
    767          /*********************************************************************
    768           * @fn      GenericApp_MessageMSGCB
    769           *
    770           * @brief   Data message processor callback.  This function processes
    771           *          any incoming data - probably from other devices.  So, based
    772           *          on cluster ID, perform the intended action.
    773           *
    774           * @param   none
    775           *
    776           * @return  none
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    779          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    780            uint8 i;
    781            
    782            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??GenericApp_MessageMSGCB_1 & 0xFFFF
    783            {
    784              case GENERICAPP_CLUSTERID:
    785                
    786                {
    787                rxMsgCount += 1;  // Count this message
   \   00001D   90....       MOV     DPTR,#rxMsgCount
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2401         ADD     A,#0x1
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   F0           MOVX    @DPTR,A
    788                HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A02         MOV     R2,#0x2
   \   00002B   7908         MOV     R1,#0x8
   \   00002D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    789          
    790                HalLcdWriteString("--------------------------------",0);
   \   000030                ; Setup parameters for call to function HalLcdWriteString
   \   000030   7900         MOV     R1,#0x0
   \   000032   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   000034   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \   000036   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    791                HalLcdWriteString("Received data:",0);
   \   000039                ; Setup parameters for call to function HalLcdWriteString
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7A..         MOV     R2,#`?<Constant "Received data:">` & 0xff
   \   00003D   7B..         MOV     R3,#(`?<Constant "Received data:">` >> 8) & 0xff
   \   00003F   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    792          /*      
    793                for(i=0;i<pkt->cmd.DataLength;i++)
    794                {
    795                  uartSend(*(pkt->cmd.Data + i));
    796                  
    797                }
    798          */     
    799                switch(*(pkt->cmd.Data))
   \   000042   EE           MOV     A,R6
   \   000043   2422         ADD     A,#0x22
   \   000045   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000048   24BC         ADD     A,#-0x44
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??GenericApp_MessageMSGCB_2 & 0xFFFF
   \   00004F   24FC         ADD     A,#-0x4
   \   000051   6051         JZ      ??GenericApp_MessageMSGCB_3
   \   000053   24FB         ADD     A,#-0x5
   \   000055   606B         JZ      ??GenericApp_MessageMSGCB_4
   \   000057   24FE         ADD     A,#-0x2
   \   000059   7003         JNZ     $+5
   \   00005B   02....       LJMP    ??GenericApp_MessageMSGCB_5 & 0xFFFF
   \   00005E   14           DEC     A
   \   00005F   6025         JZ      ??GenericApp_MessageMSGCB_6
   \   000061   24FC         ADD     A,#-0x4
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??GenericApp_MessageMSGCB_7 & 0xFFFF
    800                {
    801                  
    802                  case ('T'):
    803                  {
    804                        HalLcdWriteString("Temperatura: ",0);
   \   000068                ; Setup parameters for call to function HalLcdWriteString
   \   000068   7900         MOV     R1,#0x0
   \   00006A   7A..         MOV     R2,#`?<Constant "Temperatura: ">` & 0xff
   \   00006C   7B..         MOV     R3,#(`?<Constant "Temperatura: ">` >> 8) & 0xff
   \   00006E   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    805                        for(i=1;i<pkt->cmd.DataLength;i++)
   \   000071   75..01       MOV     ?V0,#0x1
   \                     ??GenericApp_MessageMSGCB_8:
   \   000074   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000077   4003         JC      $+5
   \   000079   02....       LJMP    ??GenericApp_MessageMSGCB_7 & 0xFFFF
    806                        {
    807                          uartSend(*(pkt->cmd.Data + i));
   \   00007C                ; Setup parameters for call to function uartSend
   \   00007C   12....       LCALL   ?Subroutine3 & 0xFFFF
    808                        }
   \                     ??CrossCallReturnLabel_4:
   \   00007F   12....       LCALL   `??uartSend::?relay` ; Banked call to: uartSend
   \   000082   05..         INC     ?V0
   \   000084   80EE         SJMP    ??GenericApp_MessageMSGCB_8
    809                    
    810                        break;
    811                  }
    812                
    813                
    814                 case ('P'):
    815                 {
    816                      
    817                   HalLcdWriteString("Pritisak: ",0);
   \                     ??GenericApp_MessageMSGCB_6:
   \   000086                ; Setup parameters for call to function HalLcdWriteString
   \   000086   7900         MOV     R1,#0x0
   \   000088   7A..         MOV     R2,#`?<Constant "Pritisak: ">` & 0xff
   \   00008A   7B..         MOV     R3,#(`?<Constant "Pritisak: ">` >> 8) & 0xff
   \   00008C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    818                      for(i=1;i<pkt->cmd.DataLength;i++)
   \   00008F   75..01       MOV     ?V0,#0x1
   \                     ??GenericApp_MessageMSGCB_9:
   \   000092   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000095   4003         JC      $+5
   \   000097   02....       LJMP    ??GenericApp_MessageMSGCB_7 & 0xFFFF
    819                      {
    820                        uartSend(*(pkt->cmd.Data + i));
   \   00009A                ; Setup parameters for call to function uartSend
   \   00009A   12....       LCALL   ?Subroutine3 & 0xFFFF
    821                      } 
   \                     ??CrossCallReturnLabel_5:
   \   00009D   12....       LCALL   `??uartSend::?relay` ; Banked call to: uartSend
   \   0000A0   05..         INC     ?V0
   \   0000A2   80EE         SJMP    ??GenericApp_MessageMSGCB_9
    822                   
    823                       break;
    824                  }
    825                    
    826                 case ('H'):
    827                  {
    828                   HalLcdWriteString("Vlaznost",0);
   \                     ??GenericApp_MessageMSGCB_3:
   \   0000A4                ; Setup parameters for call to function HalLcdWriteString
   \   0000A4   7900         MOV     R1,#0x0
   \   0000A6   7A..         MOV     R2,#`?<Constant "Vlaznost">` & 0xff
   \   0000A8   7B..         MOV     R3,#(`?<Constant "Vlaznost">` >> 8) & 0xff
   \   0000AA   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    829                   for(i=1;i<pkt->cmd.DataLength;i++)
   \   0000AD   75..01       MOV     ?V0,#0x1
   \                     ??GenericApp_MessageMSGCB_10:
   \   0000B0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000B3   4003         JC      $+5
   \   0000B5   02....       LJMP    ??GenericApp_MessageMSGCB_7 & 0xFFFF
    830                      {
    831                      uartSend(*(pkt->cmd.Data + i));
   \   0000B8                ; Setup parameters for call to function uartSend
   \   0000B8   12....       LCALL   ?Subroutine3 & 0xFFFF
    832                      }
   \                     ??CrossCallReturnLabel_6:
   \   0000BB   12....       LCALL   `??uartSend::?relay` ; Banked call to: uartSend
   \   0000BE   05..         INC     ?V0
   \   0000C0   80EE         SJMP    ??GenericApp_MessageMSGCB_10
    833                   break;
    834                   }
    835                  
    836                case ('M'):
    837                  {
    838                  if(*(pkt->cmd.Data+1)=='1')
   \                     ??GenericApp_MessageMSGCB_4:
   \   0000C2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C5   7900         MOV     R1,#0x0
   \   0000C7   7006         JNZ     ??GenericApp_MessageMSGCB_11
    839                     HalLcdWriteString("Pokret je detektovan",0);
   \   0000C9                ; Setup parameters for call to function HalLcdWriteString
   \   0000C9   7A..         MOV     R2,#`?<Constant "Pokret je detektovan">` & 0xff
   \   0000CB   7B..         MOV     R3,#(`?<Constant "Pokret je detektovan">` >> 8) & 0xff
   \   0000CD   8066         SJMP    ??GenericApp_MessageMSGCB_12
    840                     
    841                   else
    842                     HalLcdWriteString(" GreskaM!!! ",0);
   \                     ??GenericApp_MessageMSGCB_11:
   \   0000CF                ; Setup parameters for call to function HalLcdWriteString
   \   0000CF   7A..         MOV     R2,#`?<Constant " GreskaM!!! ">` & 0xff
   \   0000D1   7B..         MOV     R3,#(`?<Constant " GreskaM!!! ">` >> 8) & 0xff
   \   0000D3   8060         SJMP    ??GenericApp_MessageMSGCB_12
    843                  break;
    844                  }
    845          
    846                  case ('D'):
    847                    {
    848                     if(*(pkt->cmd.Data+1)=='1')
   \                     ??GenericApp_MessageMSGCB_2:
   \   0000D5   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D8   7008         JNZ     ??GenericApp_MessageMSGCB_13
    849                        HalLcdWriteString("Vrata su otvorena",0);
   \   0000DA                ; Setup parameters for call to function HalLcdWriteString
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   7A..         MOV     R2,#`?<Constant "Vrata su otvorena">` & 0xff
   \   0000DE   7B..         MOV     R3,#(`?<Constant "Vrata su otvorena">` >> 8) & 0xff
   \   0000E0   8053         SJMP    ??GenericApp_MessageMSGCB_12
    850                     
    851                      else if(*(pkt->cmd.Data+1)=='0')
   \                     ??GenericApp_MessageMSGCB_13:
   \   0000E2   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000E5   6430         XRL     A,#0x30
   \   0000E7   7900         MOV     R1,#0x0
   \   0000E9   7006         JNZ     ??GenericApp_MessageMSGCB_14
    852                         HalLcdWriteString("Vrata su zatvorena",0);
   \   0000EB                ; Setup parameters for call to function HalLcdWriteString
   \   0000EB   7A..         MOV     R2,#`?<Constant "Vrata su zatvorena">` & 0xff
   \   0000ED   7B..         MOV     R3,#(`?<Constant "Vrata su zatvorena">` >> 8) & 0xff
   \   0000EF   8044         SJMP    ??GenericApp_MessageMSGCB_12
    853                  
    854                   else
    855                     HalLcdWriteString(" GreskaD!!! ",0);
   \                     ??GenericApp_MessageMSGCB_14:
   \   0000F1                ; Setup parameters for call to function HalLcdWriteString
   \   0000F1   7A..         MOV     R2,#`?<Constant " GreskaD!!! ">` & 0xff
   \   0000F3   7B..         MOV     R3,#(`?<Constant " GreskaD!!! ">` >> 8) & 0xff
   \   0000F5   803E         SJMP    ??GenericApp_MessageMSGCB_12
    856                   break;
    857                    }
    858                
    859                    case ('O'):
    860                    {
    861                    if(*(pkt->cmd.Data+1)=='1')
   \                     ??GenericApp_MessageMSGCB_5:
   \   0000F7   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000FA   7008         JNZ     ??GenericApp_MessageMSGCB_15
    862                     HalLcdWriteString("Mrak",0);
   \   0000FC                ; Setup parameters for call to function HalLcdWriteString
   \   0000FC   7900         MOV     R1,#0x0
   \   0000FE   7A..         MOV     R2,#`?<Constant "Mrak">` & 0xff
   \   000100   7B..         MOV     R3,#(`?<Constant "Mrak">` >> 8) & 0xff
   \   000102   8031         SJMP    ??GenericApp_MessageMSGCB_12
    863                     
    864                    else if(*(pkt->cmd.Data+1)=='2')
   \                     ??GenericApp_MessageMSGCB_15:
   \   000104   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000107   6432         XRL     A,#0x32
   \   000109   7008         JNZ     ??GenericApp_MessageMSGCB_16
    865                     HalLcdWriteString("Slabo osvijetljeno",0);
   \   00010B                ; Setup parameters for call to function HalLcdWriteString
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   7A..         MOV     R2,#`?<Constant "Slabo osvijetljeno">` & 0xff
   \   00010F   7B..         MOV     R3,#(`?<Constant "Slabo osvijetljeno">` >> 8) & 0xff
   \   000111   8022         SJMP    ??GenericApp_MessageMSGCB_12
    866                  
    867                    else if(*(pkt->cmd.Data+1)=='3')
   \                     ??GenericApp_MessageMSGCB_16:
   \   000113   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000116   6433         XRL     A,#0x33
   \   000118   7008         JNZ     ??GenericApp_MessageMSGCB_17
    868                     HalLcdWriteString("Osvijetljeno",0);
   \   00011A                ; Setup parameters for call to function HalLcdWriteString
   \   00011A   7900         MOV     R1,#0x0
   \   00011C   7A..         MOV     R2,#`?<Constant "Osvijetljeno">` & 0xff
   \   00011E   7B..         MOV     R3,#(`?<Constant "Osvijetljeno">` >> 8) & 0xff
   \   000120   8013         SJMP    ??GenericApp_MessageMSGCB_12
    869                  
    870                    else if(*(pkt->cmd.Data+1)=='4')
   \                     ??GenericApp_MessageMSGCB_17:
   \   000122   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000125   6434         XRL     A,#0x34
   \   000127   7900         MOV     R1,#0x0
   \   000129   7006         JNZ     ??GenericApp_MessageMSGCB_18
    871                     HalLcdWriteString("Jako osvijetljeno",0);
   \   00012B                ; Setup parameters for call to function HalLcdWriteString
   \   00012B   7A..         MOV     R2,#`?<Constant "Jako osvijetljeno">` & 0xff
   \   00012D   7B..         MOV     R3,#(`?<Constant "Jako osvijetljeno">` >> 8) & 0xff
   \   00012F   8004         SJMP    ??GenericApp_MessageMSGCB_12
    872                  
    873                    else
    874                      HalLcdWriteString(" GreskaO!!! ",0);
   \                     ??GenericApp_MessageMSGCB_18:
   \   000131                ; Setup parameters for call to function HalLcdWriteString
   \   000131   7A..         MOV     R2,#`?<Constant " GreskaO!!! ">` & 0xff
   \   000133   7B..         MOV     R3,#(`?<Constant " GreskaO!!! ">` >> 8) & 0xff
   \                     ??GenericApp_MessageMSGCB_12:
   \   000135   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    875                    break;
    876                    }
    877                } //second switch end
    878                
    879                HalLcdWriteString("",0);
   \                     ??GenericApp_MessageMSGCB_7:
   \   000138                ; Setup parameters for call to function HalLcdWriteString
   \   000138   7900         MOV     R1,#0x0
   \   00013A   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   00013C   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   00013E   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    880                HalLcdWriteString("--------------------------------",0);
   \   000141                ; Setup parameters for call to function HalLcdWriteString
   \   000141   7900         MOV     R1,#0x0
   \   000143   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   000145   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \   000147   8006         SJMP    ??GenericApp_MessageMSGCB_19
    881                
    882               
    883                }
    884                break; //break first switch
    885                
    886            default:
    887              
    888              HalLcdWriteString("Podatak nije primljen.",0);
   \                     ??GenericApp_MessageMSGCB_1:
   \   000149                ; Setup parameters for call to function HalLcdWriteString
   \   000149   7900         MOV     R1,#0x0
   \   00014B   7A..         MOV     R2,#`?<Constant "Podatak nije primljen.">` & 0xff
   \   00014D   7B..         MOV     R3,#(`?<Constant "Podatak nije primljen.">` >> 8) & 0xff
   \                     ??GenericApp_MessageMSGCB_19:
   \   00014F   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    889                  
    890              break;
    891          
    892            }
    893          
    894          
    895          }
   \   000152   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F583         MOV     DPH,A
   \   000007   8882         MOV     DPL,R0
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   6431         XRL     A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EE           MOV     A,R6
   \   000001   2420         ADD     A,#0x20
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FB           MOV     R3,A
   \   00000E   C3           CLR     C
   \   00000F   E5..         MOV     A,?V0
   \   000011   9A           SUBB    A,R2
   \   000012   E4           CLR     A
   \   000013   9B           SUBB    A,R3
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A8..         MOV     R0,?V0
   \   000002   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   28           ADD     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    896          
    897          /*********************************************************************
    898           * @fn      GenericApp_SendTheMessage
    899           *
    900           * @brief   Send "the" message.
    901           *
    902           * @param   none
    903          
    904           *
    905           * @return  none
    906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    907          static void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 250
   \   000005   7406         MOV     A,#0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    909          
    910            uint8 i;
    911            char num = '0';
                        ^
Warning[Pe177]: variable "num" was declared but never referenced
    912          
    913            char theMessageData[MAX_NUMBER_OF_ENDDEVICES][25] = {"You are EndDevice1111","You are EndDevice2222"};
                        ^
Warning[Pe177]: variable "theMessageData" was declared but never referenced

  static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
              ^
"C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",684  Warning[Pe177]: 
          function "GenericApp_HandleKeys" was declared but never referenced

  static void GenericApp_EndPointList(uint16 shAddr)
              ^
"C:\Users\bsavanovic\Desktop\Coordinator\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",359  Warning[Pe177]: 
          function "GenericApp_EndPointList" was declared but never referenced
    914            //char *msg1;
    915            //char *msg2;
    916            /*char *msg[MAX_NUMBER_OF_ENDDEVICES];
    917            HalLcdRead(msg[0],2);
    918            HalLcdRead(msg[1],2);
    919            */
    920            //HalLcdWriteString("Sile in send",0);
    921            char theMessage[MAX_NUMBER_OF_ENDDEVICES][25] = {"0000", "FFFF"};
   \   00000A   90....       MOV     DPTR,#`?<Constant {"0000", "FFFF"}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   74FA         MOV     A,#-0x6
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    922            if('1' == (char)*buff)
   \   000016   90....       MOV     DPTR,#buff
   \   000019   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00001C   6431         XRL     A,#0x31
   \   00001E   7030         JNZ     ??GenericApp_SendTheMessage_0
    923            {
    924              theMessage[0][0] = (char)buff[0];
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   7431         MOV     A,#0x31
   \   000028   12....       LCALL   ?Subroutine1 & 0xFFFF
    925              theMessage[0][1] = (char)buff[1];
   \                     ??CrossCallReturnLabel_0:
   \   00002B   C0E0         PUSH    A
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
    926              theMessage[0][2] = '\0';
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    927              theMessage[1][0] = '0';
   \   00003C   7419         MOV     A,#0x19
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7430         MOV     A,#0x30
   \   000043   F0           MOVX    @DPTR,A
    928              theMessage[1][1] = '0';
   \   000044   741A         MOV     A,#0x1a
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7430         MOV     A,#0x30
   \   00004B   F0           MOVX    @DPTR,A
    929              theMessage[1][2] = '\0';
   \   00004C   741B         MOV     A,#0x1b
   \   00004E   8039         SJMP    ??GenericApp_SendTheMessage_1
    930             // HalLcdWriteString("Buff 1",0);
    931            }
    932            else
    933            {
    934              theMessage[1][0] = (char)buff[0];
   \                     ??GenericApp_SendTheMessage_0:
   \   000050   90....       MOV     DPTR,#buff + 1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F583         MOV     DPH,A
   \   000056   8882         MOV     DPL,R0
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C0E0         PUSH    A
   \   00005B   7419         MOV     A,#0x19
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   D0E0         POP     A
   \   000062   12....       LCALL   ?Subroutine1 & 0xFFFF
    935              theMessage[1][1] = (char)buff[1];
   \                     ??CrossCallReturnLabel_1:
   \   000065   C0E0         PUSH    A
   \   000067   741A         MOV     A,#0x1a
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
    936              //theMessage[1][0] = (char)*buff;
    937              //theMessage[1][1] = (char)*(buff+1);
    938              theMessage[1][2] = '\0';
   \   00006F   741B         MOV     A,#0x1b
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    939              theMessage[0][0] = '0';
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   7430         MOV     A,#0x30
   \   00007E   F0           MOVX    @DPTR,A
    940              theMessage[0][1] = '0';
   \   00007F   7401         MOV     A,#0x1
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7430         MOV     A,#0x30
   \   000086   F0           MOVX    @DPTR,A
    941              theMessage[0][2] = '\0';
   \   000087   7402         MOV     A,#0x2
   \                     ??GenericApp_SendTheMessage_1:
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
    942              //HalLcdWriteString("Buff 2",0);
    943            }
    944            
    945            for(i = 0; i<brojac; i++)
   \   00008E   75..00       MOV     ?V0,#0x0
   \   000091   8009         SJMP    ??GenericApp_SendTheMessage_2
    946            {
    947              
    948             /*  HalLcdWriteString("Ulazak u petlju",0);
    949               num+=i;
    950               uartSend(num);
    951               HalLcdWriteString("",0);
    952               */
    953              if(GenericApp_DstAddress[i].addr.shortAddr != 0 )
    954                                   
    955              {
    956                if ( AF_DataRequest( &GenericApp_DstAddress[i], &GenericApp_epDesc,
    957                                   GENERICAPP_CLUSTERID,
    958                                   //(byte)osal_strlen( theMessageData[i] ) + 1,
    959                                   //(byte *)&theMessageData[i],
    960                                   (byte)osal_strlen( theMessage[i] ) + 1,
    961                                   (byte *)&theMessage[i],
    962                                   //(byte *)theMessageData[i],
    963                                   //(byte)osal_strlen(msg[i]) + 1,
    964                                   //(byte *)msg[i],
    965                                   &GenericApp_TransID,
    966                                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    967                {
    968                // Successfully requested to be sent.
    969                  HalLcdWriteString("Podatak je poslan.",0);
    970                  /*HalLcdWriteString("###############################",0);
    971               
    972                
    973                    for(i = 0;i <3;i++)
    974                    {
    975                      uartSend(*(buff + i));
    976                    }
    977                
    978                    HalLcdWriteString("",0);
    979                    HalLcdWriteString("--------------------------------",0);
    980                  */
    981                }
    982                else
    983                {
    984                // Error occurred in request to send.
    985                  HalLcdWriteString("Podatak nije poslan.",0);
   \                     ??GenericApp_SendTheMessage_3:
   \   000093                ; Setup parameters for call to function HalLcdWriteString
   \   000093   7A..         MOV     R2,#`?<Constant "Podatak nije poslan.">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "Podatak nije poslan.">` >> 8) & 0xff
   \                     ??GenericApp_SendTheMessage_4:
   \   000097   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    986                }
   \                     ??GenericApp_SendTheMessage_5:
   \   00009A   05..         INC     ?V0
   \                     ??GenericApp_SendTheMessage_2:
   \   00009C   90....       MOV     DPTR,#brojac
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F8           MOV     R0,A
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   C3           CLR     C
   \   0000A4   98           SUBB    A,R0
   \   0000A5   4003         JC      $+5
   \   0000A7   02....       LJMP    ??GenericApp_SendTheMessage_6 & 0xFFFF
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   75F00C       MOV     B,#0xc
   \   0000AF   A4           MUL     AB
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A9F0         MOV     R1,B
   \   0000B3   74..         MOV     A,#GenericApp_DstAddress & 0xff
   \   0000B5   28           ADD     A,R0
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   74..         MOV     A,#(GenericApp_DstAddress >> 8) & 0xff
   \   0000BA   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000BD   E8           MOV     A,R0
   \   0000BE   49           ORL     A,R1
   \   0000BF   60D9         JZ      ??GenericApp_SendTheMessage_5
   \   0000C1   AE..         MOV     R6,?V0
   \   0000C3   EE           MOV     A,R6
   \   0000C4   75F019       MOV     B,#0x19
   \   0000C7   A4           MUL     AB
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A9F0         MOV     R1,B
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E582         MOV     A,DPL
   \   0000D3   28           ADD     A,R0
   \   0000D4   F5..         MOV     ?V2,A
   \   0000D6   E583         MOV     A,DPH
   \   0000D8   39           ADDC    A,R1
   \   0000D9   F5..         MOV     ?V3,A
   \   0000DB                ; Setup parameters for call to function osal_strlen
   \   0000DB   AA..         MOV     R2,?V2
   \   0000DD   FB           MOV     R3,A
   \   0000DE   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000E1                ; Setup parameters for call to function AF_DataRequest
   \   0000E1   75..1E       MOV     ?V1,#0x1e
   \   0000E4   78..         MOV     R0,#?V1
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E9   75....       MOV     ?V4,#GenericApp_TransID & 0xff
   \   0000EC   75....       MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
   \   0000EF   78..         MOV     R0,#?V4
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   78..         MOV     R0,#?V2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   EA           MOV     A,R2
   \   0000FA   2401         ADD     A,#0x1
   \   0000FC   F5..         MOV     ?V2,A
   \   0000FE   E4           CLR     A
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   F5..         MOV     ?V3,A
   \   000103   78..         MOV     R0,#?V2
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..01       MOV     ?V2,#0x1
   \   00010B   75..00       MOV     ?V3,#0x0
   \   00010E   78..         MOV     R0,#?V2
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7900         MOV     R1,#0x0
   \   000115   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000117   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000119   EE           MOV     A,R6
   \   00011A   75F00C       MOV     B,#0xc
   \   00011D   A4           MUL     AB
   \   00011E   FE           MOV     R6,A
   \   00011F   AFF0         MOV     R7,B
   \   000121   74..         MOV     A,#GenericApp_DstAddress & 0xff
   \   000123   2E           ADD     A,R6
   \   000124   FA           MOV     R2,A
   \   000125   74..         MOV     A,#(GenericApp_DstAddress >> 8) & 0xff
   \   000127   3F           ADDC    A,R7
   \   000128   FB           MOV     R3,A
   \   000129   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00012C   7409         MOV     A,#0x9
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   E9           MOV     A,R1
   \   000132   7900         MOV     R1,#0x0
   \   000134   6003         JZ      $+5
   \   000136   02....       LJMP    ??GenericApp_SendTheMessage_3 & 0xFFFF
   \   000139                ; Setup parameters for call to function HalLcdWriteString
   \   000139   7A..         MOV     R2,#`?<Constant "Podatak je poslan.">` & 0xff
   \   00013B   7B..         MOV     R3,#(`?<Constant "Podatak je poslan.">` >> 8) & 0xff
   \   00013D   02....       LJMP    ??GenericApp_SendTheMessage_4 & 0xFFFF
    987              
    988              }
    989            }
    990          
    991            buff[0] = '\0';
   \                     ??GenericApp_SendTheMessage_6:
   \   000140   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000143   E4           CLR     A
   \   000144   F0           MOVX    @DPTR,A
    992            
    993          }
   \   000145   74FA         MOV     A,#-0x6
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A   7F06         MOV     R7,#0x6
   \   00014C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#buff
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {"0000", "FFFF"}>`:
   \   000000   30303030     DB "0000"
   \            00      
   \   000005   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000D   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000015   00000000     DB 0, 0, 0, 0
   \   000019   46464646     DB "FFFF"
   \            00      
   \   00001E   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000026   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00002E   00000000     DB 0, 0, 0, 0
   \   000032   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00003A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000042   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00004A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000052   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00005A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000062   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00006A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000072   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00007A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000082   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00008A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000092   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00009A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000AA   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000BA   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000CA   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000DA   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000EA   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F2   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txBuff>`:
   \   000000   61           DB 97

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_SendTheMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Match Desc">`:
   \   000000   456E6420     DB "End Device Match Desc"
   \            44657669
   \            6365204D
   \            61746368
   \            20446573
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---------------------...">`:
   \   000000   2D2D2D2D     DB "--------------------------------"
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Received data:">`:
   \   000000   52656365     DB "Received data:"
   \            69766564
   \            20646174
   \            613A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temperatura: ">`:
   \   000000   54656D70     DB "Temperatura: "
   \            65726174
   \            7572613A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Pritisak: ">`:
   \   000000   50726974     DB "Pritisak: "
   \            6973616B
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Vlaznost">`:
   \   000000   566C617A     DB "Vlaznost"
   \            6E6F7374
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Pokret je detektovan">`:
   \   000000   506F6B72     DB "Pokret je detektovan"
   \            6574206A
   \            65206465
   \            74656B74
   \            6F76616E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " GreskaM!!! ">`:
   \   000000   20477265     DB " GreskaM!!! "
   \            736B614D
   \            21212120
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Vrata su otvorena">`:
   \   000000   56726174     DB "Vrata su otvorena"
   \            61207375
   \            206F7476
   \            6F72656E
   \            6100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Vrata su zatvorena">`:
   \   000000   56726174     DB "Vrata su zatvorena"
   \            61207375
   \            207A6174
   \            766F7265
   \            6E6100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " GreskaD!!! ">`:
   \   000000   20477265     DB " GreskaD!!! "
   \            736B6144
   \            21212120
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Mrak">`:
   \   000000   4D72616B     DB "Mrak"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Slabo osvijetljeno">`:
   \   000000   536C6162     DB "Slabo osvijetljeno"
   \            6F206F73
   \            76696A65
   \            746C6A65
   \            6E6F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Osvijetljeno">`:
   \   000000   4F737669     DB "Osvijetljeno"
   \            6A65746C
   \            6A656E6F
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Jako osvijetljeno">`:
   \   000000   4A616B6F     DB "Jako osvijetljeno"
   \            206F7376
   \            696A6574
   \            6C6A656E
   \            6F00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " GreskaO!!! ">`:
   \   000000   20477265     DB " GreskaO!!! "
   \            736B614F
   \            21212120
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Podatak nije primljen.">`:
   \   000000   506F6461     DB "Podatak nije primljen."
   \            74616B20
   \            6E696A65
   \            20707269
   \            6D6C6A65
   \            6E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Podatak je poslan.">`:
   \   000000   506F6461     DB "Podatak je poslan."
   \            74616B20
   \            6A652070
   \            6F736C61
   \            6E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Podatak nije poslan.">`:
   \   000000   506F6461     DB "Podatak nije poslan."
   \            74616B20
   \            6E696A65
   \            20706F73
   \            6C616E2E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    994          
    995          #if defined( IAR_ARMCM3_LM )
    996          /*********************************************************************
    997           * @fn      GenericApp_ProcessRtosMessage
    998           *
    999           * @brief   Receive message from RTOS queue, send response back.
   1000           *
   1001           * @param   none
   1002           *
   1003           * @return  none
   1004           */
   1005          static void GenericApp_ProcessRtosMessage( void )
   1006          {
   1007            osalQueue_t inMsg;
   1008          
   1009            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
   1010            {
   1011              uint8 cmndId = inMsg.cmnd;
   1012              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
   1013          
   1014              switch ( cmndId )
   1015              {
   1016                case CMD_INCR:
   1017                  counter += 1;  /* Increment the incoming counter */
   1018                                 /* Intentionally fall through next case */
   1019          
   1020                case CMD_ECHO:
   1021                {
   1022                  userQueue_t outMsg;
   1023          
   1024                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
   1025                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
   1026                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
   1027                  break;
   1028                }
   1029          
   1030                default:
   1031                  break;  /* Ignore unknown command */
   1032              }
   1033            }
   1034          }
   1035          #endif
   1036          
   1037          /**********************************************************************/
   1038          
   1039          /*********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   GenericApp_Init
        0      9   -> HalLcdWriteString
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
      0     34   GenericApp_MessageMSGCB
        0      9   -> HalLcdWriteString
        0      9   -> HalLedSet
        0      9   -> uartSend
      0     34   GenericApp_ProcessEvent
        0     25   -> GenericApp_MessageMSGCB
        0     25   -> GenericApp_SendTheMessage
        0     25   -> HalLcdRead
        0     25   -> HalLcdWriteString
        0     25   -> HalLedSet
        0     25   -> ZDO_ParseEPListRsp
        0     34   -> ZDP_EndDeviceBindReq
        0     25   -> osal_mem_free
        0     25   -> osal_msg_deallocate
        0     25   -> osal_msg_receive
        0     25   -> osal_set_event
        0     29   -> osal_start_timerEx
      1    298   GenericApp_SendTheMessage
        0    273   -> AF_DataRequest
        0    264   -> HalLcdWriteString
        0    264   -> osal_strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ?<Constant " GreskaD!!! ">
      13  ?<Constant " GreskaM!!! ">
      13  ?<Constant " GreskaO!!! ">
       1  ?<Constant "">
      33  ?<Constant "---------------------...">
      22  ?<Constant "End Device Match Desc">
      11  ?<Constant "GenericApp">
      18  ?<Constant "Jako osvijetljeno">
       5  ?<Constant "Mrak">
      13  ?<Constant "Osvijetljeno">
      19  ?<Constant "Podatak je poslan.">
      21  ?<Constant "Podatak nije poslan.">
      23  ?<Constant "Podatak nije primljen.">
      21  ?<Constant "Pokret je detektovan">
      11  ?<Constant "Pritisak: ">
      15  ?<Constant "Received data:">
      19  ?<Constant "Slabo osvijetljeno">
      14  ?<Constant "Temperatura: ">
       9  ?<Constant "Vlaznost">
      18  ?<Constant "Vrata su otvorena">
      19  ?<Constant "Vrata su zatvorena">
     250  ?<Constant {"0000", "FFFF"}>
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       1  ?<Initializer for txBuff>
       4  ?<Initializer for txMsgDelay>
       9  ??Subroutine13_0
       3  ??Subroutine14_0
       6  ??Subroutine15_0
       5  ??Subroutine16_0
       5  ?Subroutine0
       7  ?Subroutine1
       3  ?Subroutine10
      12  ?Subroutine11
      10  ?Subroutine12
      10  ?Subroutine2
      19  ?Subroutine3
       6  ?Subroutine4
      21  ?Subroutine5
       6  ?Subroutine6
       4  ?Subroutine7
      11  ?Subroutine8
      11  ?Subroutine9
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
     120  GenericApp_DstAddress
      94  GenericApp_Init
       6  GenericApp_Init::?relay
     341  GenericApp_MessageMSGCB
       6  GenericApp_MessageMSGCB::?relay
       1  GenericApp_NwkState
     658  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
     335  GenericApp_SendTheMessage
       6  GenericApp_SendTheMessage::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
      20  SAddr
       4  __Constant_3e8
       1  brojac
       2  buff
       1  coin
       2  counter
      10  dataBuffer
       1  index
       1  keyPressSW4
       1  prevData
     128  rxBuff
       2  rxMsgCount
      20  shortAddressOfEndDevice
       1  txBuff
       4  txMsgDelay
      29  uartConfig

 
 1 576 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_I
     7 bytes in segment XDATA_ID
   599 bytes in segment XDATA_ROM_C
   357 bytes in segment XDATA_Z
 
    31 bytes of CODE     memory
   595 bytes of CONST    memory (+ 4 bytes shared)
 1 576 bytes of HUGECODE memory
   364 bytes of XDATA    memory

Errors: none
Warnings: 8
