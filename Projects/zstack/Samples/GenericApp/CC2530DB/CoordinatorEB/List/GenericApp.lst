###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                04/May/2017  12:10:21
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          
     87          
     88          
     89          
     90          
     91          
     92          ////////////////////////////////////////////////////////////////////////////////////////////
     93          //#include "includes/hal_driver.h"
     94          #include "hal_drivers.h"
     95          
     96          #include "includes/dll.h"
     97          #include "includes/look_up_table.h"
     98          
     99          #include "includes/circular_buffer.h"
    100          
    101          ////////////////////////////////////////////////////////////////////////////////////////////
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          
    108          #define GENERICAPP_ENDPOINT           10
    109          
    110          #define GENERICAPP_PROFID             0x0F04
    111          #define GENERICAPP_DEVICEID           0x0001
    112          #define GENERICAPP_DEVICE_VERSION     0
    113          #define GENERICAPP_FLAGS              0
    114          
    115          #define GENERICAPP_MAX_CLUSTERS       1
    116          #define GENERICAPP_CLUSTERID          1
    117          
    118          
    119          #define MAX_NUMBER_OF_ENDDEVICES      10
    120          
    121          
    122          // magnetic switch macros
    123          #define DOOR_CLOSED_DETECTION P1_2
    124          #define TRUE 1
    125          #define CLOSED 1
    126          #define OPENED 0
    127          // magnetic switch macros end
    128             
    129          
    130          #define HAL_UART_ISR 2
    131          
    132          #define HAL_UART_MSECS_TO_TICKS    33
    133          
    134          #if !defined HAL_UART_ISR_IDLE
    135          #define HAL_UART_ISR_IDLE         (6 * HAL_UART_MSECS_TO_TICKS)
    136          #endif
    137          
    138          #if !defined HAL_UART_ISR_RX_MAX
    139          #define HAL_UART_ISR_RX_MAX        128
    140          #endif
    141          #if !defined HAL_UART_ISR_TX_MAX
    142          #define HAL_UART_ISR_TX_MAX        HAL_UART_ISR_RX_MAX
    143          #endif
    144             
    145          /*********************************************************************
    146           * CONSTANTS
    147           */
    148          
    149          /*********************************************************************
    150           * TYPEDEFS
    151           */
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          ////////////////////////////////////////////////////////////////////////////////////////////
    157          //CircularBuffer_t cMain;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 dataRdy;
   \                     dataRdy:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          LookUpTable_t lutData[20];
   \                     lutData:
   \   000000                DS 200
   \   0000C8                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 *rxBuffer;
   \                     rxBuffer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          halUARTCfg_t uartConfig;
   \                     uartConfig:
   \   000000                DS 29
   \   00001D                REQUIRE __INIT_XDATA_Z
    162          ////////////////////////////////////////////////////////////////////////////////////////////
    163          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          
    167          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    171             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 *buff;
   \                     buff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    175          
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 brojac = 0;
   \                     brojac:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          
    185          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    186          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    187          {
    188            GENERICAPP_CLUSTERID
    189          };
    190          

   \                                 In  segment XDATA_ROM_C, align 1
    191          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    192          {
    193            GENERICAPP_ENDPOINT,              //  int Endpoint;
    194            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    195            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    196            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    197            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    198            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    199            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    200            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    201            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    202          };
    203          
    204          // This is the Endpoint/Interface description.  It is defined here, but
    205          // filled-in in GenericApp_Init().  Another way to go would be to fill
    206          // in the structure here and make it a "const" (in code space).  The
    207          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    209          
    210          /*********************************************************************
    211           * EXTERNAL VARIABLES
    212           */
    213          
    214          /*********************************************************************
    215           * EXTERNAL FUNCTIONS
    216           */
    217          
    218            extern void uartInit(void);
    219            extern void uartSend(char);
    220           // void LazoInit(void);
    221          
    222          /*********************************************************************
    223           * LOCAL VARIABLES
    224           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    225          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    226                                    // This variable will be received when
    227                                    // GenericApp_Init() is called.
    228          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    229          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    230          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    232          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    233          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    234          afAddrType_t GenericApp_DstAddress;//GenericApp_DstAddress
   \                     GenericApp_DstAddress:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    235          //////////////////////////////////////////////////////////////////////////////  Mozda izbrisati ovo
    236          
    237          //afAddrType_t GenericApp_DstAddress[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
    238          
    239          // Number of recieved messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    240          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    241          
    242          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    243          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    244          
    245          /*********************************************************************
    246           * LOCAL FUNCTIONS
    247           */
    248          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    249          //static void GenericApp_HandleKeys( byte shift, byte keys );
    250          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    251          static void GenericApp_SendTheMessage( void );
    252          
    253          //static void GenericApp_EndPointList(uint16);
    254          
    255          #if defined( IAR_ARMCM3_LM )
    256          static void GenericApp_ProcessRtosMessage( void );
    257          #endif
    258          
    259          /*********************************************************************
    260           * NETWORK LAYER CALLBACKS
    261           */
    262          
    263          /*********************************************************************
    264           * PUBLIC FUNCTIONS
    265           */
    266          
    267          /*********************************************************************
    268           * @fn      GenericApp_Init
    269           *
    270           * @brief   Initialization function for the Generic App Task.
    271           *          This is called during initialization and should contain
    272           *          any application specific initialization (ie. hardware
    273           *          initialization/setup, table initialization, power up
    274           *          notificaiton ... ).
    275           *
    276           * @param   task_id - the ID assigned by OSAL.  This ID should be
    277           *                    used to send messages and set timers.
    278           *
    279           * @return  none
    280           */
    281          
    282          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    284          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    285            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    286            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    287            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    288            
    289            // Device hardware initialization can be added here or in main() (Zmain.c).
    290            // If the hardware is application specific - add it here.
    291            // If the hardware is other parts of the device add it in main().
    292          
    293            //GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    294            //GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
    295            //GenericApp_DstAddr.addr.shortAddr = 0xFFFF; //0;// NLME_GetShortAddr();//1;*/
    296          
    297            // Fill out the endpoint description.
    298            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000015   90....       MOV     DPTR,#GenericApp_epDesc
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
    299            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
    300            GenericApp_epDesc.simpleDesc
    301                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
    302            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    303          
    304            // Register the endpoint description with the AF
    305            afRegister( &GenericApp_epDesc );
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    306          
    307            // Register for all key events - This app will handle all key events
    308            RegisterForKeys( GenericApp_TaskID );
   \   000035                ; Setup parameters for call to function RegisterForKeys
   \   000035   90....       MOV     DPTR,#GenericApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    309          
    310            // Update the display
    311          #if defined ( LCD_SUPPORTED )
    312            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00003D                ; Setup parameters for call to function HalLcdWriteString
   \   00003D   7901         MOV     R1,#0x1
   \   00003F   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000041   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000043   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    313          #endif
    314          
    315            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000046                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000046   7A20         MOV     R2,#0x20
   \   000048   7B80         MOV     R3,#-0x80
   \   00004A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    316            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A06         MOV     R2,#0x6
   \   000054   7B80         MOV     R3,#-0x80
   \   000056   90....       MOV     DPTR,#GenericApp_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    317          
    318          #if defined( IAR_ARMCM3_LM )
    319            // Register this task with RTOS task initiator
    320            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    321          #endif
    322          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
    323            //halInitDriver();
    324              dllInit();
   \   00005E                ; Setup parameters for call to function dllInit
   \   00005E   12....       LCALL   `??dllInit::?relay`  ; Banked call to: dllInit
    325              lookUpInit();
   \   000061                ; Setup parameters for call to function lookUpInit
   \   000061   12....       LCALL   `??lookUpInit::?relay`; Banked call to: lookUpInit
    326             // circularInit(&cMain);
    327              //HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
    328              //HalUARTSuspend();
    329               //halGPIOOutput(HW_PORT_D, 0x03, 0);
    330          
    331              /*circularPut(&cMain, 'T');
    332              circularPut(&cMain, 'E');
    333              circularPut(&cMain, 'S');
    334              circularPut(&cMain, 'T');
    335              */
    336             // halUARTWrite(PC, &cMain, 0);
    337            
    338          ////////////////////////////////////////////////////////////////////////////////////////////  
    339              
    340            
    341          }
   \   000064   7F01         MOV     R7,#0x1
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          /*********************************************************************
    343           * @fn      GenericApp_EndPointList
    344           *
    345           * @brief   Get's short address of end device and put in the end device 
    346                      array
    347           *
    348           * @param   shAddr  - Short Address of connected End Device
    349           * 
    350           * @return  none
    351           */
    352          /*
    353          static void GenericApp_EndPointList(uint16 shAddr)
    354          {
    355           
    356            if(index > MAX_NUMBER_OF_ENDDEVICES)
    357            {
    358              HalLcdWriteString("Max number of end devices overflow.",0);
    359            }
    360            else
    361            {
    362              shortAddressOfEndDevice[index];
    363              index++;
    364            }
    365            
    366            
    367          }
    368          */
    369          /*********************************************************************
    370           * @fn      GenericApp_ProcessEvent
    371           *
    372           * @brief   Generic Application Task event processor.  This function
    373           *          is called to process all events for the task.  Events
    374           *          include timers, messages and any other user defined events.
    375           *
    376           * @param   task_id  - The OSAL assigned task ID.
    377           * @param   events - events to process.  This is a bit map and can
    378           *                   contain more than one event.
    379           *
    380           * @return  none
    381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    383          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    384            afIncomingMSGPacket_t *MSGpkt;
    385            afDataConfirm_t *afDataConfirm;
    386            zAddrType_t dstAddr;
    387          
    388              //uint8 flag = 0;
    389              //uint8 i;
    390          
    391          
    392            // Data Confirmation message fields
    393            byte sentEP;
    394            ZStatus_t sentStatus;
    395            byte sentTransID;       // This should match the value sent
    396            (void)task_id;  // Intentionally unreferenced parameter
    397          
    398            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    399            {
    400              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   8013         SJMP    ??GenericApp_ProcessEvent_1
    401              
    402             
    403              while ( MSGpkt )
    404              {
    405                switch ( MSGpkt->hdr.event )
    406                {
    407                  case ZDO_CB_MSG:
    408                    
    409                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    410                    
    411                    break;
    412          
    413                  case KEY_CHANGE:                                                        /////////////////////////////////////////////// case KEY_CHANGE: prazno ????????????????????????????
    414          
    415                    break;
    416          
    417                  case AF_DATA_CONFIRM_CMD:
    418                    // This message is received as a confirmation of a data packet sent.
    419                    // The status is of ZStatus_t type [defined in ZComDef.h]
    420                    // The message fields are defined in AF.h
    421                   
    422                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    423          
    424                    sentEP = afDataConfirm->endpoint;
    425                    (void)sentEP;  // This info not used now
    426                    sentTransID = afDataConfirm->transID;
    427                    (void)sentTransID;  // This info not used now
    428          
    429                    sentStatus = afDataConfirm->hdr.status;
    430                    // Action taken when confirmation is received.
    431                    if ( sentStatus != ZSuccess )
    432                    {
    433                      // The data wasn't delivered -- Do something
    434                    }
    435                    break;
    436          
    437                  case AF_INCOMING_MSG_CMD:
    438          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////          
    439                   /* if(0==brojac)
    440                    {
    441                     shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    442                     brojac++;
    443                    }
    444                    else
    445                    {
    446                      for(i = 0; i<brojac; i++)
    447                      {
    448                        if(shortAddressOfEndDevice[i]==MSGpkt->macSrcAddr)
    449                        {
    450                          flag++;
    451                        }
    452                      }
    453                    
    454                      if(0 == flag)
    455                      {
    456                        shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    457                        brojac++;
    458                      }
    459                      else
    460                      {
    461                        flag = 0;
    462                      }
    463                    }
    464                    
    465                    for(i = 0; i<brojac; i++)
    466                    {
    467                      GenericApp_DstAddress[i].addrMode = (afAddrMode_t)Addr16Bit;
    468                      GenericApp_DstAddress[i].endPoint = GENERICAPP_ENDPOINT;
    469                      GenericApp_DstAddress[i].addr.shortAddr = shortAddressOfEndDevice[i];
    470                    }*/
    471                    
    472                   GenericApp_MessageMSGCB( MSGpkt );
    473           ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
    474                    break;
    475          
    476                  case ZDO_STATE_CHANGE:
    477                     
    478                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    479                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    480                         (GenericApp_NwkState == DEV_ROUTER) ||
    481                         (GenericApp_NwkState == DEV_END_DEVICE) )
    482                    {
    483                      
    484                     
    485                      // Start sending "the" message in a regular interval.
    486                      osal_start_timerEx( GenericApp_TaskID,
    487                                          GENERICAPP_SEND_MSG_EVT,
    488                                          txMsgDelay );
    489                    }
    490                                
    491                    break;
    492          
    493                  default:
    494                     
    495                    
    496                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    497                     break;
    498                }
    499          
    500                // Release the memory
    501                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_msg_deallocate
   \   000023   AA..         MOV     R2,?V0
   \   000025   AB..         MOV     R3,?V1
   \   000027   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    502          
    503                // Next
    504                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002A                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000032   8A..         MOV     ?V0,R2
   \   000034   8B..         MOV     ?V1,R3
   \   000036   E5..         MOV     A,?V0
   \   000038   45..         ORL     A,?V1
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   24E6         ADD     A,#-0x1a
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   00004D   245A         ADD     A,#0x5a
   \   00004F   60D2         JZ      ??GenericApp_ProcessEvent_3
   \   000051   24EF         ADD     A,#-0x11
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000058   24FE         ADD     A,#-0x2
   \   00005A   6006         JZ      ??GenericApp_ProcessEvent_7
   \   00005C   24D6         ADD     A,#-0x2a
   \   00005E   60C3         JZ      ??GenericApp_ProcessEvent_3
   \   000060   80B5         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_7:
   \   000062   E5..         MOV     A,?V0
   \   000064   240C         ADD     A,#0xc
   \   000066   F582         MOV     DPL,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   F583         MOV     DPH,A
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F5..         MOV     ?V2,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F5..         MOV     ?V3,A
   \   000074   78..         MOV     R0,#?V2
   \   000076   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   000079   0000         DW        0
   \   00007B   0200         DW        2
   \   00007D   0680         DW        32774
   \   00007F   ....         DW        ??GenericApp_ProcessEvent_8
   \   000081   2080         DW        32800
   \   000083   ....         DW        ??GenericApp_ProcessEvent_9
   \   000085   ....         DW        ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_8:
   \   000087                ; Setup parameters for call to function HalLcdWriteString
   \   000087   7900         MOV     R1,#0x0
   \   000089   7A..         MOV     R2,#`?<Constant "End Device Match Desc">` & 0xff
   \   00008B   7B..         MOV     R3,#(`?<Constant "End Device Match Desc">` >> 8) & 0xff
   \   00008D   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000090                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000090   AA..         MOV     R2,?V0
   \   000092   AB..         MOV     R3,?V1
   \   000094   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000097   8A..         MOV     ?V2,R2
   \   000099   8B..         MOV     ?V3,R3
   \   00009B   EA           MOV     A,R2
   \   00009C   45..         ORL     A,?V3
   \   00009E   6083         JZ      ??GenericApp_ProcessEvent_3
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   7028         JNZ     ??GenericApp_ProcessEvent_10
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6022         JZ      ??GenericApp_ProcessEvent_10
   \   0000AD   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   8A82         MOV     DPL,R2
   \   0000B5   8B83         MOV     DPH,R3
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000BB   8A82         MOV     DPL,R2
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8                ; Setup parameters for call to function HalLedSet
   \   0000C8   7A01         MOV     R2,#0x1
   \   0000CA   7908         MOV     R1,#0x8
   \   0000CC   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??GenericApp_ProcessEvent_10:
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V2
   \   0000D1   AB..         MOV     R3,?V3
   \   0000D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D6   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   2413         ADD     A,#0x13
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   35..         ADDC    A,?V1
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   0000EF                ; Setup parameters for call to function HalLedSet
   \   0000EF   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   0000F1   7908         MOV     R1,#0x8
   \   0000F3   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000F6   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   0000F9                ; Setup parameters for call to function HalLedSet
   \   0000F9   7A04         MOV     R2,#0x4
   \   0000FB   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_5:
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   6401         XRL     A,#0x1
   \   000104   7002         JNZ     ??GenericApp_ProcessEvent_13
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_13:
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \   00010D   90....       MOV     DPTR,#rxMsgCount
   \   000110   E0           MOVX    A,@DPTR
   \   000111   2401         ADD     A,#0x1
   \   000113   F0           MOVX    @DPTR,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   3400         ADDC    A,#0x0
   \   000118   F0           MOVX    @DPTR,A
   \   000119                ; Setup parameters for call to function HalLedSet
   \   000119   7A02         MOV     R2,#0x2
   \   00011B   7908         MOV     R1,#0x8
   \   00011D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000120   E5..         MOV     A,?V0
   \   000122   241F         ADD     A,#0x1f
   \   000124   F5..         MOV     ?V2,A
   \   000126   E4           CLR     A
   \   000127   35..         ADDC    A,?V1
   \   000129   F5..         MOV     ?V3,A
   \   00012B                ; Setup parameters for call to function getIDFromPkt
   \   00012B   AA..         MOV     R2,?V2
   \   00012D   FB           MOV     R3,A
   \   00012E   12....       LCALL   `??getIDFromPkt::?relay`; Banked call to: getIDFromPkt
   \   000131   85..82       MOV     DPL,?XSP + 0
   \   000134   85..83       MOV     DPH,?XSP + 1
   \   000137   EA           MOV     A,R2
   \   000138   F0           MOVX    @DPTR,A
   \   000139   A3           INC     DPTR
   \   00013A   EB           MOV     A,R3
   \   00013B   F0           MOVX    @DPTR,A
   \   00013C                ; Setup parameters for call to function getDataFromPkt
   \   00013C   AA..         MOV     R2,?V2
   \   00013E   AB..         MOV     R3,?V3
   \   000140   12....       LCALL   `??getDataFromPkt::?relay`; Banked call to: getDataFromPkt
   \   000143   EA           MOV     A,R2
   \   000144   F8           MOV     R0,A
   \   000145   EB           MOV     A,R3
   \   000146   F9           MOV     R1,A
   \   000147   EC           MOV     A,R4
   \   000148   FA           MOV     R2,A
   \   000149   ED           MOV     A,R5
   \   00014A   FB           MOV     R3,A
   \   00014B   7403         MOV     A,#0x3
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   12....       LCALL   ?XSTORE_R0123
   \   000153                ; Setup parameters for call to function updateLookUpTable
   \   000153   85..82       MOV     DPL,?XSP + 0
   \   000156   85..83       MOV     DPH,?XSP + 1
   \   000159   7407         MOV     A,#0x7
   \   00015B   12....       LCALL   ?PUSH_XSTACK8_X
   \   00015E   E5..         MOV     A,?V0
   \   000160   2424         ADD     A,#0x24
   \   000162   F582         MOV     DPL,A
   \   000164   E4           CLR     A
   \   000165   35..         ADDC    A,?V1
   \   000167   F583         MOV     DPH,A
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   FA           MOV     R2,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   FB           MOV     R3,A
   \   00016E   12....       LCALL   `??updateLookUpTable::?relay`; Banked call to: updateLookUpTable
   \   000171   7407         MOV     A,#0x7
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   6409         XRL     A,#0x9
   \   000181   600D         JZ      ??GenericApp_ProcessEvent_14
   \   000183   E0           MOVX    A,@DPTR
   \   000184   6407         XRL     A,#0x7
   \   000186   6008         JZ      ??GenericApp_ProcessEvent_14
   \   000188   E0           MOVX    A,@DPTR
   \   000189   6406         XRL     A,#0x6
   \   00018B   6003         JZ      $+5
   \   00018D   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_14:
   \   000190                ; Setup parameters for call to function osal_start_timerEx
   \   000190   90....       MOV     DPTR,#txMsgDelay
   \   000193   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000196   7A01         MOV     R2,#0x1
   \   000198   7B00         MOV     R3,#0x0
   \   00019A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   F9           MOV     R1,A
   \   00019F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001A2   7404         MOV     A,#0x4
   \   0001A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A7   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    505                  
    506              }
    507          
    508              // return unprocessed events
    509              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   0001AA   EE           MOV     A,R6
   \   0001AB   FA           MOV     R2,A
   \   0001AC   EF           MOV     A,R7
   \   0001AD   6480         XRL     A,#0x80
   \   0001AF   02....       LJMP    ??GenericApp_ProcessEvent_15 & 0xFFFF
    510            }
    511          
    512            // Send a message out - This event is generated by a timer
    513            //  (setup in GenericApp_Init()).
    514            
    515           /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    516            if ( events & RX_PROCCESS_EVENT )
   \                     ??GenericApp_ProcessEvent_0:
   \   0001B2   EF           MOV     A,R7
   \   0001B3   5401         ANL     A,#0x1
   \   0001B5   7003         JNZ     $+5
   \   0001B7   02....       LJMP    ??GenericApp_ProcessEvent_16 & 0xFFFF
    517            {
    518              /*
    519              uint8 i;
    520              uint16 *pdevID;
    521              uint32 *pData;
    522              uint16 devID;
    523              
    524              uint8 *p;
    525              */
    526             // uint16 ID;
    527             // uint32 Data;
    528              //char theMessage[MAX_NUMBER_OF_ENDDEVICES][25];
    529              char doorOpened[] = {'S','E','N','D','\0'};
   \   0001BA   90....       MOV     DPTR,#`?<Constant {83, 69, 78, 68, 0}>`
   \   0001BD   7407         MOV     A,#0x7
   \   0001BF   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C2   7405         MOV     A,#0x5
   \   0001C4   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    530          
    531              HalUARTRead(HAL_UART_PORT_1, uartConfig.rx.pBuffer, 128);
   \   0001C7                ; Setup parameters for call to function HalUARTRead
   \   0001C7   7C80         MOV     R4,#-0x80
   \   0001C9   FD           MOV     R5,A
   \   0001CA   90....       MOV     DPTR,#uartConfig + 12
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   FA           MOV     R2,A
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   FB           MOV     R3,A
   \   0001D2   7901         MOV     R1,#0x1
   \   0001D4   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    532              rxBuffer = uartConfig.rx.pBuffer;
   \   0001D7   90....       MOV     DPTR,#uartConfig + 12
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   F8           MOV     R0,A
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F9           MOV     R1,A
   \   0001DF   90....       MOV     DPTR,#rxBuffer
   \   0001E2   E8           MOV     A,R0
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   E9           MOV     A,R1
   \   0001E6   F0           MOVX    @DPTR,A
    533              //ID = processFrameRx(rxBuffer);
    534              
    535              
    536              GenericApp_DstAddress.addrMode = (afAddrMode_t)Addr16Bit;
   \   0001E7   90....       MOV     DPTR,#GenericApp_DstAddress + 8
   \   0001EA   7402         MOV     A,#0x2
   \   0001EC   F0           MOVX    @DPTR,A
    537              GenericApp_DstAddress.endPoint = GENERICAPP_ENDPOINT;
   \   0001ED   A3           INC     DPTR
   \   0001EE   740A         MOV     A,#0xa
   \   0001F0   F0           MOVX    @DPTR,A
    538              //GenericApp_DstAddress.addr.shortAddr = lookForAddr(ID);
    539              
    540             /* 
    541              pdevID = &devID;
    542              pData = &Data;
    543              *pdevID = ID;
    544              *pData = getCmd(ID);
    545              */
    546              //Data = getCmd(ID);
    547              
    548              
    549            
    550             // Successfully requested to be sent.
    551              //HalLcdWriteString("Podatak je poslan.",0);
    552              GenericApp_DstAddr.addr.shortAddr = lutData[0].devAddress;
   \   0001F1   90....       MOV     DPTR,#lutData + 2
   \   0001F4   12....       LCALL   ?Subroutine0 & 0xFFFF
    553              
    554              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    555                                 GENERICAPP_CLUSTERID,
    556                                 5,                                                       
    557                                 (byte *)&doorOpened,
    558                                 &GenericApp_TransID,
    559                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_1:
   \   0001F7                ; Setup parameters for call to function AF_DataRequest
   \   0001F7   75..1E       MOV     ?V0,#0x1e
   \   0001FA   78..         MOV     R0,#?V0
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001FF   75....       MOV     ?V0,#GenericApp_TransID & 0xff
   \   000202   75....       MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
   \   000205   78..         MOV     R0,#?V0
   \   000207   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020A   740A         MOV     A,#0xa
   \   00020C   12....       LCALL   ?XSTACK_DISP100_8
   \   00020F   88..         MOV     ?V0,R0
   \   000211   89..         MOV     ?V1,R1
   \   000213   78..         MOV     R0,#?V0
   \   000215   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000218   75..05       MOV     ?V0,#0x5
   \   00021B   75..00       MOV     ?V1,#0x0
   \   00021E   78..         MOV     R0,#?V0
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000223   75..01       MOV     ?V0,#0x1
   \   000226   78..         MOV     R0,#?V0
   \   000228   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022B   7900         MOV     R1,#0x0
   \   00022D   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   00022F   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000231   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   000233   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   000235   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000238   7409         MOV     A,#0x9
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
    560          
    561              
    562              //HalLcdWriteString((char *)rxBuffer, 0);
    563             // HalUARTWrite(HAL_UART_PORT_1, (uint8 *)rxBuffer, 19);
    564              HalUARTWrite(HAL_UART_PORT_1, "EVENT", 6);
   \   00023D                ; Setup parameters for call to function HalUARTWrite
   \   00023D   7C06         MOV     R4,#0x6
   \   00023F   7D00         MOV     R5,#0x0
   \   000241   7A..         MOV     R2,#`?<Constant "EVENT">` & 0xff
   \   000243   7B..         MOV     R3,#(`?<Constant "EVENT">` >> 8) & 0xff
   \   000245   7901         MOV     R1,#0x1
   \   000247   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    565              HalLcdWriteString("-EVENT-", 0);
   \   00024A   75....       MOV     ?V0,#`?<Constant "-EVENT-">` & 0xff
   \   00024D   75....       MOV     ?V1,#(`?<Constant "-EVENT-">` >> 8) & 0xff
   \   000250                ; Setup parameters for call to function HalLcdWriteString
   \   000250   7900         MOV     R1,#0x0
   \   000252   AA..         MOV     R2,?V0
   \   000254   AB..         MOV     R3,?V1
   \   000256   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    566              HalLcdWriteString((char *)uartConfig.rx.pBuffer, 0);
   \   000259                ; Setup parameters for call to function HalLcdWriteString
   \   000259   7900         MOV     R1,#0x0
   \   00025B   90....       MOV     DPTR,#uartConfig + 12
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   FA           MOV     R2,A
   \   000260   A3           INC     DPTR
   \   000261   E0           MOVX    A,@DPTR
   \   000262   FB           MOV     R3,A
   \   000263   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    567              HalLcdWriteString("-EVENT-", 0);
   \   000266                ; Setup parameters for call to function HalLcdWriteString
   \   000266   7900         MOV     R1,#0x0
   \   000268   AA..         MOV     R2,?V0
   \   00026A   AB..         MOV     R3,?V1
   \   00026C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    568              //HalUARTWrite(HAL_UART_PORT_0, "EVENT", 6);
    569              //HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rxBuffer, 19);
    570              /*
    571              theMessage[GenericApp_DstAddress.addr.shortAddr][0] = (char)((ID >> 8) & 0x00FF);
    572              theMessage[GenericApp_DstAddress.addr.shortAddr][1] = (char)(ID & 0x00FF); 
    573              */
    574             /* for(i = 0; i < 2; i++)
    575              {
    576                theMessage[GenericApp_DstAddress.addr.shortAddr][i] = (char)pdevID[i-1];
    577              }
    578              theMessage[GenericApp_DstAddress.addr.shortAddr][2] = (char)((Data >> 24) & 0x000000FF);
    579              theMessage[GenericApp_DstAddress.addr.shortAddr][3] = (char)((Data >> 16) & 0x000000FF); 
    580              theMessage[GenericApp_DstAddress.addr.shortAddr][4] = (char)((Data >> 8) & 0x000000FF);
    581              theMessage[GenericApp_DstAddress.addr.shortAddr][5] = (char)(Data & 0x000000FF); 
    582              */
    583             /* for(i = 2; i < 6; i++)
    584              {
    585                theMessage[GenericApp_DstAddress.addr.shortAddr][i] = (char)pData[i-4];
    586              }
    587          */
    588          /*
    589              if ( AF_DataRequest( &GenericApp_DstAddress, &GenericApp_epDesc,
    590                                     GENERICAPP_CLUSTERID,
    591                                     (byte)osal_strlen( theMessage[GenericApp_DstAddress.addr.shortAddr] ) + 1,
    592                                     (byte *)&theMessage[GenericApp_DstAddress.addr.shortAddr],
    593                                     &GenericApp_TransID,
    594                                     AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    595                {
    596                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
    597                }
    598          */
    599            }
    600              
    601            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
    602              
    603            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_16:
   \   00026F   EE           MOV     A,R6
   \   000270   A2E0         MOV     C,0xE0 /* A   */.0
   \   000272   4003         JC      $+5
   \   000274   02....       LJMP    ??GenericApp_ProcessEvent_17 & 0xFFFF
    604            {
    605              if(keyPressSW4)
   \   000277   90....       MOV     DPTR,#keyPressSW4
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   606B         JZ      ??GenericApp_ProcessEvent_18
    606              {
    607                
    608                dstAddr.addrMode = Addr16Bit;
   \   00027D   7414         MOV     A,#0x14
   \   00027F   12....       LCALL   ?XSTACK_DISP0_8
   \   000282   7402         MOV     A,#0x2
   \   000284   F0           MOVX    @DPTR,A
    609                dstAddr.addr.shortAddr = 0x0000;//NLME_GetShortAddr();//0x0000; // Coordinator
   \   000285   740C         MOV     A,#0xc
   \   000287   12....       LCALL   ?XSTACK_DISP0_8
   \   00028A   E4           CLR     A
   \   00028B   F0           MOVX    @DPTR,A
   \   00028C   A3           INC     DPTR
   \   00028D   F0           MOVX    @DPTR,A
    610                ZDP_EndDeviceBindReq( &dstAddr, 0x0000, //NLME_GetShortAddr(),
    611                                      GenericApp_epDesc.endPoint,
    612                                      GENERICAPP_PROFID,
    613                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    614                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    615                                      FALSE );
   \   00028E   75....       MOV     ?V0,#GenericApp_ClusterList & 0xff
   \   000291   75....       MOV     ?V1,#(GenericApp_ClusterList >> 8) & 0xff
   \   000294                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000294   F5..         MOV     ?V2,A
   \   000296   78..         MOV     R0,#?V2
   \   000298   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029B   78..         MOV     R0,#?V0
   \   00029D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A0   75..01       MOV     ?V2,#0x1
   \   0002A3   78..         MOV     R0,#?V2
   \   0002A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A8   78..         MOV     R0,#?V0
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AD   75..01       MOV     ?V0,#0x1
   \   0002B0   78..         MOV     R0,#?V0
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002B5   75..04       MOV     ?V0,#0x4
   \   0002B8   75..0F       MOV     ?V1,#0xf
   \   0002BB   78..         MOV     R0,#?V0
   \   0002BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C0   90....       MOV     DPTR,#GenericApp_epDesc
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   F9           MOV     R1,A
   \   0002C5   7C00         MOV     R4,#0x0
   \   0002C7   7D00         MOV     R5,#0x0
   \   0002C9   7415         MOV     A,#0x15
   \   0002CB   12....       LCALL   ?XSTACK_DISP101_8
   \   0002CE   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0002D1   7409         MOV     A,#0x9
   \   0002D3   12....       LCALL   ?DEALLOC_XSTACK8
    616                
    617                keyPressSW4 = 0;
   \   0002D6   90....       MOV     DPTR,#keyPressSW4
   \   0002D9   E4           CLR     A
   \   0002DA   F0           MOVX    @DPTR,A
    618                
    619                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   0002DB                ; Setup parameters for call to function osal_set_event
   \   0002DB   7A01         MOV     R2,#0x1
   \   0002DD   FB           MOV     R3,A
   \   0002DE   90....       MOV     DPTR,#GenericApp_TaskID
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   F9           MOV     R1,A
   \   0002E3   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0002E6   8055         SJMP    ??GenericApp_ProcessEvent_19
    620                
    621              }
    622              else
    623              {
    624                //uint8 l=0;
    625                //for(int i=0; i< len; i++)                             //*buff != NULL)
    626                 //HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
    627               //HalUARTRead(HAL_UART_PORT_0, buff, 2);
    628               //if(HalUARTRead(HAL_UART_PORT_0, buff, 2))
    629                //buff[i] = U0DBUF;   
    630                 // buff[l] = uartGet();
    631                /*while(buff[l]!='\0')
    632                {
    633                  
    634                  *buff = uartGet(); 
    635                  buff++;
    636                  l++;
    637                }*/
    638                //if(l==0)
    639                //HalLcdRead(buff, 1);
    640                //buff++;
    641                
    642           //////////////////////////////////////////////////////////////////////////////
    643                //HalLcdRead(buff, 1);    //zakomentarisao
    644                
    645          ///////////////////////////////////////////////////////////////////////////////
    646                //HalLcdWriteString("Sinisa",0); 
    647                //if(buff[0]='\0')
    648              /*  for(i = 0;i <3;i++)
    649                    {
    650                      uartSend(*(buff + i));
    651                    }
    652                
    653                    HalLcdWriteString("",0);
    654                    HalLcdWriteString("--------------------------------",0);
    655                  */
    656          //////////////////////////////////////////////////////////////////////////////
    657              // if((char)*buff!='\0') //zakomentarisao
    658               {
    659                 
    660                 GenericApp_SendTheMessage();
   \                     ??GenericApp_ProcessEvent_18:
   \   0002E8   75..00       MOV     ?V0,#0x0
   \                     ??GenericApp_ProcessEvent_20:
   \   0002EB   E5..         MOV     A,?V0
   \   0002ED   75F00A       MOV     B,#0xa
   \   0002F0   A4           MUL     AB
   \   0002F1   F8           MOV     R0,A
   \   0002F2   AAF0         MOV     R2,B
   \   0002F4   EA           MOV     A,R2
   \   0002F5   F9           MOV     R1,A
   \   0002F6   74..         MOV     A,#lutData & 0xff
   \   0002F8   28           ADD     A,R0
   \   0002F9   F582         MOV     DPL,A
   \   0002FB   74..         MOV     A,#(lutData >> 8) & 0xff
   \   0002FD   39           ADDC    A,R1
   \   0002FE   F583         MOV     DPH,A
   \   000300   E0           MOVX    A,@DPTR
   \   000301   F8           MOV     R0,A
   \   000302   A3           INC     DPTR
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F9           MOV     R1,A
   \   000305   E8           MOV     A,R0
   \   000306   49           ORL     A,R1
   \   000307   6014         JZ      ??GenericApp_ProcessEvent_21
   \   000309                ; Setup parameters for call to function sendDataToPC
   \   000309   E5..         MOV     A,?V0
   \   00030B   75F00A       MOV     B,#0xa
   \   00030E   A4           MUL     AB
   \   00030F   F8           MOV     R0,A
   \   000310   EA           MOV     A,R2
   \   000311   F9           MOV     R1,A
   \   000312   74..         MOV     A,#lutData & 0xff
   \   000314   28           ADD     A,R0
   \   000315   FA           MOV     R2,A
   \   000316   74..         MOV     A,#(lutData >> 8) & 0xff
   \   000318   39           ADDC    A,R1
   \   000319   FB           MOV     R3,A
   \   00031A   12....       LCALL   `??sendDataToPC::?relay`; Banked call to: sendDataToPC
   \                     ??GenericApp_ProcessEvent_21:
   \   00031D   05..         INC     ?V0
   \   00031F   E5..         MOV     A,?V0
   \   000321   C3           CLR     C
   \   000322   9414         SUBB    A,#0x14
   \   000324   40C5         JC      ??GenericApp_ProcessEvent_20
    661                  //HalLcdWriteString("Sile before send",0);
    662               }
    663              
    664          //////////////////////////////////////////////////////////////////////////////
    665               
    666               
    667               
    668               
    669              // Send "the" message
    670               //GenericApp_SendTheMessage();                                              //////////////////////////////////////////////////////////////////////////////////////////////////
    671               
    672               //Setup to send message again
    673               osal_start_timerEx( GenericApp_TaskID,
    674                                   GENERICAPP_SEND_MSG_EVT,
    675                                   1000); //txMsgDelay );
   \   000326                ; Setup parameters for call to function osal_start_timerEx
   \   000326   90....       MOV     DPTR,#__Constant_3e8
   \   000329   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00032C   7A01         MOV     R2,#0x1
   \   00032E   7B00         MOV     R3,#0x0
   \   000330   90....       MOV     DPTR,#GenericApp_TaskID
   \   000333   E0           MOVX    A,@DPTR
   \   000334   F9           MOV     R1,A
   \   000335   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000338   7404         MOV     A,#0x4
   \   00033A   12....       LCALL   ?DEALLOC_XSTACK8
    676              
    677              // osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
    678              
    679              }
    680              // return unprocessed events
    681              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_19:
   \   00033D   EE           MOV     A,R6
   \   00033E   6401         XRL     A,#0x1
   \   000340   FA           MOV     R2,A
   \   000341   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_15:
   \   000342   FB           MOV     R3,A
   \   000343   8004         SJMP    ??GenericApp_ProcessEvent_22
    682            }
    683          
    684          #if defined( IAR_ARMCM3_LM )
    685            // Receive a message from the RTOS queue
    686            if ( events & GENERICAPP_RTOS_MSG_EVT )
    687            {
    688              // Process message from RTOS queue
    689              GenericApp_ProcessRtosMessage();
    690          
    691              // return unprocessed events
    692              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    693            }
    694          #endif
    695          
    696            // Discard unknown events
    697            return 0;
   \                     ??GenericApp_ProcessEvent_17:
   \   000345   7A00         MOV     R2,#0x0
   \   000347   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_22:
   \   000349   7415         MOV     A,#0x15
   \   00034B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00034E   7F06         MOV     R7,#0x6
   \   000350   02....       LJMP    ?BANKED_LEAVE_XDATA
    698          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {83, 69, 78, 68, 0}>`:
   \   000000   53           DB 83
   \   000001   45           DB 69
   \   000002   4E           DB 78
   \   000003   44           DB 68
   \   000004   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EVENT">`:
   \   000000   4556454E     DB "EVENT"
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-EVENT-">`:
   \   000000   2D455645     DB "-EVENT-"
   \            4E542D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Match Desc">`:
   \   000000   456E6420     DB "End Device Match Desc"
   \            44657669
   \            6365204D
   \            61746368
   \            20446573
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    699          
    700          /*********************************************************************
    701           * Event Generation Functions
    702           */
    703          
    704          /*********************************************************************
    705           * @fn      GenericApp_ProcessZDOMsgs()
    706           *
    707           * @brief   Process response messages
    708           *
    709           * @param   none
    710           *
    711           * @return  none
    712           */
    713          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    714          {
    715          
    716            switch ( inMsg->clusterID )
    717            {
    718              case End_Device_Bind_rsp:
    719                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    720                {
    721                
    722                  // Light LED
    723                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    724                }
    725          #if defined( BLINK_LEDS )
    726                else
    727                {
    728                  // Flash LED to show failure
    729                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    730                }
    731          #endif
    732                break;
    733          
    734              case Match_Desc_rsp:
    735                {
    736                  HalLcdWriteString("End Device Match Desc",0);
    737                  
    738                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    739                  if ( pRsp )
    740                  {
    741                        if ( pRsp->status == ZSuccess && pRsp->cnt )
    742                        {
    743                          
    744                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    745                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    746                      // Take the first endpoint, Can be changed to search through endpoints
    747                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    748          
    749                      // Light LED
    750                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    751                    }
    752                    osal_mem_free( pRsp );
    753                  }
    754                }
    755                break;
    756            }
    757          }
    758          
    759          /*********************************************************************
    760           * @fn      GenericApp_HandleKeys
    761           *
    762           * @brief   Handles all key events for this device.
    763           *
    764           * @param   shift - true if in shift/alt.
    765           * @param   keys - bit field for key events. Valid entries:
    766           *                 HAL_KEY_SW_4
    767           *                 HAL_KEY_SW_3
    768           *                 HAL_KEY_SW_2
    769           *                 HAL_KEY_SW_1
    770           *
    771           * @return  none
    772           *//*
    773          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    774          {
    775            zAddrType_t dstAddr;
    776          
    777            // Shift is used to make each button/switch dual purpose.
    778            if ( shift )
    779            {
    780              if ( keys & HAL_KEY_SW_1 )
    781              {
    782              }
    783              if ( keys & HAL_KEY_SW_2 )
    784              {
    785              }
    786              if ( keys & HAL_KEY_SW_3 )
    787              {
    788              }
    789              if ( keys & HAL_KEY_SW_4 )
    790              {
    791              }
    792            }
    793            else
    794            {
    795              if ( keys & HAL_KEY_SW_1 )
    796              {
    797          #if defined( SWITCH1_BIND )
    798                // We can use SW1 to simulate SW2 for devices that only have one switch,
    799                keys |= HAL_KEY_SW_2;
    800          #elif defined( SWITCH1_MATCH )
    801                // or use SW1 to simulate SW4 for devices that only have one switch
    802                keys |= HAL_KEY_SW_4;
    803          #else
    804                // Normally, SW1 changes the rate that messages are sent
    805                if ( txMsgDelay > 100 )
    806                {
    807                  // Cut the message TX delay in half
    808                  txMsgDelay /= 2;
    809                }
    810                else
    811                {
    812                  // Reset to the default
    813                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    814                }
    815          #endif
    816              }
    817          
    818              if ( keys & HAL_KEY_SW_2 )
    819              {
    820                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    821          
    822                // Initiate an End Device Bind Request for the mandatory endpoint
    823                dstAddr.addrMode = Addr16Bit;
    824                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    825                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    826                                      GenericApp_epDesc.endPoint,
    827                                      GENERICAPP_PROFID,
    828                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    829                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    830                                      FALSE );
    831              }
    832          
    833              if ( keys & HAL_KEY_SW_3 )
    834              {
    835              }
    836          
    837              if ( keys & HAL_KEY_SW_4 )
    838              {
    839                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    840                // Initiate a Match Description Request (Service Discovery)
    841                dstAddr.addrMode = AddrBroadcast;
    842                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    843                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    844                                  GENERICAPP_PROFID,
    845                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    846                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    847                                  FALSE );
    848              }
    849            }
    850          }
    851          */
    852          /*********************************************************************
    853           * LOCAL FUNCTIONS
    854           */
    855          
    856          /*********************************************************************
    857           * @fn      GenericApp_MessageMSGCB
    858           *
    859           * @brief   Data message processor callback.  This function processes
    860           *          any incoming data - probably from other devices.  So, based
    861           *          on cluster ID, perform the intended action.
    862           *
    863           * @param   none
    864           *
    865           * @return  none
    866           */
    867          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    868          {
    869            //uint8 i;
    870            //////////////////////////////////////////////////////////////////////////////
    871            Data_t Data;
    872            uint16 addr;
    873            //char * id;
    874            //////////////////////////////////////////////////////////////////////////////
    875            switch ( pkt->clusterId )
    876            {
    877              case GENERICAPP_CLUSTERID:
    878                
    879                {
    880                rxMsgCount += 1;  // Count this message
    881                HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
    882          
    883               // HalLcdWriteString("--------------------------------",0);
    884               // HalLcdWriteString("Received data:",0);
    885          /*      
    886                for(i=0;i<pkt->cmd.DataLength;i++)
    887                {
    888                  uartSend(*(pkt->cmd.Data + i));
    889                  
    890                }
    891          */     
    892           ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    893                //Data.devID = *(pkt->cmd.Data);
    894                Data.devID =getIDFromPkt(&pkt->cmd);
    895                
    896                //id = (char*)&Data.devID;
    897                //pkt->cmd.Data++;
    898                //pkt->cmd.Data++;
    899                //Data.data = *(pkt->cmd.Data);
    900                Data.data =getDataFromPkt(&pkt->cmd); 
    901                //id = (char*)&Data.data;
    902                addr = pkt->macSrcAddr;
    903                
    904                updateLookUpTable(Data, addr);
    905                //HalLcdWriteString(id,0); 
    906              // HalLcdWriteString("Sina----------------------",0); 
    907                
    908           ///////////////////////////////////////////////////////////////////////////////
    909           //zakomentarisao
    910                /*
    911                switch(*(pkt->cmd.Data))
    912                {
    913                  
    914                  case ('T'):
    915                  {
    916                        HalLcdWriteString("Temperatura: ",0);
    917                        for(i=1;i<pkt->cmd.DataLength;i++)
    918                        {
    919                          if(3 == i)
    920                          {
    921                            uartSend('.');
    922                          }
    923                          
    924                            uartSend(*(pkt->cmd.Data + i));
    925                        }
    926                        
    927                        HalLcdWriteString(" *C",0);
    928                        break;
    929                  }
    930                
    931                
    932                 case ('P'):
    933                 {
    934                      
    935                   HalLcdWriteString("Pritisak: ",0);
    936                      for(i=1;i<pkt->cmd.DataLength;i++)
    937                      {
    938                        uartSend(*(pkt->cmd.Data + i));
    939                      } 
    940                     HalLcdWriteString(" mbar",0);
    941                       break;
    942                  }
    943                    
    944                 case ('H'):
    945                  {
    946                   HalLcdWriteString("Vlaznost",0);
    947                   for(i=1;i<pkt->cmd.DataLength;i++)
    948                      {
    949                      uartSend(*(pkt->cmd.Data + i));
    950                      }
    951                     HalLcdWriteString(" %",0);
    952                   break;
    953                   }
    954                  
    955                case ('M'):
    956                  {
    957                  if(*(pkt->cmd.Data+1)=='1')
    958                     HalLcdWriteString("Pokret je detektovan",0);
    959                     
    960                   else
    961                     HalLcdWriteString(" GreskaM!!! ",0);
    962                  break;
    963                  }
    964          
    965                  case ('D'):
    966                    {
    967                     if(*(pkt->cmd.Data+1)=='1')
    968                        HalLcdWriteString("Vrata su otvorena",0);
    969                     
    970                      else if(*(pkt->cmd.Data+1)=='0')
    971                         HalLcdWriteString("Vrata su zatvorena",0);
    972                  
    973                   else
    974                     HalLcdWriteString(" GreskaD!!! ",0);
    975                   break;
    976                    }
    977                
    978                    case ('O'):
    979                    {
    980                    if(*(pkt->cmd.Data+1)=='1')
    981                     HalLcdWriteString("Mrak",0);
    982                     
    983                    else if(*(pkt->cmd.Data+1)=='2')
    984                     HalLcdWriteString("Slabo osvijetljeno",0);
    985                  
    986                    else if(*(pkt->cmd.Data+1)=='3')
    987                     HalLcdWriteString("Osvijetljeno",0);
    988                  
    989                    else if(*(pkt->cmd.Data+1)=='4')
    990                     HalLcdWriteString("Jako osvijetljeno",0);
    991                  
    992                    else
    993                      HalLcdWriteString(" GreskaO!!! ",0);
    994                    break;
    995                    }
    996                } //second switch end
    997                */
    998          ///////////////////////////////////////////////////////////////////////////////      
    999              //  HalLcdWriteString("",0);
   1000              //  HalLcdWriteString("--------------------------------",0);
   1001                
   1002               
   1003                }
   1004                break; //break first switch
   1005                
   1006            default:
   1007              
   1008             //HalLcdWriteString("Podatak nije primljen.",0);
   1009                  
   1010              break;
   1011          
   1012            }
   1013          
   1014          
   1015          }
   1016          
   1017          /*********************************************************************
   1018           * @fn      GenericApp_SendTheMessage
   1019           *
   1020           * @brief   Send "the" message.
   1021           *
   1022           * @param   none
   1023          
   1024           *
   1025           * @return  none
   1026           */
   1027          static void GenericApp_SendTheMessage( void )
   1028          {
   1029            uint8 i;
   1030           // char * id;
   1031            //uint32 data;
   1032            /*BS
   1033            char doorOpened[] = {'S','E','N','D','\0'};
   1034            
   1035             // Successfully requested to be sent.
   1036              //HalLcdWriteString("Podatak je poslan.",0);
   1037              GenericApp_DstAddr.addr.shortAddr = lutData[0].devAddress;
   1038              
   1039              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
   1040                                 GENERICAPP_CLUSTERID,
   1041                                 5,                                                       
   1042                                 (byte *)&doorOpened,
   1043                                 &GenericApp_TransID,
   1044                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   1045              
   1046              HalLcdWriteString("Provjera slanja",0);
   1047            */
   1048              
   1049             for(i = 0; i < 20; i++)
   1050            {
   1051              //HalLcdWriteString("Sinisa-------------petlja-----",0);
   1052              if(0 != lutData[i].devID)
   1053              {
   1054                sendDataToPC(&lutData[i]);
   1055                
   1056                //id = (char*)&lutData[i].devID;
   1057               //id[2] = '\0';
   1058                  //HalLcdWriteString("-----------------------------Borislav  Send----------------------",0);
   1059                  //HalLcdWriteString(id,0);
   1060                  //HalLcdWriteString("-----------------------------Borislav  Send----------------------",0);
   1061                //HalLcdWriteString("Sinisa-------------petlja-----",0);
   1062              }
   1063            } 
   1064             //HalLcdWriteString("Sinisa----------------------",0); 
   1065          /*
   1066            
   1067            uint8 i;
   1068            char num = '0';
   1069          
   1070            char theMessageData[MAX_NUMBER_OF_ENDDEVICES][25] = {"You are EndDevice1111","You are EndDevice2222"};
   1071            //char *msg1;
   1072            //char *msg2;
   1073            //char *msg[MAX_NUMBER_OF_ENDDEVICES];
   1074            //HalLcdRead(msg[0],2);
   1075            //HalLcdRead(msg[1],2);
   1076            
   1077            //HalLcdWriteString("Sile in send",0);
   1078            */
   1079            /*
   1080            char theMessage[MAX_NUMBER_OF_ENDDEVICES][25] = {"0000", "FFFF"};
   1081            if('1' == (char)*buff)
   1082            {
   1083              theMessage[0][0] = (char)buff[0];
   1084              theMessage[0][1] = (char)buff[1];
   1085              theMessage[0][2] = '\0';
   1086              theMessage[1][0] = '0';
   1087              theMessage[1][1] = '0';
   1088              theMessage[1][2] = '\0';
   1089             // HalLcdWriteString("Buff 1",0);
   1090            }
   1091            else
   1092            {
   1093              theMessage[1][0] = (char)buff[0];
   1094              theMessage[1][1] = (char)buff[1];
   1095              //theMessage[1][0] = (char)*buff;
   1096              //theMessage[1][1] = (char)*(buff+1);
   1097              theMessage[1][2] = '\0';
   1098              theMessage[0][0] = '0';
   1099              theMessage[0][1] = '0';
   1100              theMessage[0][2] = '\0';
   1101              //HalLcdWriteString("Buff 2",0);
   1102            }
   1103            
   1104            for(i = 0; i<brojac; i++)
   1105            {
   1106             */ 
   1107             /*  HalLcdWriteString("Ulazak u petlju",0);
   1108               num+=i;
   1109               uartSend(num);
   1110               HalLcdWriteString("",0);
   1111               */
   1112            /*  if(GenericApp_DstAddress[i].addr.shortAddr != 0 )
   1113                                   
   1114              {
   1115                if ( AF_DataRequest( &GenericApp_DstAddress[i], &GenericApp_epDesc,
   1116                                   GENERICAPP_CLUSTERID,
   1117                                   //(byte)osal_strlen( theMessageData[i] ) + 1,
   1118                                   //(byte *)&theMessageData[i],
   1119                                   (byte)osal_strlen( theMessage[i] ) + 1,
   1120                                   (byte *)&theMessage[i],
   1121                                   //(byte *)theMessageData[i],
   1122                                   //(byte)osal_strlen(msg[i]) + 1,
   1123                                   //(byte *)msg[i],
   1124                                   &GenericApp_TransID,
   1125                                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1126                {
   1127                // Successfully requested to be sent.
   1128                  HalLcdWriteString("Podatak je poslan.",0);
   1129            */
   1130                  /*HalLcdWriteString("###############################",0);
   1131               
   1132                
   1133                    for(i = 0;i <3;i++)
   1134                    {
   1135                      uartSend(*(buff + i));
   1136                    }
   1137                
   1138                    HalLcdWriteString("",0);
   1139                    HalLcdWriteString("--------------------------------",0);
   1140                  */
   1141            /*    }
   1142                else
   1143                {
   1144                // Error occurred in request to send.
   1145                  HalLcdWriteString("Podatak nije poslan.",0);
   1146                }
   1147              
   1148              }
   1149            }
   1150          
   1151            buff[0] = '\0';
   1152            */
   1153          }
   1154          
   1155          #if defined( IAR_ARMCM3_LM )
   1156          /*********************************************************************
   1157           * @fn      GenericApp_ProcessRtosMessage
   1158           *
   1159           * @brief   Receive message from RTOS queue, send response back.
   1160           *
   1161           * @param   none
   1162           *
   1163           * @return  none
   1164           */
   1165          static void GenericApp_ProcessRtosMessage( void )
   1166          {
   1167            osalQueue_t inMsg;
   1168          
   1169            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
   1170            {
   1171              uint8 cmndId = inMsg.cmnd;
   1172              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
   1173          
   1174              switch ( cmndId )
   1175              {
   1176                case CMD_INCR:
   1177                  counter += 1;  /* Increment the incoming counter */
   1178                                 /* Intentionally fall through next case */
   1179          
   1180                case CMD_ECHO:
   1181                {
   1182                  userQueue_t outMsg;
   1183          
   1184                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
   1185                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
   1186                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
   1187                  break;
   1188                }
   1189          
   1190                default:
   1191                  break;  /* Ignore unknown command */
   1192              }
   1193            }
   1194          }
   1195          #endif
   1196          
   1197          /**********************************************************************/
   1198          
   1199          /*********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   GenericApp_Init
        9   -> HalLcdWriteString
        9   -> RegisterForKeys
        9   -> ZDO_RegisterForZDOMsg
        9   -> afRegister
        9   -> dllInit
        9   -> lookUpInit
     44   GenericApp_ProcessEvent
       44   -> AF_DataRequest
       35   -> HalLcdWriteString
       35   -> HalLedSet
       35   -> HalUARTRead
       35   -> HalUARTWrite
       35   -> ZDO_ParseEPListRsp
       44   -> ZDP_EndDeviceBindReq
       35   -> getDataFromPkt
       35   -> getIDFromPkt
       35   -> osal_mem_free
       35   -> osal_msg_deallocate
       35   -> osal_msg_receive
       35   -> osal_set_event
       39   -> osal_start_timerEx
       35   -> sendDataToPC
       42   -> updateLookUpTable


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "-EVENT-">
       6  ?<Constant "EVENT">
      22  ?<Constant "End Device Match Desc">
      11  ?<Constant "GenericApp">
       5  ?<Constant {83, 69, 78, 68, 0}>
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       4  ?<Initializer for txMsgDelay>
      14  ?Subroutine0
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
      12  GenericApp_DstAddress
     105  GenericApp_Init
       6  GenericApp_Init::?relay
       1  GenericApp_NwkState
     851  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
      20  SAddr
       4  __Constant_3e8
       1  brojac
       2  buff
       1  coin
       2  counter
      10  dataBuffer
       1  dataRdy
       1  index
       1  keyPressSW4
     200  lutData
       1  prevData
       2  rxBuffer
       2  rxMsgCount
      20  shortAddressOfEndDevice
       4  txMsgDelay
      29  uartConfig

 
 970 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
  70 bytes in segment XDATA_ROM_C
 324 bytes in segment XDATA_Z
 
  18 bytes of CODE     memory
  66 bytes of CONST    memory (+ 4 bytes shared)
 970 bytes of HUGECODE memory
 330 bytes of XDATA    memory

Errors: none
Warnings: none
