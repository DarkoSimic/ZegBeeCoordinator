###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                03/May/2017  09:23:46
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          
     87          
     88          
     89          
     90          
     91          
     92          ////////////////////////////////////////////////////////////////////////////////////////////
     93          //#include "includes/hal_driver.h"
     94          #include "hal_drivers.h"
     95          
     96          #include "includes/dll.h"
     97          #include "includes/look_up_table.h"
     98          
     99          #include "includes/circular_buffer.h"
    100          
    101          ////////////////////////////////////////////////////////////////////////////////////////////
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          
    108          #define GENERICAPP_ENDPOINT           10
    109          
    110          #define GENERICAPP_PROFID             0x0F04
    111          #define GENERICAPP_DEVICEID           0x0001
    112          #define GENERICAPP_DEVICE_VERSION     0
    113          #define GENERICAPP_FLAGS              0
    114          
    115          #define GENERICAPP_MAX_CLUSTERS       1
    116          #define GENERICAPP_CLUSTERID          1
    117          
    118          
    119          #define MAX_NUMBER_OF_ENDDEVICES      10
    120          
    121          
    122          // magnetic switch macros
    123          #define DOOR_CLOSED_DETECTION P1_2
    124          #define TRUE 1
    125          #define CLOSED 1
    126          #define OPENED 0
    127          // magnetic switch macros end
    128             
    129          
    130          #define HAL_UART_ISR 2
    131          
    132          #define HAL_UART_MSECS_TO_TICKS    33
    133          
    134          #if !defined HAL_UART_ISR_IDLE
    135          #define HAL_UART_ISR_IDLE         (6 * HAL_UART_MSECS_TO_TICKS)
    136          #endif
    137          
    138          #if !defined HAL_UART_ISR_RX_MAX
    139          #define HAL_UART_ISR_RX_MAX        128
    140          #endif
    141          #if !defined HAL_UART_ISR_TX_MAX
    142          #define HAL_UART_ISR_TX_MAX        HAL_UART_ISR_RX_MAX
    143          #endif
    144             
    145          /*********************************************************************
    146           * CONSTANTS
    147           */
    148          
    149          /*********************************************************************
    150           * TYPEDEFS
    151           */
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          ////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          CircularBuffer_t cMain;
   \                     cMain:
   \   000000                DS 260
   \   000104                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 dataRdy;
   \                     dataRdy:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          LookUpTable_t lutData[20];
   \                     lutData:
   \   000000                DS 200
   \   0000C8                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 *rxBuffer;
   \                     rxBuffer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          halUARTCfg_t uartConfig;
   \                     uartConfig:
   \   000000                DS 29
   \   00001D                REQUIRE __INIT_XDATA_Z
    162          ////////////////////////////////////////////////////////////////////////////////////////////
    163          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          
    167          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    171             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 *buff;
   \                     buff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    175          
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 brojac = 0;
   \                     brojac:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          
    185          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    186          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    187          {
    188            GENERICAPP_CLUSTERID
    189          };
    190          

   \                                 In  segment XDATA_ROM_C, align 1
    191          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    192          {
    193            GENERICAPP_ENDPOINT,              //  int Endpoint;
    194            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    195            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    196            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    197            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    198            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    199            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    200            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    201            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    202          };
    203          
    204          // This is the Endpoint/Interface description.  It is defined here, but
    205          // filled-in in GenericApp_Init().  Another way to go would be to fill
    206          // in the structure here and make it a "const" (in code space).  The
    207          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    209          
    210          /*********************************************************************
    211           * EXTERNAL VARIABLES
    212           */
    213          
    214          /*********************************************************************
    215           * EXTERNAL FUNCTIONS
    216           */
    217          
    218            extern void uartInit(void);
    219            extern void uartSend(char);
    220           // void LazoInit(void);
    221          
    222          /*********************************************************************
    223           * LOCAL VARIABLES
    224           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    225          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    226                                    // This variable will be received when
    227                                    // GenericApp_Init() is called.
    228          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    229          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    230          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    232          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    233          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    234          afAddrType_t GenericApp_DstAddress;//GenericApp_DstAddress
   \                     GenericApp_DstAddress:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    235          //////////////////////////////////////////////////////////////////////////////  Mozda izbrisati ovo
    236          
    237          //afAddrType_t GenericApp_DstAddress[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
    238          
    239          // Number of recieved messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    240          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    241          
    242          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    243          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    244          
    245          /*********************************************************************
    246           * LOCAL FUNCTIONS
    247           */
    248          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    249          //static void GenericApp_HandleKeys( byte shift, byte keys );
    250          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    251          static void GenericApp_SendTheMessage( void );
    252          
    253          //static void GenericApp_EndPointList(uint16);
    254          
    255          #if defined( IAR_ARMCM3_LM )
    256          static void GenericApp_ProcessRtosMessage( void );
    257          #endif
    258          
    259          /*********************************************************************
    260           * NETWORK LAYER CALLBACKS
    261           */
    262          
    263          /*********************************************************************
    264           * PUBLIC FUNCTIONS
    265           */
    266          
    267          /*********************************************************************
    268           * @fn      GenericApp_Init
    269           *
    270           * @brief   Initialization function for the Generic App Task.
    271           *          This is called during initialization and should contain
    272           *          any application specific initialization (ie. hardware
    273           *          initialization/setup, table initialization, power up
    274           *          notificaiton ... ).
    275           *
    276           * @param   task_id - the ID assigned by OSAL.  This ID should be
    277           *                    used to send messages and set timers.
    278           *
    279           * @return  none
    280           */
    281          
    282          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    284          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    285            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    286            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    287            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    288            
    289            // Device hardware initialization can be added here or in main() (Zmain.c).
    290            // If the hardware is application specific - add it here.
    291            // If the hardware is other parts of the device add it in main().
    292          
    293            /*GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    294            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
    295            GenericApp_DstAddr.addr.shortAddr = 0xFFFF; //0;// NLME_GetShortAddr();//1;*/
    296          
    297            // Fill out the endpoint description.
    298            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000015   90....       MOV     DPTR,#GenericApp_epDesc
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
    299            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
    300            GenericApp_epDesc.simpleDesc
    301                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
    302            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    303          
    304            // Register the endpoint description with the AF
    305            afRegister( &GenericApp_epDesc );
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    306          
    307            // Register for all key events - This app will handle all key events
    308            RegisterForKeys( GenericApp_TaskID );
   \   000035                ; Setup parameters for call to function RegisterForKeys
   \   000035   90....       MOV     DPTR,#GenericApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    309          
    310            // Update the display
    311          #if defined ( LCD_SUPPORTED )
    312            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00003D                ; Setup parameters for call to function HalLcdWriteString
   \   00003D   7901         MOV     R1,#0x1
   \   00003F   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000041   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000043   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    313          #endif
    314          
    315            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000046                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000046   7A20         MOV     R2,#0x20
   \   000048   7B80         MOV     R3,#-0x80
   \   00004A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    316            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A06         MOV     R2,#0x6
   \   000054   7B80         MOV     R3,#-0x80
   \   000056   90....       MOV     DPTR,#GenericApp_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    317          
    318          #if defined( IAR_ARMCM3_LM )
    319            // Register this task with RTOS task initiator
    320            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    321          #endif
    322          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
    323            //halInitDriver();
    324              dllInit();
   \   00005E                ; Setup parameters for call to function dllInit
   \   00005E   12....       LCALL   `??dllInit::?relay`  ; Banked call to: dllInit
    325              lookUpInit();
   \   000061                ; Setup parameters for call to function lookUpInit
   \   000061   12....       LCALL   `??lookUpInit::?relay`; Banked call to: lookUpInit
    326              circularInit(&cMain);
   \   000064                ; Setup parameters for call to function circularInit
   \   000064   7A..         MOV     R2,#cMain & 0xff
   \   000066   7B..         MOV     R3,#(cMain >> 8) & 0xff
   \   000068   12....       LCALL   `??circularInit::?relay`; Banked call to: circularInit
    327              
    328               //halGPIOOutput(HW_PORT_D, 0x03, 0);
    329          
    330              circularPut(&cMain, 'T');
   \   00006B                ; Setup parameters for call to function circularPut
   \   00006B   7954         MOV     R1,#0x54
   \   00006D   7A..         MOV     R2,#cMain & 0xff
   \   00006F   7B..         MOV     R3,#(cMain >> 8) & 0xff
   \   000071   12....       LCALL   `??circularPut::?relay`; Banked call to: circularPut
    331              circularPut(&cMain, 'E');
   \   000074                ; Setup parameters for call to function circularPut
   \   000074   7945         MOV     R1,#0x45
   \   000076   7A..         MOV     R2,#cMain & 0xff
   \   000078   7B..         MOV     R3,#(cMain >> 8) & 0xff
   \   00007A   12....       LCALL   `??circularPut::?relay`; Banked call to: circularPut
    332              circularPut(&cMain, 'S');
   \   00007D                ; Setup parameters for call to function circularPut
   \   00007D   7953         MOV     R1,#0x53
   \   00007F   7A..         MOV     R2,#cMain & 0xff
   \   000081   7B..         MOV     R3,#(cMain >> 8) & 0xff
   \   000083   12....       LCALL   `??circularPut::?relay`; Banked call to: circularPut
    333              circularPut(&cMain, 'T');
   \   000086                ; Setup parameters for call to function circularPut
   \   000086   7954         MOV     R1,#0x54
   \   000088   7A..         MOV     R2,#cMain & 0xff
   \   00008A   7B..         MOV     R3,#(cMain >> 8) & 0xff
   \   00008C   12....       LCALL   `??circularPut::?relay`; Banked call to: circularPut
    334              
    335             // halUARTWrite(PC, &cMain, 0);
    336            
    337          ////////////////////////////////////////////////////////////////////////////////////////////  
    338              
    339            
    340          }
   \   00008F   7F01         MOV     R7,#0x1
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          /*********************************************************************
    342           * @fn      GenericApp_EndPointList
    343           *
    344           * @brief   Get's short address of end device and put in the end device 
    345                      array
    346           *
    347           * @param   shAddr  - Short Address of connected End Device
    348           * 
    349           * @return  none
    350           */
    351          /*
    352          static void GenericApp_EndPointList(uint16 shAddr)
    353          {
    354           
    355            if(index > MAX_NUMBER_OF_ENDDEVICES)
    356            {
    357              HalLcdWriteString("Max number of end devices overflow.",0);
    358            }
    359            else
    360            {
    361              shortAddressOfEndDevice[index];
    362              index++;
    363            }
    364            
    365            
    366          }
    367          */
    368          /*********************************************************************
    369           * @fn      GenericApp_ProcessEvent
    370           *
    371           * @brief   Generic Application Task event processor.  This function
    372           *          is called to process all events for the task.  Events
    373           *          include timers, messages and any other user defined events.
    374           *
    375           * @param   task_id  - The OSAL assigned task ID.
    376           * @param   events - events to process.  This is a bit map and can
    377           *                   contain more than one event.
    378           *
    379           * @return  none
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 266
   \   000005   7582F6       MOV     DPL,#-0xa
   \   000008   7583FE       MOV     DPH,#-0x2
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   EA           MOV     A,R2
   \   00000F   FE           MOV     R6,A
   \   000010   EB           MOV     A,R3
   \   000011   FF           MOV     R7,A
    383            afIncomingMSGPacket_t *MSGpkt;
    384            afDataConfirm_t *afDataConfirm;
    385            zAddrType_t dstAddr;
    386          
    387              //uint8 flag = 0;
    388              //uint8 i;
    389          
    390          
    391            // Data Confirmation message fields
    392            byte sentEP;
    393            ZStatus_t sentStatus;
    394            byte sentTransID;       // This should match the value sent
    395            (void)task_id;  // Intentionally unreferenced parameter
    396          
    397            if ( events & SYS_EVENT_MSG )
   \   000012   5480         ANL     A,#0x80
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    398            {
    399              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000019                ; Setup parameters for call to function osal_msg_receive
   \   000019   8013         SJMP    ??GenericApp_ProcessEvent_1
    400              
    401             
    402              while ( MSGpkt )
    403              {
    404                switch ( MSGpkt->hdr.event )
    405                {
    406                  case ZDO_CB_MSG:
    407                    
    408                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    409                    
    410                    break;
    411          
    412                  case KEY_CHANGE:                                                        /////////////////////////////////////////////// case KEY_CHANGE: prazno ????????????????????????????
    413          
    414                    break;
    415          
    416                  case AF_DATA_CONFIRM_CMD:
    417                    // This message is received as a confirmation of a data packet sent.
    418                    // The status is of ZStatus_t type [defined in ZComDef.h]
    419                    // The message fields are defined in AF.h
    420                   
    421                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    422          
    423                    sentEP = afDataConfirm->endpoint;
    424                    (void)sentEP;  // This info not used now
    425                    sentTransID = afDataConfirm->transID;
    426                    (void)sentTransID;  // This info not used now
    427          
    428                    sentStatus = afDataConfirm->hdr.status;
    429                    // Action taken when confirmation is received.
    430                    if ( sentStatus != ZSuccess )
    431                    {
    432                      // The data wasn't delivered -- Do something
    433                    }
    434                    break;
    435          
    436                  case AF_INCOMING_MSG_CMD:
    437          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////          
    438                   /* if(0==brojac)
    439                    {
    440                     shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    441                     brojac++;
    442                    }
    443                    else
    444                    {
    445                      for(i = 0; i<brojac; i++)
    446                      {
    447                        if(shortAddressOfEndDevice[i]==MSGpkt->macSrcAddr)
    448                        {
    449                          flag++;
    450                        }
    451                      }
    452                    
    453                      if(0 == flag)
    454                      {
    455                        shortAddressOfEndDevice[brojac] = MSGpkt->macSrcAddr;
    456                        brojac++;
    457                      }
    458                      else
    459                      {
    460                        flag = 0;
    461                      }
    462                    }
    463                    
    464                    for(i = 0; i<brojac; i++)
    465                    {
    466                      GenericApp_DstAddress[i].addrMode = (afAddrMode_t)Addr16Bit;
    467                      GenericApp_DstAddress[i].endPoint = GENERICAPP_ENDPOINT;
    468                      GenericApp_DstAddress[i].addr.shortAddr = shortAddressOfEndDevice[i];
    469                    }*/
    470                    
    471                   GenericApp_MessageMSGCB( MSGpkt );
    472           ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
    473                    break;
    474          
    475                  case ZDO_STATE_CHANGE:
    476                     
    477                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    478                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    479                         (GenericApp_NwkState == DEV_ROUTER) ||
    480                         (GenericApp_NwkState == DEV_END_DEVICE) )
    481                    {
    482                      
    483                     
    484                      // Start sending "the" message in a regular interval.
    485                      osal_start_timerEx( GenericApp_TaskID,
    486                                          GENERICAPP_SEND_MSG_EVT,
    487                                          txMsgDelay );
    488                    }
    489                                
    490                    break;
    491          
    492                  default:
    493                     
    494                    
    495                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   00001B                ; Setup parameters for call to function osal_set_event
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   90....       MOV     DPTR,#GenericApp_TaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    496                     break;
    497                }
    498          
    499                // Release the memory
    500                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000027                ; Setup parameters for call to function osal_msg_deallocate
   \   000027   AA..         MOV     R2,?V0
   \   000029   AB..         MOV     R3,?V1
   \   00002B   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    501          
    502                // Next
    503                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002E                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000036   8A..         MOV     ?V0,R2
   \   000038   8B..         MOV     ?V1,R3
   \   00003A   E5..         MOV     A,?V0
   \   00003C   45..         ORL     A,?V1
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   24E6         ADD     A,#-0x1a
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   000051   245A         ADD     A,#0x5a
   \   000053   60D2         JZ      ??GenericApp_ProcessEvent_3
   \   000055   24EF         ADD     A,#-0x11
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   00005C   24FE         ADD     A,#-0x2
   \   00005E   6006         JZ      ??GenericApp_ProcessEvent_7
   \   000060   24D6         ADD     A,#-0x2a
   \   000062   60C3         JZ      ??GenericApp_ProcessEvent_3
   \   000064   80B5         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_7:
   \   000066   E5..         MOV     A,?V0
   \   000068   240C         ADD     A,#0xc
   \   00006A   F582         MOV     DPL,A
   \   00006C   E4           CLR     A
   \   00006D   35..         ADDC    A,?V1
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F5..         MOV     ?V2,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V3,A
   \   000078   78..         MOV     R0,#?V2
   \   00007A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00007D   0000         DW        0
   \   00007F   0200         DW        2
   \   000081   0680         DW        32774
   \   000083   ....         DW        ??GenericApp_ProcessEvent_8
   \   000085   2080         DW        32800
   \   000087   ....         DW        ??GenericApp_ProcessEvent_9
   \   000089   ....         DW        ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_8:
   \   00008B                ; Setup parameters for call to function HalLcdWriteString
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   7A..         MOV     R2,#`?<Constant "End Device Match Desc">` & 0xff
   \   00008F   7B..         MOV     R3,#(`?<Constant "End Device Match Desc">` >> 8) & 0xff
   \   000091   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000094                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000094   AA..         MOV     R2,?V0
   \   000096   AB..         MOV     R3,?V1
   \   000098   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00009B   8A..         MOV     ?V2,R2
   \   00009D   8B..         MOV     ?V3,R3
   \   00009F   EA           MOV     A,R2
   \   0000A0   45..         ORL     A,?V3
   \   0000A2   6083         JZ      ??GenericApp_ProcessEvent_3
   \   0000A4   8A82         MOV     DPL,R2
   \   0000A6   8B83         MOV     DPH,R3
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   7029         JNZ     ??GenericApp_ProcessEvent_10
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6023         JZ      ??GenericApp_ProcessEvent_10
   \   0000B1   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000B4   7402         MOV     A,#0x2
   \   0000B6   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000C1   E8           MOV     A,R0
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E9           MOV     A,R1
   \   0000C5   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD                ; Setup parameters for call to function HalLedSet
   \   0000CD   7A01         MOV     R2,#0x1
   \   0000CF   7908         MOV     R1,#0x8
   \   0000D1   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??GenericApp_ProcessEvent_10:
   \   0000D4                ; Setup parameters for call to function osal_mem_free
   \   0000D4   AA..         MOV     R2,?V2
   \   0000D6   AB..         MOV     R3,?V3
   \   0000D8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000DB   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   2413         ADD     A,#0x13
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   E4           CLR     A
   \   0000E5   35..         ADDC    A,?V1
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   8882         MOV     DPL,R0
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   0000F4                ; Setup parameters for call to function HalLedSet
   \   0000F4   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   0000F6   7908         MOV     R1,#0x8
   \   0000F8   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000FB   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   0000FE                ; Setup parameters for call to function HalLedSet
   \   0000FE   7A04         MOV     R2,#0x4
   \   000100   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_5:
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6401         XRL     A,#0x1
   \   000109   7002         JNZ     ??GenericApp_ProcessEvent_13
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_13:
   \   00010D   6003         JZ      $+5
   \   00010F   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \   000112   90....       MOV     DPTR,#rxMsgCount
   \   000115   E0           MOVX    A,@DPTR
   \   000116   2401         ADD     A,#0x1
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   3400         ADDC    A,#0x0
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E                ; Setup parameters for call to function HalLedSet
   \   00011E   7A02         MOV     R2,#0x2
   \   000120   7908         MOV     R1,#0x8
   \   000122   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000125   E5..         MOV     A,?V0
   \   000127   241F         ADD     A,#0x1f
   \   000129   F5..         MOV     ?V2,A
   \   00012B   E4           CLR     A
   \   00012C   35..         ADDC    A,?V1
   \   00012E   F5..         MOV     ?V3,A
   \   000130                ; Setup parameters for call to function getIDFromPkt
   \   000130   AA..         MOV     R2,?V2
   \   000132   FB           MOV     R3,A
   \   000133   12....       LCALL   `??getIDFromPkt::?relay`; Banked call to: getIDFromPkt
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   EA           MOV     A,R2
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   EB           MOV     A,R3
   \   000140   F0           MOVX    @DPTR,A
   \   000141                ; Setup parameters for call to function getDataFromPkt
   \   000141   AA..         MOV     R2,?V2
   \   000143   AB..         MOV     R3,?V3
   \   000145   12....       LCALL   `??getDataFromPkt::?relay`; Banked call to: getDataFromPkt
   \   000148   EA           MOV     A,R2
   \   000149   F8           MOV     R0,A
   \   00014A   EB           MOV     A,R3
   \   00014B   F9           MOV     R1,A
   \   00014C   EC           MOV     A,R4
   \   00014D   FA           MOV     R2,A
   \   00014E   ED           MOV     A,R5
   \   00014F   FB           MOV     R3,A
   \   000150   7403         MOV     A,#0x3
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ?XSTORE_R0123
   \   000158                ; Setup parameters for call to function updateLookUpTable
   \   000158   85..82       MOV     DPL,?XSP + 0
   \   00015B   85..83       MOV     DPH,?XSP + 1
   \   00015E   7407         MOV     A,#0x7
   \   000160   12....       LCALL   ?PUSH_XSTACK8_X
   \   000163   E5..         MOV     A,?V0
   \   000165   2424         ADD     A,#0x24
   \   000167   F582         MOV     DPL,A
   \   000169   E4           CLR     A
   \   00016A   35..         ADDC    A,?V1
   \   00016C   F583         MOV     DPH,A
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FA           MOV     R2,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FB           MOV     R3,A
   \   000173   12....       LCALL   `??updateLookUpTable::?relay`; Banked call to: updateLookUpTable
   \   000176   7407         MOV     A,#0x7
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017B   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   00017E   A3           INC     DPTR
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   90....       MOV     DPTR,#GenericApp_NwkState
   \   000183   F0           MOVX    @DPTR,A
   \   000184   6409         XRL     A,#0x9
   \   000186   600D         JZ      ??GenericApp_ProcessEvent_14
   \   000188   E0           MOVX    A,@DPTR
   \   000189   6407         XRL     A,#0x7
   \   00018B   6008         JZ      ??GenericApp_ProcessEvent_14
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   6406         XRL     A,#0x6
   \   000190   6003         JZ      $+5
   \   000192   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_14:
   \   000195                ; Setup parameters for call to function osal_start_timerEx
   \   000195   90....       MOV     DPTR,#txMsgDelay
   \   000198   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00019B   7A01         MOV     R2,#0x1
   \   00019D   7B00         MOV     R3,#0x0
   \   00019F   90....       MOV     DPTR,#GenericApp_TaskID
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F9           MOV     R1,A
   \   0001A4   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001A7   7404         MOV     A,#0x4
   \   0001A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AC   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    504                  
    505              }
    506          
    507              // return unprocessed events
    508              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   0001AF   EE           MOV     A,R6
   \   0001B0   FA           MOV     R2,A
   \   0001B1   EF           MOV     A,R7
   \   0001B2   6480         XRL     A,#0x80
   \   0001B4   02....       LJMP    ??GenericApp_ProcessEvent_15 & 0xFFFF
    509            }
    510          
    511            // Send a message out - This event is generated by a timer
    512            //  (setup in GenericApp_Init()).
    513            
    514           /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    515            if ( events & RX_PROCCESS_EVENT )
   \                     ??GenericApp_ProcessEvent_0:
   \   0001B7   EF           MOV     A,R7
   \   0001B8   5401         ANL     A,#0x1
   \   0001BA   7003         JNZ     $+5
   \   0001BC   02....       LJMP    ??GenericApp_ProcessEvent_16 & 0xFFFF
    516            {
    517              /*
    518              uint8 i;
    519              uint16 *pdevID;
    520              uint32 *pData;
    521              uint16 devID;
    522              
    523              uint8 *p;
    524              */
    525              uint16 ID;
    526              uint32 Data;
    527              char theMessage[MAX_NUMBER_OF_ENDDEVICES][25];
    528          
    529          
    530              
    531              ID = processFrameRx(rxBuffer);
   \   0001BF                ; Setup parameters for call to function processFrameRx
   \   0001BF   90....       MOV     DPTR,#rxBuffer
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   FA           MOV     R2,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FB           MOV     R3,A
   \   0001C7   12....       LCALL   `??processFrameRx::?relay`; Banked call to: processFrameRx
   \   0001CA   8A..         MOV     ?V0,R2
   \   0001CC   8B..         MOV     ?V1,R3
    532              
    533              
    534              GenericApp_DstAddress.addrMode = (afAddrMode_t)Addr16Bit;
   \   0001CE   90....       MOV     DPTR,#GenericApp_DstAddress + 8
   \   0001D1   7402         MOV     A,#0x2
   \   0001D3   F0           MOVX    @DPTR,A
    535              GenericApp_DstAddress.endPoint = GENERICAPP_ENDPOINT;
   \   0001D4   A3           INC     DPTR
   \   0001D5   740A         MOV     A,#0xa
   \   0001D7   F0           MOVX    @DPTR,A
    536              GenericApp_DstAddress.addr.shortAddr = lookForAddr(ID);
   \   0001D8                ; Setup parameters for call to function lookForAddr
   \   0001D8   12....       LCALL   `??lookForAddr::?relay`; Banked call to: lookForAddr
   \   0001DB   90....       MOV     DPTR,#GenericApp_DstAddress
   \   0001DE   EA           MOV     A,R2
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   EB           MOV     A,R3
   \   0001E2   F0           MOVX    @DPTR,A
    537              
    538             /* 
    539              pdevID = &devID;
    540              pData = &Data;
    541              *pdevID = ID;
    542              *pData = getCmd(ID);
    543              */
    544              Data = getCmd(ID);
   \   0001E3                ; Setup parameters for call to function getCmd
   \   0001E3   AA..         MOV     R2,?V0
   \   0001E5   AB..         MOV     R3,?V1
   \   0001E7   12....       LCALL   `??getCmd::?relay`   ; Banked call to: getCmd
   \   0001EA   8A..         MOV     ?V4,R2
   \   0001EC   8B..         MOV     ?V5,R3
    545              
    546              //p = &
    547          
    548              theMessage[GenericApp_DstAddress.addr.shortAddr][0] = (char)((ID >> 8) & 0x00FF);
   \   0001EE   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001F1   AAF0         MOV     R2,B
   \   0001F3   75F019       MOV     B,#0x19
   \   0001F6   E9           MOV     A,R1
   \   0001F7   A4           MUL     AB
   \   0001F8   2A           ADD     A,R2
   \   0001F9   F9           MOV     R1,A
   \   0001FA   7410         MOV     A,#0x10
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   E582         MOV     A,DPL
   \   000201   28           ADD     A,R0
   \   000202   FA           MOV     R2,A
   \   000203   E583         MOV     A,DPH
   \   000205   39           ADDC    A,R1
   \   000206   FB           MOV     R3,A
   \   000207   8A82         MOV     DPL,R2
   \   000209   8B83         MOV     DPH,R3
   \   00020B   E5..         MOV     A,?V1
   \   00020D   F0           MOVX    @DPTR,A
    549              theMessage[GenericApp_DstAddress.addr.shortAddr][1] = (char)(ID & 0x00FF); 
   \   00020E   A3           INC     DPTR
   \   00020F   E5..         MOV     A,?V0
   \   000211   12....       LCALL   ?Subroutine2 & 0xFFFF
    550             /* for(i = 0; i < 2; i++)
    551              {
    552                theMessage[GenericApp_DstAddress.addr.shortAddr][i] = (char)pdevID[i-1];
    553              }*/
    554              theMessage[GenericApp_DstAddress.addr.shortAddr][2] = (char)((Data >> 24) & 0x000000FF);
   \                     ??CrossCallReturnLabel_4:
   \   000214   A3           INC     DPTR
   \   000215   ED           MOV     A,R5
   \   000216   12....       LCALL   ?Subroutine2 & 0xFFFF
    555              theMessage[GenericApp_DstAddress.addr.shortAddr][3] = (char)((Data >> 16) & 0x000000FF); 
   \                     ??CrossCallReturnLabel_5:
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   EC           MOV     A,R4
   \   00021C   F0           MOVX    @DPTR,A
    556              theMessage[GenericApp_DstAddress.addr.shortAddr][4] = (char)((Data >> 8) & 0x000000FF);
   \   00021D   85....       MOV     ?V1,?V5
   \   000220   E5..         MOV     A,?V1
   \   000222   8A82         MOV     DPL,R2
   \   000224   8B83         MOV     DPH,R3
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   12....       LCALL   ?Subroutine1 & 0xFFFF
    557              theMessage[GenericApp_DstAddress.addr.shortAddr][5] = (char)(Data & 0x000000FF); 
   \                     ??CrossCallReturnLabel_2:
   \   00022D   A3           INC     DPTR
   \   00022E   E5..         MOV     A,?V4
   \   000230   F0           MOVX    @DPTR,A
    558             /* for(i = 2; i < 6; i++)
    559              {
    560                theMessage[GenericApp_DstAddress.addr.shortAddr][i] = (char)pData[i-4];
    561              }
    562          */
    563          
    564              if ( AF_DataRequest( &GenericApp_DstAddress, &GenericApp_epDesc,
    565                                     GENERICAPP_CLUSTERID,
    566                                     (byte)osal_strlen( theMessage[GenericApp_DstAddress.addr.shortAddr] ) + 1,
    567                                     (byte *)&theMessage[GenericApp_DstAddress.addr.shortAddr],
    568                                     &GenericApp_TransID,
    569                                     AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000231                ; Setup parameters for call to function osal_strlen
   \   000231   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000234                ; Setup parameters for call to function AF_DataRequest
   \   000234   75..1E       MOV     ?V0,#0x1e
   \   000237   78..         MOV     R0,#?V0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023C   75....       MOV     ?V0,#GenericApp_TransID & 0xff
   \   00023F   75....       MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
   \   000242   78..         MOV     R0,#?V0
   \   000244   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000247   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00024A   ACF0         MOV     R4,B
   \   00024C   75F019       MOV     B,#0x19
   \   00024F   E9           MOV     A,R1
   \   000250   A4           MUL     AB
   \   000251   2C           ADD     A,R4
   \   000252   F9           MOV     R1,A
   \   000253   7413         MOV     A,#0x13
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   E582         MOV     A,DPL
   \   00025A   28           ADD     A,R0
   \   00025B   F5..         MOV     ?V0,A
   \   00025D   E583         MOV     A,DPH
   \   00025F   39           ADDC    A,R1
   \   000260   F5..         MOV     ?V1,A
   \   000262   78..         MOV     R0,#?V0
   \   000264   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000267   EA           MOV     A,R2
   \   000268   2401         ADD     A,#0x1
   \   00026A   F5..         MOV     ?V0,A
   \   00026C   E4           CLR     A
   \   00026D   3400         ADDC    A,#0x0
   \   00026F   F5..         MOV     ?V1,A
   \   000271   78..         MOV     R0,#?V0
   \   000273   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000276   75..01       MOV     ?V0,#0x1
   \   000279   75..00       MOV     ?V1,#0x0
   \   00027C   78..         MOV     R0,#?V0
   \   00027E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000281   7900         MOV     R1,#0x0
   \   000283   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000285   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000287   7A..         MOV     R2,#GenericApp_DstAddress & 0xff
   \   000289   7B..         MOV     R3,#(GenericApp_DstAddress >> 8) & 0xff
   \   00028B   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00028E   7409         MOV     A,#0x9
   \   000290   12....       LCALL   ?DEALLOC_XSTACK8
   \   000293   E9           MOV     A,R1
   \   000294   7007         JNZ     ??GenericApp_ProcessEvent_16
    570                {
    571                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
   \   000296                ; Setup parameters for call to function HalLedSet
   \   000296   7A02         MOV     R2,#0x2
   \   000298   7908         MOV     R1,#0x8
   \   00029A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    572                }
    573          
    574            }
    575              
    576            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
    577              
    578            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_16:
   \   00029D   EE           MOV     A,R6
   \   00029E   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002A0   4003         JC      $+5
   \   0002A2   02....       LJMP    ??GenericApp_ProcessEvent_17 & 0xFFFF
    579            {
    580              if(keyPressSW4)
   \   0002A5   90....       MOV     DPTR,#keyPressSW4
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   606B         JZ      ??GenericApp_ProcessEvent_18
    581              {
    582                
    583                dstAddr.addrMode = Addr16Bit;
   \   0002AB   740F         MOV     A,#0xf
   \   0002AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B0   7402         MOV     A,#0x2
   \   0002B2   F0           MOVX    @DPTR,A
    584                dstAddr.addr.shortAddr = 0x0000;//NLME_GetShortAddr();//0x0000; // Coordinator
   \   0002B3   7407         MOV     A,#0x7
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   E4           CLR     A
   \   0002B9   F0           MOVX    @DPTR,A
   \   0002BA   A3           INC     DPTR
   \   0002BB   F0           MOVX    @DPTR,A
    585                ZDP_EndDeviceBindReq( &dstAddr, 0x0000, //NLME_GetShortAddr(),
    586                                      GenericApp_epDesc.endPoint,
    587                                      GENERICAPP_PROFID,
    588                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    589                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    590                                      FALSE );
   \   0002BC   75....       MOV     ?V0,#GenericApp_ClusterList & 0xff
   \   0002BF   75....       MOV     ?V1,#(GenericApp_ClusterList >> 8) & 0xff
   \   0002C2                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0002C2   F5..         MOV     ?V2,A
   \   0002C4   78..         MOV     R0,#?V2
   \   0002C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002C9   78..         MOV     R0,#?V0
   \   0002CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CE   75..01       MOV     ?V2,#0x1
   \   0002D1   78..         MOV     R0,#?V2
   \   0002D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002D6   78..         MOV     R0,#?V0
   \   0002D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002DB   75..01       MOV     ?V0,#0x1
   \   0002DE   78..         MOV     R0,#?V0
   \   0002E0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002E3   75..04       MOV     ?V0,#0x4
   \   0002E6   75..0F       MOV     ?V1,#0xf
   \   0002E9   78..         MOV     R0,#?V0
   \   0002EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EE   90....       MOV     DPTR,#GenericApp_epDesc
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   F9           MOV     R1,A
   \   0002F3   7C00         MOV     R4,#0x0
   \   0002F5   7D00         MOV     R5,#0x0
   \   0002F7   7410         MOV     A,#0x10
   \   0002F9   12....       LCALL   ?XSTACK_DISP101_8
   \   0002FC   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0002FF   7409         MOV     A,#0x9
   \   000301   12....       LCALL   ?DEALLOC_XSTACK8
    591                
    592                keyPressSW4 = 0;
   \   000304   90....       MOV     DPTR,#keyPressSW4
   \   000307   E4           CLR     A
   \   000308   F0           MOVX    @DPTR,A
    593                
    594                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   000309                ; Setup parameters for call to function osal_set_event
   \   000309   7A01         MOV     R2,#0x1
   \   00030B   FB           MOV     R3,A
   \   00030C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   F9           MOV     R1,A
   \   000311   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000314   8055         SJMP    ??GenericApp_ProcessEvent_19
    595                
    596              }
    597              else
    598              {
    599                //uint8 l=0;
    600                //for(int i=0; i< len; i++)                             //*buff != NULL)
    601                 //HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
    602               //HalUARTRead(HAL_UART_PORT_0, buff, 2);
    603               //if(HalUARTRead(HAL_UART_PORT_0, buff, 2))
    604                //buff[i] = U0DBUF;   
    605                 // buff[l] = uartGet();
    606                /*while(buff[l]!='\0')
    607                {
    608                  
    609                  *buff = uartGet(); 
    610                  buff++;
    611                  l++;
    612                }*/
    613                //if(l==0)
    614                //HalLcdRead(buff, 1);
    615                //buff++;
    616                
    617           //////////////////////////////////////////////////////////////////////////////
    618                //HalLcdRead(buff, 1);    //zakomentarisao
    619                
    620          ///////////////////////////////////////////////////////////////////////////////
    621                //HalLcdWriteString("Sinisa",0); 
    622                //if(buff[0]='\0')
    623              /*  for(i = 0;i <3;i++)
    624                    {
    625                      uartSend(*(buff + i));
    626                    }
    627                
    628                    HalLcdWriteString("",0);
    629                    HalLcdWriteString("--------------------------------",0);
    630                  */
    631          //////////////////////////////////////////////////////////////////////////////
    632              // if((char)*buff!='\0') //zakomentarisao
    633               {
    634                 GenericApp_SendTheMessage();
   \                     ??GenericApp_ProcessEvent_18:
   \   000316   75..00       MOV     ?V0,#0x0
   \                     ??GenericApp_ProcessEvent_20:
   \   000319   E5..         MOV     A,?V0
   \   00031B   75F00A       MOV     B,#0xa
   \   00031E   A4           MUL     AB
   \   00031F   F8           MOV     R0,A
   \   000320   AAF0         MOV     R2,B
   \   000322   EA           MOV     A,R2
   \   000323   F9           MOV     R1,A
   \   000324   74..         MOV     A,#lutData & 0xff
   \   000326   28           ADD     A,R0
   \   000327   F582         MOV     DPL,A
   \   000329   74..         MOV     A,#(lutData >> 8) & 0xff
   \   00032B   39           ADDC    A,R1
   \   00032C   F583         MOV     DPH,A
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F8           MOV     R0,A
   \   000330   A3           INC     DPTR
   \   000331   E0           MOVX    A,@DPTR
   \   000332   F9           MOV     R1,A
   \   000333   E8           MOV     A,R0
   \   000334   49           ORL     A,R1
   \   000335   6014         JZ      ??GenericApp_ProcessEvent_21
   \   000337                ; Setup parameters for call to function sendDataToPC
   \   000337   E5..         MOV     A,?V0
   \   000339   75F00A       MOV     B,#0xa
   \   00033C   A4           MUL     AB
   \   00033D   F8           MOV     R0,A
   \   00033E   EA           MOV     A,R2
   \   00033F   F9           MOV     R1,A
   \   000340   74..         MOV     A,#lutData & 0xff
   \   000342   28           ADD     A,R0
   \   000343   FA           MOV     R2,A
   \   000344   74..         MOV     A,#(lutData >> 8) & 0xff
   \   000346   39           ADDC    A,R1
   \   000347   FB           MOV     R3,A
   \   000348   12....       LCALL   `??sendDataToPC::?relay`; Banked call to: sendDataToPC
   \                     ??GenericApp_ProcessEvent_21:
   \   00034B   05..         INC     ?V0
   \   00034D   E5..         MOV     A,?V0
   \   00034F   C3           CLR     C
   \   000350   9414         SUBB    A,#0x14
   \   000352   40C5         JC      ??GenericApp_ProcessEvent_20
    635                 //HalLcdWriteString("Sile before send",0);
    636               }
    637              
    638          //////////////////////////////////////////////////////////////////////////////
    639               
    640               
    641               
    642              // Send "the" message
    643               //GenericApp_SendTheMessage();                                              //////////////////////////////////////////////////////////////////////////////////////////////////
    644               
    645               //Setup to send message again
    646               osal_start_timerEx( GenericApp_TaskID,
    647                                   GENERICAPP_SEND_MSG_EVT,
    648                                   1000); //txMsgDelay );
   \   000354                ; Setup parameters for call to function osal_start_timerEx
   \   000354   90....       MOV     DPTR,#__Constant_3e8
   \   000357   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00035A   7A01         MOV     R2,#0x1
   \   00035C   7B00         MOV     R3,#0x0
   \   00035E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000361   E0           MOVX    A,@DPTR
   \   000362   F9           MOV     R1,A
   \   000363   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000366   7404         MOV     A,#0x4
   \   000368   12....       LCALL   ?DEALLOC_XSTACK8
    649              
    650              // osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
    651              
    652              }
    653              // return unprocessed events
    654              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_19:
   \   00036B   EE           MOV     A,R6
   \   00036C   6401         XRL     A,#0x1
   \   00036E   FA           MOV     R2,A
   \   00036F   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_15:
   \   000370   FB           MOV     R3,A
   \   000371   8004         SJMP    ??GenericApp_ProcessEvent_22
    655            }
    656          
    657          #if defined( IAR_ARMCM3_LM )
    658            // Receive a message from the RTOS queue
    659            if ( events & GENERICAPP_RTOS_MSG_EVT )
    660            {
    661              // Process message from RTOS queue
    662              GenericApp_ProcessRtosMessage();
    663          
    664              // return unprocessed events
    665              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    666            }
    667          #endif
    668          
    669            // Discard unknown events
    670            return 0;
   \                     ??GenericApp_ProcessEvent_17:
   \   000373   7A00         MOV     R2,#0x0
   \   000375   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_22:
   \   000377   75820A       MOV     DPL,#0xa
   \   00037A   758301       MOV     DPH,#0x1
   \   00037D   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   000380   7F08         MOV     R7,#0x8
   \   000382   02....       LJMP    ?BANKED_LEAVE_XDATA
    671          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#GenericApp_DstAddress
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   75F019       MOV     B,#0x19
   \   00000C   A4           MUL     AB
   \   00000D   F8           MOV     R0,A
   \   00000E   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Match Desc">`:
   \   000000   456E6420     DB "End Device Match Desc"
   \            44657669
   \            6365204D
   \            61746368
   \            20446573
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    672          
    673          /*********************************************************************
    674           * Event Generation Functions
    675           */
    676          
    677          /*********************************************************************
    678           * @fn      GenericApp_ProcessZDOMsgs()
    679           *
    680           * @brief   Process response messages
    681           *
    682           * @param   none
    683           *
    684           * @return  none
    685           */
    686          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    687          {
    688          
    689            switch ( inMsg->clusterID )
    690            {
    691              case End_Device_Bind_rsp:
    692                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    693                {
    694                
    695                  // Light LED
    696                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    697                }
    698          #if defined( BLINK_LEDS )
    699                else
    700                {
    701                  // Flash LED to show failure
    702                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    703                }
    704          #endif
    705                break;
    706          
    707              case Match_Desc_rsp:
    708                {
    709                  HalLcdWriteString("End Device Match Desc",0);
    710                  
    711                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    712                  if ( pRsp )
    713                  {
    714                        if ( pRsp->status == ZSuccess && pRsp->cnt )
    715                        {
    716                          
    717                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    718                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    719                      // Take the first endpoint, Can be changed to search through endpoints
    720                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    721          
    722                      // Light LED
    723                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    724                    }
    725                    osal_mem_free( pRsp );
    726                  }
    727                }
    728                break;
    729            }
    730          }
    731          
    732          /*********************************************************************
    733           * @fn      GenericApp_HandleKeys
    734           *
    735           * @brief   Handles all key events for this device.
    736           *
    737           * @param   shift - true if in shift/alt.
    738           * @param   keys - bit field for key events. Valid entries:
    739           *                 HAL_KEY_SW_4
    740           *                 HAL_KEY_SW_3
    741           *                 HAL_KEY_SW_2
    742           *                 HAL_KEY_SW_1
    743           *
    744           * @return  none
    745           *//*
    746          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    747          {
    748            zAddrType_t dstAddr;
    749          
    750            // Shift is used to make each button/switch dual purpose.
    751            if ( shift )
    752            {
    753              if ( keys & HAL_KEY_SW_1 )
    754              {
    755              }
    756              if ( keys & HAL_KEY_SW_2 )
    757              {
    758              }
    759              if ( keys & HAL_KEY_SW_3 )
    760              {
    761              }
    762              if ( keys & HAL_KEY_SW_4 )
    763              {
    764              }
    765            }
    766            else
    767            {
    768              if ( keys & HAL_KEY_SW_1 )
    769              {
    770          #if defined( SWITCH1_BIND )
    771                // We can use SW1 to simulate SW2 for devices that only have one switch,
    772                keys |= HAL_KEY_SW_2;
    773          #elif defined( SWITCH1_MATCH )
    774                // or use SW1 to simulate SW4 for devices that only have one switch
    775                keys |= HAL_KEY_SW_4;
    776          #else
    777                // Normally, SW1 changes the rate that messages are sent
    778                if ( txMsgDelay > 100 )
    779                {
    780                  // Cut the message TX delay in half
    781                  txMsgDelay /= 2;
    782                }
    783                else
    784                {
    785                  // Reset to the default
    786                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    787                }
    788          #endif
    789              }
    790          
    791              if ( keys & HAL_KEY_SW_2 )
    792              {
    793                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    794          
    795                // Initiate an End Device Bind Request for the mandatory endpoint
    796                dstAddr.addrMode = Addr16Bit;
    797                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    798                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    799                                      GenericApp_epDesc.endPoint,
    800                                      GENERICAPP_PROFID,
    801                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    802                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    803                                      FALSE );
    804              }
    805          
    806              if ( keys & HAL_KEY_SW_3 )
    807              {
    808              }
    809          
    810              if ( keys & HAL_KEY_SW_4 )
    811              {
    812                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    813                // Initiate a Match Description Request (Service Discovery)
    814                dstAddr.addrMode = AddrBroadcast;
    815                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    816                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    817                                  GENERICAPP_PROFID,
    818                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    819                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    820                                  FALSE );
    821              }
    822            }
    823          }
    824          */
    825          /*********************************************************************
    826           * LOCAL FUNCTIONS
    827           */
    828          
    829          /*********************************************************************
    830           * @fn      GenericApp_MessageMSGCB
    831           *
    832           * @brief   Data message processor callback.  This function processes
    833           *          any incoming data - probably from other devices.  So, based
    834           *          on cluster ID, perform the intended action.
    835           *
    836           * @param   none
    837           *
    838           * @return  none
    839           */
    840          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    841          {
    842            //uint8 i;
    843            //////////////////////////////////////////////////////////////////////////////
    844            Data_t Data;
    845            uint16 addr;
    846            //char * id;
    847            //////////////////////////////////////////////////////////////////////////////
    848            switch ( pkt->clusterId )
    849            {
    850              case GENERICAPP_CLUSTERID:
    851                
    852                {
    853                rxMsgCount += 1;  // Count this message
    854                HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
    855          
    856               // HalLcdWriteString("--------------------------------",0);
    857               // HalLcdWriteString("Received data:",0);
    858          /*      
    859                for(i=0;i<pkt->cmd.DataLength;i++)
    860                {
    861                  uartSend(*(pkt->cmd.Data + i));
    862                  
    863                }
    864          */     
    865           ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    866                //Data.devID = *(pkt->cmd.Data);
    867                Data.devID =getIDFromPkt(&pkt->cmd);
    868                
    869                //id = (char*)&Data.devID;
    870                //pkt->cmd.Data++;
    871                //pkt->cmd.Data++;
    872                //Data.data = *(pkt->cmd.Data);
    873                Data.data =getDataFromPkt(&pkt->cmd); 
    874                //id = (char*)&Data.data;
    875                addr = pkt->macSrcAddr;
    876                
    877                updateLookUpTable(Data, addr);
    878                //HalLcdWriteString(id,0); 
    879                //HalLcdWriteString("Sina----------------------",0); 
    880                
    881           ///////////////////////////////////////////////////////////////////////////////
    882           //zakomentarisao
    883                /*
    884                switch(*(pkt->cmd.Data))
    885                {
    886                  
    887                  case ('T'):
    888                  {
    889                        HalLcdWriteString("Temperatura: ",0);
    890                        for(i=1;i<pkt->cmd.DataLength;i++)
    891                        {
    892                          if(3 == i)
    893                          {
    894                            uartSend('.');
    895                          }
    896                          
    897                            uartSend(*(pkt->cmd.Data + i));
    898                        }
    899                        
    900                        HalLcdWriteString(" *C",0);
    901                        break;
    902                  }
    903                
    904                
    905                 case ('P'):
    906                 {
    907                      
    908                   HalLcdWriteString("Pritisak: ",0);
    909                      for(i=1;i<pkt->cmd.DataLength;i++)
    910                      {
    911                        uartSend(*(pkt->cmd.Data + i));
    912                      } 
    913                     HalLcdWriteString(" mbar",0);
    914                       break;
    915                  }
    916                    
    917                 case ('H'):
    918                  {
    919                   HalLcdWriteString("Vlaznost",0);
    920                   for(i=1;i<pkt->cmd.DataLength;i++)
    921                      {
    922                      uartSend(*(pkt->cmd.Data + i));
    923                      }
    924                     HalLcdWriteString(" %",0);
    925                   break;
    926                   }
    927                  
    928                case ('M'):
    929                  {
    930                  if(*(pkt->cmd.Data+1)=='1')
    931                     HalLcdWriteString("Pokret je detektovan",0);
    932                     
    933                   else
    934                     HalLcdWriteString(" GreskaM!!! ",0);
    935                  break;
    936                  }
    937          
    938                  case ('D'):
    939                    {
    940                     if(*(pkt->cmd.Data+1)=='1')
    941                        HalLcdWriteString("Vrata su otvorena",0);
    942                     
    943                      else if(*(pkt->cmd.Data+1)=='0')
    944                         HalLcdWriteString("Vrata su zatvorena",0);
    945                  
    946                   else
    947                     HalLcdWriteString(" GreskaD!!! ",0);
    948                   break;
    949                    }
    950                
    951                    case ('O'):
    952                    {
    953                    if(*(pkt->cmd.Data+1)=='1')
    954                     HalLcdWriteString("Mrak",0);
    955                     
    956                    else if(*(pkt->cmd.Data+1)=='2')
    957                     HalLcdWriteString("Slabo osvijetljeno",0);
    958                  
    959                    else if(*(pkt->cmd.Data+1)=='3')
    960                     HalLcdWriteString("Osvijetljeno",0);
    961                  
    962                    else if(*(pkt->cmd.Data+1)=='4')
    963                     HalLcdWriteString("Jako osvijetljeno",0);
    964                  
    965                    else
    966                      HalLcdWriteString(" GreskaO!!! ",0);
    967                    break;
    968                    }
    969                } //second switch end
    970                */
    971          ///////////////////////////////////////////////////////////////////////////////      
    972              //  HalLcdWriteString("",0);
    973              //  HalLcdWriteString("--------------------------------",0);
    974                
    975               
    976                }
    977                break; //break first switch
    978                
    979            default:
    980              
    981             //HalLcdWriteString("Podatak nije primljen.",0);
    982                  
    983              break;
    984          
    985            }
    986          
    987          
    988          }
    989          
    990          /*********************************************************************
    991           * @fn      GenericApp_SendTheMessage
    992           *
    993           * @brief   Send "the" message.
    994           *
    995           * @param   none
    996          
    997           *
    998           * @return  none
    999           */
   1000          static void GenericApp_SendTheMessage( void )
   1001          {
   1002            uint8 i;
   1003            //char * id;
   1004            //uint32 data;
   1005            
   1006            for(i = 0; i < 20; i++)
   1007            {
   1008              //HalLcdWriteString("Sinisa-------------petlja-----",0);
   1009              if(0 != lutData[i].devID)
   1010              {
   1011                sendDataToPC(&lutData[i]);
   1012                
   1013                //id = (char*)&lutData[i].devID;
   1014               // id[2] = '\0';
   1015                 // HalLcdWriteString("-----------------------------Borislav  Send----------------------",0);
   1016                 // HalLcdWriteString(id,0);
   1017                 // HalLcdWriteString("-----------------------------Borislav  Send----------------------",0);
   1018                //HalLcdWriteString("Sinisa-------------petlja-----",0);
   1019              }
   1020            } 
   1021             //HalLcdWriteString("Sinisa----------------------",0); 
   1022          /*
   1023            
   1024            uint8 i;
   1025            char num = '0';
   1026          
   1027            char theMessageData[MAX_NUMBER_OF_ENDDEVICES][25] = {"You are EndDevice1111","You are EndDevice2222"};
   1028            //char *msg1;
   1029            //char *msg2;
   1030            //char *msg[MAX_NUMBER_OF_ENDDEVICES];
   1031            //HalLcdRead(msg[0],2);
   1032            //HalLcdRead(msg[1],2);
   1033            
   1034            //HalLcdWriteString("Sile in send",0);
   1035            */
   1036            /*
   1037            char theMessage[MAX_NUMBER_OF_ENDDEVICES][25] = {"0000", "FFFF"};
   1038            if('1' == (char)*buff)
   1039            {
   1040              theMessage[0][0] = (char)buff[0];
   1041              theMessage[0][1] = (char)buff[1];
   1042              theMessage[0][2] = '\0';
   1043              theMessage[1][0] = '0';
   1044              theMessage[1][1] = '0';
   1045              theMessage[1][2] = '\0';
   1046             // HalLcdWriteString("Buff 1",0);
   1047            }
   1048            else
   1049            {
   1050              theMessage[1][0] = (char)buff[0];
   1051              theMessage[1][1] = (char)buff[1];
   1052              //theMessage[1][0] = (char)*buff;
   1053              //theMessage[1][1] = (char)*(buff+1);
   1054              theMessage[1][2] = '\0';
   1055              theMessage[0][0] = '0';
   1056              theMessage[0][1] = '0';
   1057              theMessage[0][2] = '\0';
   1058              //HalLcdWriteString("Buff 2",0);
   1059            }
   1060            
   1061            for(i = 0; i<brojac; i++)
   1062            {
   1063             */ 
   1064             /*  HalLcdWriteString("Ulazak u petlju",0);
   1065               num+=i;
   1066               uartSend(num);
   1067               HalLcdWriteString("",0);
   1068               */
   1069            /*  if(GenericApp_DstAddress[i].addr.shortAddr != 0 )
   1070                                   
   1071              {
   1072                if ( AF_DataRequest( &GenericApp_DstAddress[i], &GenericApp_epDesc,
   1073                                   GENERICAPP_CLUSTERID,
   1074                                   //(byte)osal_strlen( theMessageData[i] ) + 1,
   1075                                   //(byte *)&theMessageData[i],
   1076                                   (byte)osal_strlen( theMessage[i] ) + 1,
   1077                                   (byte *)&theMessage[i],
   1078                                   //(byte *)theMessageData[i],
   1079                                   //(byte)osal_strlen(msg[i]) + 1,
   1080                                   //(byte *)msg[i],
   1081                                   &GenericApp_TransID,
   1082                                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1083                {
   1084                // Successfully requested to be sent.
   1085                  HalLcdWriteString("Podatak je poslan.",0);
   1086            */
   1087                  /*HalLcdWriteString("###############################",0);
   1088               
   1089                
   1090                    for(i = 0;i <3;i++)
   1091                    {
   1092                      uartSend(*(buff + i));
   1093                    }
   1094                
   1095                    HalLcdWriteString("",0);
   1096                    HalLcdWriteString("--------------------------------",0);
   1097                  */
   1098            /*    }
   1099                else
   1100                {
   1101                // Error occurred in request to send.
   1102                  HalLcdWriteString("Podatak nije poslan.",0);
   1103                }
   1104              
   1105              }
   1106            }
   1107          
   1108            buff[0] = '\0';
   1109            */
   1110          }
   1111          
   1112          #if defined( IAR_ARMCM3_LM )
   1113          /*********************************************************************
   1114           * @fn      GenericApp_ProcessRtosMessage
   1115           *
   1116           * @brief   Receive message from RTOS queue, send response back.
   1117           *
   1118           * @param   none
   1119           *
   1120           * @return  none
   1121           */
   1122          static void GenericApp_ProcessRtosMessage( void )
   1123          {
   1124            osalQueue_t inMsg;
   1125          
   1126            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
   1127            {
   1128              uint8 cmndId = inMsg.cmnd;
   1129              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
   1130          
   1131              switch ( cmndId )
   1132              {
   1133                case CMD_INCR:
   1134                  counter += 1;  /* Increment the incoming counter */
   1135                                 /* Intentionally fall through next case */
   1136          
   1137                case CMD_ECHO:
   1138                {
   1139                  userQueue_t outMsg;
   1140          
   1141                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
   1142                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
   1143                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
   1144                  break;
   1145                }
   1146          
   1147                default:
   1148                  break;  /* Ignore unknown command */
   1149              }
   1150            }
   1151          }
   1152          #endif
   1153          
   1154          /**********************************************************************/
   1155          
   1156          /*********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   GenericApp_Init
        0      9   -> HalLcdWriteString
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> circularInit
        0      9   -> circularPut
        0      9   -> dllInit
        0      9   -> lookUpInit
      1    291   GenericApp_ProcessEvent
        0    291   -> AF_DataRequest
        0    282   -> HalLcdWriteString
        0    282   -> HalLedSet
        0    282   -> ZDO_ParseEPListRsp
        0    291   -> ZDP_EndDeviceBindReq
        0    282   -> getCmd
        0    282   -> getDataFromPkt
        0    282   -> getIDFromPkt
        0    282   -> lookForAddr
        0    282   -> osal_mem_free
        0    282   -> osal_msg_deallocate
        0    282   -> osal_msg_receive
        0    282   -> osal_set_event
        0    286   -> osal_start_timerEx
        0    282   -> osal_strlen
        0    282   -> processFrameRx
        0    282   -> sendDataToPC
        0    289   -> updateLookUpTable


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      22  ?<Constant "End Device Match Desc">
      11  ?<Constant "GenericApp">
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       4  ?<Initializer for txMsgDelay>
      15  ?Subroutine0
      10  ?Subroutine1
       7  ?Subroutine2
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
      12  GenericApp_DstAddress
     148  GenericApp_Init
       6  GenericApp_Init::?relay
       1  GenericApp_NwkState
     901  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
      20  SAddr
       4  __Constant_3e8
       1  brojac
       2  buff
     260  cMain
       1  coin
       2  counter
      10  dataBuffer
       1  dataRdy
       1  index
       1  keyPressSW4
     200  lutData
       1  prevData
       2  rxBuffer
       2  rxMsgCount
      20  shortAddressOfEndDevice
       4  txMsgDelay
      29  uartConfig

 
 1 081 bytes in segment BANKED_CODE
    12 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_I
     6 bytes in segment XDATA_ID
    51 bytes in segment XDATA_ROM_C
   584 bytes in segment XDATA_Z
 
    18 bytes of CODE     memory
    47 bytes of CONST    memory (+ 4 bytes shared)
 1 081 bytes of HUGECODE memory
   590 bytes of XDATA    memory

Errors: none
Warnings: none
