###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                04/May/2017  14:07:09
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\hal\common\hal_drivers.c
#    Command line       =  
#        -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Components\hal\common\hal_drivers.c" -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\dll\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\hal_drivers.lst
#    Object file        =  
#        C:\Users\ljuic\Desktop\New
#        folder\ZigBeeCoordinator\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\hal_drivers.r51
#
###############################################################################

C:\Users\ljuic\Desktop\New folder\ZigBeeCoordinator\Components\hal\common\hal_drivers.c
      1          /**************************************************************************************************
      2            Filename:       hal_drivers.c
      3            Revised:        $Date: 2007-07-06 10:42:24 -0700 (Fri, 06 Jul 2007) $
      4            Revision:       $Revision: 13579 $
      5          
      6            Description:    This file contains the interface to the Drivers Service.
      7          
      8          
      9            Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                            INCLUDES
     42           **************************************************************************************************/
     43          
     44          #include "hal_adc.h"
     45          #if (defined HAL_AES) && (HAL_AES == TRUE)
     46          #include "hal_aes.h"
     47          #endif
     48          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
     49          #include "hal_buzzer.h"
     50          #endif
     51          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
     52          #include "hal_dma.h"
     53          #endif
     54          #include "hal_drivers.h"
     55          #include "hal_key.h"
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_sleep.h"
     59          #include "hal_timer.h"
     60          #include "hal_types.h"
     61          #include "hal_uart.h"
     62          #ifdef CC2591_COMPRESSION_WORKAROUND
     63          #include "mac_rx.h"
     64          #endif
     65          #include "OSAL.h"
     66          #if defined POWER_SAVING
     67          #include "OSAL_PwrMgr.h"
     68          #endif
     69          #if (defined HAL_HID) && (HAL_HID == TRUE)
     70          #include "usb_hid.h"
     71          #endif
     72          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
     73          #include "hal_spi.h"
     74          #endif
     75          
     76          
     77          ////////////////////////////////////////////////////////////////////////////////////// 
     78          //#include "includes/dll.h"
     79          //#include "includes/look_up_table.h"
     80          ////////////////////////////////////////////////////////////////////////////////////// 
     81          /**************************************************************************************************
     82           *                                      GLOBAL VARIABLES
     83           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          uint8 Hal_TaskID;
   \                     Hal_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     85          
     86          extern void HalLedUpdate( void ); /* Notes: This for internal only so it shouldn't be in hal_led.h */
     87          
     88          /**************************************************************************************************
     89           * @fn      Hal_Init
     90           *
     91           * @brief   Hal Initialization function.
     92           *
     93           * @param   task_id - Hal TaskId
     94           *
     95           * @return  None
     96           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void Hal_Init( uint8 task_id )
   \                     Hal_Init:
     98          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     99            /* Register task ID */
    100            Hal_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_TaskID
   \   000008   F0           MOVX    @DPTR,A
    101          
    102          #ifdef CC2591_COMPRESSION_WORKAROUND
    103            osal_start_reload_timer( Hal_TaskID, PERIOD_RSSI_RESET_EVT, PERIOD_RSSI_RESET_TIMEOUT );
    104          #endif
    105          }
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    106          
    107          /**************************************************************************************************
    108           * @fn      Hal_DriverInit
    109           *
    110           * @brief   Initialize HW - These need to be initialized before anyone.
    111           *
    112           * @param   task_id - Hal TaskId
    113           *
    114           * @return  None
    115           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalDriverInit (void)
   \                     HalDriverInit:
    117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118            /* TIMER */
    119          #if (defined HAL_TIMER) && (HAL_TIMER == TRUE)
    120          #endif
    121          
    122            /* ADC */
    123          #if (defined HAL_ADC) && (HAL_ADC == TRUE)
    124            HalAdcInit();
   \   000004                ; Setup parameters for call to function HalAdcInit
   \   000004   12....       LCALL   `??HalAdcInit::?relay`; Banked call to: HalAdcInit
    125          #endif
    126          
    127            /* DMA */
    128          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    129            // Must be called before the init call to any module that uses DMA.
    130            HalDmaInit();
   \   000007                ; Setup parameters for call to function HalDmaInit
   \   000007   12....       LCALL   `??HalDmaInit::?relay`; Banked call to: HalDmaInit
    131          #endif
    132          
    133            /* AES */
    134          #if (defined HAL_AES) && (HAL_AES == TRUE)
    135            HalAesInit();
   \   00000A                ; Setup parameters for call to function HalAesInit
   \   00000A   12....       LCALL   `??HalAesInit::?relay`; Banked call to: HalAesInit
    136          #endif
    137          
    138            /* LCD */
    139          #if (defined HAL_LCD) && (HAL_LCD == TRUE)
    140            //HalLcdInit();
    141          #endif
    142          
    143            /* LED */
    144          #if (defined HAL_LED) && (HAL_LED == TRUE)
    145            HalLedInit();
   \   00000D                ; Setup parameters for call to function HalLedInit
   \   00000D   12....       LCALL   `??HalLedInit::?relay`; Banked call to: HalLedInit
    146          #endif
    147          
    148            /* UART */
    149          #if (defined HAL_UART) && (HAL_UART == TRUE)
    150            HalUARTInit();
   \   000010                ; Setup parameters for call to function HalUARTInit
   \   000010   12....       LCALL   `??HalUARTInit::?relay`; Banked call to: HalUARTInit
    151          #endif
    152          
    153            /* KEY */
    154          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    155            HalKeyInit();
   \   000013                ; Setup parameters for call to function HalKeyInit
   \   000013   12....       LCALL   `??HalKeyInit::?relay`; Banked call to: HalKeyInit
    156          #endif
    157            
    158            /* SPI */
    159          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    160            HalSpiInit();
    161          #endif
    162          
    163            /* HID */
    164          #if (defined HAL_HID) && (HAL_HID == TRUE)
    165            usbHidInit();
    166          #endif
    167          }
   \   000016   80..         SJMP    ?Subroutine0
    168          
    169          /**************************************************************************************************
    170           * @fn      Hal_ProcessEvent
    171           *
    172           * @brief   Hal Process Event
    173           *
    174           * @param   task_id - Hal TaskId
    175           *          events - events
    176           *
    177           * @return  None
    178           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          uint16 Hal_ProcessEvent( uint8 task_id, uint16 events )
   \                     Hal_ProcessEvent:
    180          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    181            uint8 *msgPtr;
    182          
    183            (void)task_id;  // Intentionally unreferenced parameter
    184          
    185            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6018         JZ      ??Hal_ProcessEvent_0
    186            {
    187              msgPtr = osal_msg_receive(Hal_TaskID);
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8003         SJMP    ??Hal_ProcessEvent_1
    188          
    189              while (msgPtr)
    190              {
    191                /* Do something here - for now, just deallocate the msg and move on */
    192          
    193                /* De-allocate */
    194                osal_msg_deallocate( msgPtr );
   \                     ??Hal_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function osal_msg_deallocate
   \   00000F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    195                /* Next */
    196                msgPtr = osal_msg_receive( Hal_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \                     ??Hal_ProcessEvent_1:
   \   000012   90....       MOV     DPTR,#Hal_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
    197              }
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70F1         JNZ     ??Hal_ProcessEvent_2
    198              return events ^ SYS_EVENT_MSG;
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   6480         XRL     A,#0x80
   \   000023   8037         SJMP    ??Hal_ProcessEvent_3
    199            }
    200          
    201          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
    202            if (events & HAL_BUZZER_EVENT)
    203            {
    204              HalBuzzerStop();
    205              return events ^ HAL_BUZZER_EVENT;
    206            }
    207          #endif
    208          
    209          #ifdef CC2591_COMPRESSION_WORKAROUND
    210            if ( events & PERIOD_RSSI_RESET_EVT )
    211            {
    212              macRxResetRssi();
    213              return (events ^ PERIOD_RSSI_RESET_EVT);
    214            }
    215          #endif
    216          
    217            if ( events & HAL_LED_BLINK_EVENT )
   \                     ??Hal_ProcessEvent_0:
   \   000025   EE           MOV     A,R6
   \   000026   5420         ANL     A,#0x20
   \   000028   6008         JZ      ??Hal_ProcessEvent_4
    218            {
    219          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    220              HalLedUpdate();
   \   00002A                ; Setup parameters for call to function HalLedUpdate
   \   00002A   12....       LCALL   `??HalLedUpdate::?relay`; Banked call to: HalLedUpdate
    221          #endif /* BLINK_LEDS && HAL_LED */
    222              return events ^ HAL_LED_BLINK_EVENT;
   \   00002D   EE           MOV     A,R6
   \   00002E   6420         XRL     A,#0x20
   \   000030   8028         SJMP    ??Hal_ProcessEvent_5
    223            }
    224          
    225            if (events & HAL_KEY_EVENT)
   \                     ??Hal_ProcessEvent_4:
   \   000032   EE           MOV     A,R6
   \   000033   5410         ANL     A,#0x10
   \   000035   6028         JZ      ??Hal_ProcessEvent_6
    226            {
    227          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    228              /* Check for keys */
    229              HalKeyPoll();
   \   000037                ; Setup parameters for call to function HalKeyPoll
   \   000037   12....       LCALL   `??HalKeyPoll::?relay`; Banked call to: HalKeyPoll
    230          
    231              /* if interrupt disabled, do next polling */
    232              if (!Hal_KeyIntEnable)
   \   00003A   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   7017         JNZ     ??Hal_ProcessEvent_7
    233              {
    234                osal_start_timerEx( Hal_TaskID, HAL_KEY_EVENT, 100);
   \   000040                ; Setup parameters for call to function osal_start_timerEx
   \   000040   90....       MOV     DPTR,#__Constant_64
   \   000043   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000046   7A10         MOV     R2,#0x10
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   90....       MOV     DPTR,#Hal_TaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
    235              }
    236          #endif
    237              return events ^ HAL_KEY_EVENT;
   \                     ??Hal_ProcessEvent_7:
   \   000057   EE           MOV     A,R6
   \   000058   6410         XRL     A,#0x10
   \                     ??Hal_ProcessEvent_5:
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \                     ??Hal_ProcessEvent_3:
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??Hal_ProcessEvent_8
    238            }
    239          
    240          #if defined POWER_SAVING
    241            if ( events & HAL_SLEEP_TIMER_EVENT )
    242            {
    243              halRestoreSleepLevel();
    244              return events ^ HAL_SLEEP_TIMER_EVENT;
    245            }
    246          
    247            if ( events & HAL_PWRMGR_HOLD_EVENT )
    248            {
    249              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_HOLD);
    250          
    251              (void)osal_stop_timerEx(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    252              (void)osal_clear_event(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    253          
    254              return (events & ~(HAL_PWRMGR_HOLD_EVENT | HAL_PWRMGR_CONSERVE_EVENT));
    255            }
    256          
    257            if ( events & HAL_PWRMGR_CONSERVE_EVENT )
    258            {
    259              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_CONSERVE);
    260              return events ^ HAL_PWRMGR_CONSERVE_EVENT;
    261            }
    262           ////////////////////////////////////////////////////////////////////////////////////// 
    263            /*if (events & HAL_UART_EVENT)
    264            {
    265              //HalBuzzerStop();
    266              HalUARTRead(HAL_UART_PORT_0, uartConfig.rx.pBuffer, 128);
    267              
    268              
    269              //osal_set_event(GenericApp_TaskID, RX_PROCCESS_EVENT);
    270              osal_start_timerEx (Hal_TaskID, HAL_UART_EVENT, 1000);
    271              return events ^ HAL_UART_EVENT;
    272            }*/
    273            //////////////////////////////////////////////////////////////////////////////////////
    274          #endif
    275          
    276            return 0;
   \                     ??Hal_ProcessEvent_6:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??Hal_ProcessEvent_8:
   \   000063   7F02         MOV     R7,#0x2
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          }
    278          
    279          /**************************************************************************************************
    280           * @fn      Hal_ProcessPoll
    281           *
    282           * @brief   This routine will be called by OSAL to poll UART, TIMER...
    283           *
    284           * @param   task_id - Hal TaskId
    285           *
    286           * @return  None
    287           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          void Hal_ProcessPoll ()
   \                     Hal_ProcessPoll:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290          #if defined( POWER_SAVING )
    291            /* Allow sleep before the next OSAL event loop */
    292            ALLOW_SLEEP_MODE();
    293          #endif
    294            
    295            /* UART Poll */
    296          #if (defined HAL_UART) && (HAL_UART == TRUE)
    297            HalUARTPoll();
   \   000004                ; Setup parameters for call to function HalUARTPoll
   \   000004   12....       LCALL   `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    298          #endif
    299            
    300            /* SPI Poll */
    301          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    302            HalSpiPoll();
    303          #endif
    304          
    305            /* HID poll */
    306          #if (defined HAL_HID) && (HAL_HID == TRUE)
    307            usbHidProcessEvents();
    308          #endif
    309           
    310          }
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalDriverInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalDriverInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_ProcessPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessPoll
    311          
    312          /**************************************************************************************************
    313          **************************************************************************************************/
    314          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalDriverInit
        2      0   -> HalAdcInit
        2      0   -> HalAesInit
        2      0   -> HalDmaInit
        2      0   -> HalKeyInit
        2      0   -> HalLedInit
        2      0   -> HalUARTInit
      2      0   Hal_Init
      0     14   Hal_ProcessEvent
        0     10   -> HalKeyPoll
        0     10   -> HalLedUpdate
        0     10   -> osal_msg_deallocate
        0     10   -> osal_msg_receive
        0     14   -> osal_start_timerEx
      2      0   Hal_ProcessPoll
        2      0   -> HalUARTPoll


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      24  HalDriverInit
       6  HalDriverInit::?relay
       9  Hal_Init
       6  Hal_Init::?relay
     104  Hal_ProcessEvent
       6  Hal_ProcessEvent::?relay
      10  Hal_ProcessPoll
       6  Hal_ProcessPoll::?relay
       1  Hal_TaskID
       4  __Constant_64

 
 154 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   4 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  24 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 154 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
